// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgMysql.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgMysql.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {
class PackMysqlParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PackMysqlParam>
     _instance;
} _PackMysqlParam_default_instance_;
class PackMysqlServerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PackMysqlServerInfo>
     _instance;
} _PackMysqlServerInfo_default_instance_;

namespace protobuf_NFMsgMysql_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, strrecordname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, strkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, fieldveclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, valueveclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, bexit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, nreqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, nret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlParam, etype_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, nrconnecttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, nrconnecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, nport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, strdbname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, strdnsip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, strdbuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, strdbpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackMysqlServerInfo, nserverid_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(PackMysqlParam)},
  { 21, 34, sizeof(PackMysqlServerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackMysqlParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PackMysqlServerInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "NFMsgMysql.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PackMysqlParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PackMysqlParam_default_instance_);_PackMysqlServerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PackMysqlServerInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020NFMsgMysql.proto\022\005NFMsg\"\237\001\n\016PackMysqlP"
      "aram\022\025\n\rstrRecordName\030\001 \002(\014\022\016\n\006strKey\030\002 "
      "\002(\014\022\024\n\014fieldVecList\030\003 \003(\014\022\024\n\014valueVecLis"
      "t\030\004 \003(\014\022\r\n\005bExit\030\005 \002(\003\022\016\n\006nreqid\030\006 \002(\003\022\014"
      "\n\004nRet\030\007 \002(\003\022\r\n\005eType\030\010 \002(\003\"\256\001\n\023PackMysq"
      "lServerInfo\022\025\n\rnRconnectTime\030\001 \002(\003\022\024\n\014nR"
      "conneCount\030\002 \002(\003\022\r\n\005nPort\030\003 \002(\003\022\021\n\tstrDB"
      "Name\030\004 \002(\014\022\020\n\010strDnsIp\030\005 \002(\014\022\021\n\tstrDBUse"
      "r\030\006 \002(\014\022\020\n\010strDBPwd\030\007 \002(\014\022\021\n\tnServerID\030\010"
      " \002(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgMysql.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_NFMsgMysql_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackMysqlParam::kStrRecordNameFieldNumber;
const int PackMysqlParam::kStrKeyFieldNumber;
const int PackMysqlParam::kFieldVecListFieldNumber;
const int PackMysqlParam::kValueVecListFieldNumber;
const int PackMysqlParam::kBExitFieldNumber;
const int PackMysqlParam::kNreqidFieldNumber;
const int PackMysqlParam::kNRetFieldNumber;
const int PackMysqlParam::kETypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackMysqlParam::PackMysqlParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgMysql_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PackMysqlParam)
}
PackMysqlParam::PackMysqlParam(const PackMysqlParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fieldveclist_(from.fieldveclist_),
      valueveclist_(from.valueveclist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strrecordname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strrecordname()) {
    strrecordname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strrecordname_);
  }
  strkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strkey()) {
    strkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strkey_);
  }
  ::memcpy(&bexit_, &from.bexit_,
    static_cast<size_t>(reinterpret_cast<char*>(&etype_) -
    reinterpret_cast<char*>(&bexit_)) + sizeof(etype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PackMysqlParam)
}

void PackMysqlParam::SharedCtor() {
  _cached_size_ = 0;
  strrecordname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bexit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&etype_) -
      reinterpret_cast<char*>(&bexit_)) + sizeof(etype_));
}

PackMysqlParam::~PackMysqlParam() {
  // @@protoc_insertion_point(destructor:NFMsg.PackMysqlParam)
  SharedDtor();
}

void PackMysqlParam::SharedDtor() {
  strrecordname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackMysqlParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackMysqlParam::descriptor() {
  protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackMysqlParam& PackMysqlParam::default_instance() {
  protobuf_NFMsgMysql_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackMysqlParam* PackMysqlParam::New(::google::protobuf::Arena* arena) const {
  PackMysqlParam* n = new PackMysqlParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackMysqlParam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PackMysqlParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldveclist_.Clear();
  valueveclist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!strrecordname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strrecordname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!strkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strkey_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&bexit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&etype_) -
        reinterpret_cast<char*>(&bexit_)) + sizeof(etype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackMysqlParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PackMysqlParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes strRecordName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strrecordname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes strKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes fieldVecList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fieldveclist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes valueVecList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_valueveclist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 bExit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bexit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bexit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 nreqid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nreqid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nreqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 nRet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_nret();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 eType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_etype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &etype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PackMysqlParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PackMysqlParam)
  return false;
#undef DO_
}

void PackMysqlParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PackMysqlParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes strRecordName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->strrecordname(), output);
  }

  // required bytes strKey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->strkey(), output);
  }

  // repeated bytes fieldVecList = 3;
  for (int i = 0, n = this->fieldveclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->fieldveclist(i), output);
  }

  // repeated bytes valueVecList = 4;
  for (int i = 0, n = this->valueveclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->valueveclist(i), output);
  }

  // required int64 bExit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bexit(), output);
  }

  // required int64 nreqid = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->nreqid(), output);
  }

  // required int64 nRet = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->nret(), output);
  }

  // required int64 eType = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->etype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PackMysqlParam)
}

::google::protobuf::uint8* PackMysqlParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PackMysqlParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes strRecordName = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strrecordname(), target);
  }

  // required bytes strKey = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strkey(), target);
  }

  // repeated bytes fieldVecList = 3;
  for (int i = 0, n = this->fieldveclist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->fieldveclist(i), target);
  }

  // repeated bytes valueVecList = 4;
  for (int i = 0, n = this->valueveclist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->valueveclist(i), target);
  }

  // required int64 bExit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bexit(), target);
  }

  // required int64 nreqid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->nreqid(), target);
  }

  // required int64 nRet = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->nret(), target);
  }

  // required int64 eType = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->etype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PackMysqlParam)
  return target;
}

size_t PackMysqlParam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PackMysqlParam)
  size_t total_size = 0;

  if (has_strrecordname()) {
    // required bytes strRecordName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strrecordname());
  }

  if (has_strkey()) {
    // required bytes strKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strkey());
  }

  if (has_bexit()) {
    // required int64 bExit = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bexit());
  }

  if (has_nreqid()) {
    // required int64 nreqid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nreqid());
  }

  if (has_nret()) {
    // required int64 nRet = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nret());
  }

  if (has_etype()) {
    // required int64 eType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->etype());
  }

  return total_size;
}
size_t PackMysqlParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PackMysqlParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes strRecordName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strrecordname());

    // required bytes strKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strkey());

    // required int64 bExit = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bexit());

    // required int64 nreqid = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nreqid());

    // required int64 nRet = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nret());

    // required int64 eType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->etype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes fieldVecList = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fieldveclist_size());
  for (int i = 0, n = this->fieldveclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fieldveclist(i));
  }

  // repeated bytes valueVecList = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->valueveclist_size());
  for (int i = 0, n = this->valueveclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->valueveclist(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackMysqlParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PackMysqlParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PackMysqlParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackMysqlParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PackMysqlParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PackMysqlParam)
    MergeFrom(*source);
  }
}

void PackMysqlParam::MergeFrom(const PackMysqlParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PackMysqlParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldveclist_.MergeFrom(from.fieldveclist_);
  valueveclist_.MergeFrom(from.valueveclist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_strrecordname();
      strrecordname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strrecordname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_strkey();
      strkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strkey_);
    }
    if (cached_has_bits & 0x00000004u) {
      bexit_ = from.bexit_;
    }
    if (cached_has_bits & 0x00000008u) {
      nreqid_ = from.nreqid_;
    }
    if (cached_has_bits & 0x00000010u) {
      nret_ = from.nret_;
    }
    if (cached_has_bits & 0x00000020u) {
      etype_ = from.etype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackMysqlParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PackMysqlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackMysqlParam::CopyFrom(const PackMysqlParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PackMysqlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackMysqlParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void PackMysqlParam::Swap(PackMysqlParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackMysqlParam::InternalSwap(PackMysqlParam* other) {
  using std::swap;
  fieldveclist_.InternalSwap(&other->fieldveclist_);
  valueveclist_.InternalSwap(&other->valueveclist_);
  strrecordname_.Swap(&other->strrecordname_);
  strkey_.Swap(&other->strkey_);
  swap(bexit_, other->bexit_);
  swap(nreqid_, other->nreqid_);
  swap(nret_, other->nret_);
  swap(etype_, other->etype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackMysqlParam::GetMetadata() const {
  protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackMysqlParam

// required bytes strRecordName = 1;
bool PackMysqlParam::has_strrecordname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackMysqlParam::set_has_strrecordname() {
  _has_bits_[0] |= 0x00000001u;
}
void PackMysqlParam::clear_has_strrecordname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackMysqlParam::clear_strrecordname() {
  strrecordname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strrecordname();
}
const ::std::string& PackMysqlParam::strrecordname() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.strRecordName)
  return strrecordname_.GetNoArena();
}
void PackMysqlParam::set_strrecordname(const ::std::string& value) {
  set_has_strrecordname();
  strrecordname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.strRecordName)
}
#if LANG_CXX11
void PackMysqlParam::set_strrecordname(::std::string&& value) {
  set_has_strrecordname();
  strrecordname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlParam.strRecordName)
}
#endif
void PackMysqlParam::set_strrecordname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strrecordname();
  strrecordname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.strRecordName)
}
void PackMysqlParam::set_strrecordname(const void* value, size_t size) {
  set_has_strrecordname();
  strrecordname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.strRecordName)
}
::std::string* PackMysqlParam::mutable_strrecordname() {
  set_has_strrecordname();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.strRecordName)
  return strrecordname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackMysqlParam::release_strrecordname() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlParam.strRecordName)
  clear_has_strrecordname();
  return strrecordname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackMysqlParam::set_allocated_strrecordname(::std::string* strrecordname) {
  if (strrecordname != NULL) {
    set_has_strrecordname();
  } else {
    clear_has_strrecordname();
  }
  strrecordname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strrecordname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlParam.strRecordName)
}

// required bytes strKey = 2;
bool PackMysqlParam::has_strkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PackMysqlParam::set_has_strkey() {
  _has_bits_[0] |= 0x00000002u;
}
void PackMysqlParam::clear_has_strkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void PackMysqlParam::clear_strkey() {
  strkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strkey();
}
const ::std::string& PackMysqlParam::strkey() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.strKey)
  return strkey_.GetNoArena();
}
void PackMysqlParam::set_strkey(const ::std::string& value) {
  set_has_strkey();
  strkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.strKey)
}
#if LANG_CXX11
void PackMysqlParam::set_strkey(::std::string&& value) {
  set_has_strkey();
  strkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlParam.strKey)
}
#endif
void PackMysqlParam::set_strkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strkey();
  strkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.strKey)
}
void PackMysqlParam::set_strkey(const void* value, size_t size) {
  set_has_strkey();
  strkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.strKey)
}
::std::string* PackMysqlParam::mutable_strkey() {
  set_has_strkey();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.strKey)
  return strkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackMysqlParam::release_strkey() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlParam.strKey)
  clear_has_strkey();
  return strkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackMysqlParam::set_allocated_strkey(::std::string* strkey) {
  if (strkey != NULL) {
    set_has_strkey();
  } else {
    clear_has_strkey();
  }
  strkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strkey);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlParam.strKey)
}

// repeated bytes fieldVecList = 3;
int PackMysqlParam::fieldveclist_size() const {
  return fieldveclist_.size();
}
void PackMysqlParam::clear_fieldveclist() {
  fieldveclist_.Clear();
}
const ::std::string& PackMysqlParam::fieldveclist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_.Get(index);
}
::std::string* PackMysqlParam::mutable_fieldveclist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_.Mutable(index);
}
void PackMysqlParam::set_fieldveclist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.fieldVecList)
  fieldveclist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PackMysqlParam::set_fieldveclist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.fieldVecList)
  fieldveclist_.Mutable(index)->assign(std::move(value));
}
#endif
void PackMysqlParam::set_fieldveclist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fieldveclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.fieldVecList)
}
void PackMysqlParam::set_fieldveclist(int index, const void* value, size_t size) {
  fieldveclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.fieldVecList)
}
::std::string* PackMysqlParam::add_fieldveclist() {
  // @@protoc_insertion_point(field_add_mutable:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_.Add();
}
void PackMysqlParam::add_fieldveclist(const ::std::string& value) {
  fieldveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.fieldVecList)
}
#if LANG_CXX11
void PackMysqlParam::add_fieldveclist(::std::string&& value) {
  fieldveclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.fieldVecList)
}
#endif
void PackMysqlParam::add_fieldveclist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fieldveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFMsg.PackMysqlParam.fieldVecList)
}
void PackMysqlParam::add_fieldveclist(const void* value, size_t size) {
  fieldveclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFMsg.PackMysqlParam.fieldVecList)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackMysqlParam::fieldveclist() const {
  // @@protoc_insertion_point(field_list:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PackMysqlParam::mutable_fieldveclist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.PackMysqlParam.fieldVecList)
  return &fieldveclist_;
}

// repeated bytes valueVecList = 4;
int PackMysqlParam::valueveclist_size() const {
  return valueveclist_.size();
}
void PackMysqlParam::clear_valueveclist() {
  valueveclist_.Clear();
}
const ::std::string& PackMysqlParam::valueveclist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_.Get(index);
}
::std::string* PackMysqlParam::mutable_valueveclist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_.Mutable(index);
}
void PackMysqlParam::set_valueveclist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.valueVecList)
  valueveclist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void PackMysqlParam::set_valueveclist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.valueVecList)
  valueveclist_.Mutable(index)->assign(std::move(value));
}
#endif
void PackMysqlParam::set_valueveclist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valueveclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.valueVecList)
}
void PackMysqlParam::set_valueveclist(int index, const void* value, size_t size) {
  valueveclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.valueVecList)
}
::std::string* PackMysqlParam::add_valueveclist() {
  // @@protoc_insertion_point(field_add_mutable:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_.Add();
}
void PackMysqlParam::add_valueveclist(const ::std::string& value) {
  valueveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.valueVecList)
}
#if LANG_CXX11
void PackMysqlParam::add_valueveclist(::std::string&& value) {
  valueveclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.valueVecList)
}
#endif
void PackMysqlParam::add_valueveclist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valueveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFMsg.PackMysqlParam.valueVecList)
}
void PackMysqlParam::add_valueveclist(const void* value, size_t size) {
  valueveclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFMsg.PackMysqlParam.valueVecList)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackMysqlParam::valueveclist() const {
  // @@protoc_insertion_point(field_list:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
PackMysqlParam::mutable_valueveclist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.PackMysqlParam.valueVecList)
  return &valueveclist_;
}

// required int64 bExit = 5;
bool PackMysqlParam::has_bexit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PackMysqlParam::set_has_bexit() {
  _has_bits_[0] |= 0x00000004u;
}
void PackMysqlParam::clear_has_bexit() {
  _has_bits_[0] &= ~0x00000004u;
}
void PackMysqlParam::clear_bexit() {
  bexit_ = GOOGLE_LONGLONG(0);
  clear_has_bexit();
}
::google::protobuf::int64 PackMysqlParam::bexit() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.bExit)
  return bexit_;
}
void PackMysqlParam::set_bexit(::google::protobuf::int64 value) {
  set_has_bexit();
  bexit_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.bExit)
}

// required int64 nreqid = 6;
bool PackMysqlParam::has_nreqid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PackMysqlParam::set_has_nreqid() {
  _has_bits_[0] |= 0x00000008u;
}
void PackMysqlParam::clear_has_nreqid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PackMysqlParam::clear_nreqid() {
  nreqid_ = GOOGLE_LONGLONG(0);
  clear_has_nreqid();
}
::google::protobuf::int64 PackMysqlParam::nreqid() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.nreqid)
  return nreqid_;
}
void PackMysqlParam::set_nreqid(::google::protobuf::int64 value) {
  set_has_nreqid();
  nreqid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.nreqid)
}

// required int64 nRet = 7;
bool PackMysqlParam::has_nret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PackMysqlParam::set_has_nret() {
  _has_bits_[0] |= 0x00000010u;
}
void PackMysqlParam::clear_has_nret() {
  _has_bits_[0] &= ~0x00000010u;
}
void PackMysqlParam::clear_nret() {
  nret_ = GOOGLE_LONGLONG(0);
  clear_has_nret();
}
::google::protobuf::int64 PackMysqlParam::nret() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.nRet)
  return nret_;
}
void PackMysqlParam::set_nret(::google::protobuf::int64 value) {
  set_has_nret();
  nret_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.nRet)
}

// required int64 eType = 8;
bool PackMysqlParam::has_etype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PackMysqlParam::set_has_etype() {
  _has_bits_[0] |= 0x00000020u;
}
void PackMysqlParam::clear_has_etype() {
  _has_bits_[0] &= ~0x00000020u;
}
void PackMysqlParam::clear_etype() {
  etype_ = GOOGLE_LONGLONG(0);
  clear_has_etype();
}
::google::protobuf::int64 PackMysqlParam::etype() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.eType)
  return etype_;
}
void PackMysqlParam::set_etype(::google::protobuf::int64 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.eType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackMysqlServerInfo::kNRconnectTimeFieldNumber;
const int PackMysqlServerInfo::kNRconneCountFieldNumber;
const int PackMysqlServerInfo::kNPortFieldNumber;
const int PackMysqlServerInfo::kStrDBNameFieldNumber;
const int PackMysqlServerInfo::kStrDnsIpFieldNumber;
const int PackMysqlServerInfo::kStrDBUserFieldNumber;
const int PackMysqlServerInfo::kStrDBPwdFieldNumber;
const int PackMysqlServerInfo::kNServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackMysqlServerInfo::PackMysqlServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgMysql_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PackMysqlServerInfo)
}
PackMysqlServerInfo::PackMysqlServerInfo(const PackMysqlServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strdbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strdbname()) {
    strdbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbname_);
  }
  strdnsip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strdnsip()) {
    strdnsip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdnsip_);
  }
  strdbuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strdbuser()) {
    strdbuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbuser_);
  }
  strdbpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_strdbpwd()) {
    strdbpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbpwd_);
  }
  ::memcpy(&nrconnecttime_, &from.nrconnecttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&nserverid_) -
    reinterpret_cast<char*>(&nrconnecttime_)) + sizeof(nserverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PackMysqlServerInfo)
}

void PackMysqlServerInfo::SharedCtor() {
  _cached_size_ = 0;
  strdbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdnsip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nrconnecttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&nrconnecttime_)) + sizeof(nserverid_));
}

PackMysqlServerInfo::~PackMysqlServerInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PackMysqlServerInfo)
  SharedDtor();
}

void PackMysqlServerInfo::SharedDtor() {
  strdbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdnsip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbuser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackMysqlServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackMysqlServerInfo::descriptor() {
  protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackMysqlServerInfo& PackMysqlServerInfo::default_instance() {
  protobuf_NFMsgMysql_2eproto::InitDefaults();
  return *internal_default_instance();
}

PackMysqlServerInfo* PackMysqlServerInfo::New(::google::protobuf::Arena* arena) const {
  PackMysqlServerInfo* n = new PackMysqlServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PackMysqlServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PackMysqlServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!strdbname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strdbname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!strdnsip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strdnsip_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!strdbuser_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strdbuser_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!strdbpwd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*strdbpwd_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&nrconnecttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nserverid_) -
        reinterpret_cast<char*>(&nrconnecttime_)) + sizeof(nserverid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PackMysqlServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PackMysqlServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 nRconnectTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nrconnecttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nrconnecttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 nRconneCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nrconnecount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nrconnecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 nPort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes strDBName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdbname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes strDnsIp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdnsip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes strDBUser = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdbuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes strDBPwd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdbpwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 nServerID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_nserverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PackMysqlServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PackMysqlServerInfo)
  return false;
#undef DO_
}

void PackMysqlServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PackMysqlServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 nRconnectTime = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nrconnecttime(), output);
  }

  // required int64 nRconneCount = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nrconnecount(), output);
  }

  // required int64 nPort = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nport(), output);
  }

  // required bytes strDBName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->strdbname(), output);
  }

  // required bytes strDnsIp = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->strdnsip(), output);
  }

  // required bytes strDBUser = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->strdbuser(), output);
  }

  // required bytes strDBPwd = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->strdbpwd(), output);
  }

  // required int64 nServerID = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->nserverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PackMysqlServerInfo)
}

::google::protobuf::uint8* PackMysqlServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PackMysqlServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 nRconnectTime = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nrconnecttime(), target);
  }

  // required int64 nRconneCount = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nrconnecount(), target);
  }

  // required int64 nPort = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nport(), target);
  }

  // required bytes strDBName = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdbname(), target);
  }

  // required bytes strDnsIp = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strdnsip(), target);
  }

  // required bytes strDBUser = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strdbuser(), target);
  }

  // required bytes strDBPwd = 7;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->strdbpwd(), target);
  }

  // required int64 nServerID = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->nserverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PackMysqlServerInfo)
  return target;
}

size_t PackMysqlServerInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PackMysqlServerInfo)
  size_t total_size = 0;

  if (has_strdbname()) {
    // required bytes strDBName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbname());
  }

  if (has_strdnsip()) {
    // required bytes strDnsIp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdnsip());
  }

  if (has_strdbuser()) {
    // required bytes strDBUser = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbuser());
  }

  if (has_strdbpwd()) {
    // required bytes strDBPwd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbpwd());
  }

  if (has_nrconnecttime()) {
    // required int64 nRconnectTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nrconnecttime());
  }

  if (has_nrconnecount()) {
    // required int64 nRconneCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nrconnecount());
  }

  if (has_nport()) {
    // required int64 nPort = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nport());
  }

  if (has_nserverid()) {
    // required int64 nServerID = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nserverid());
  }

  return total_size;
}
size_t PackMysqlServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PackMysqlServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required bytes strDBName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbname());

    // required bytes strDnsIp = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdnsip());

    // required bytes strDBUser = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbuser());

    // required bytes strDBPwd = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbpwd());

    // required int64 nRconnectTime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nrconnecttime());

    // required int64 nRconneCount = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nrconnecount());

    // required int64 nPort = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nport());

    // required int64 nServerID = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nserverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackMysqlServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PackMysqlServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PackMysqlServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackMysqlServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PackMysqlServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PackMysqlServerInfo)
    MergeFrom(*source);
  }
}

void PackMysqlServerInfo::MergeFrom(const PackMysqlServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PackMysqlServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_strdbname();
      strdbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_strdnsip();
      strdnsip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdnsip_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_strdbuser();
      strdbuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbuser_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_strdbpwd();
      strdbpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbpwd_);
    }
    if (cached_has_bits & 0x00000010u) {
      nrconnecttime_ = from.nrconnecttime_;
    }
    if (cached_has_bits & 0x00000020u) {
      nrconnecount_ = from.nrconnecount_;
    }
    if (cached_has_bits & 0x00000040u) {
      nport_ = from.nport_;
    }
    if (cached_has_bits & 0x00000080u) {
      nserverid_ = from.nserverid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PackMysqlServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PackMysqlServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackMysqlServerInfo::CopyFrom(const PackMysqlServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PackMysqlServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackMysqlServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void PackMysqlServerInfo::Swap(PackMysqlServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackMysqlServerInfo::InternalSwap(PackMysqlServerInfo* other) {
  using std::swap;
  strdbname_.Swap(&other->strdbname_);
  strdnsip_.Swap(&other->strdnsip_);
  strdbuser_.Swap(&other->strdbuser_);
  strdbpwd_.Swap(&other->strdbpwd_);
  swap(nrconnecttime_, other->nrconnecttime_);
  swap(nrconnecount_, other->nrconnecount_);
  swap(nport_, other->nport_);
  swap(nserverid_, other->nserverid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PackMysqlServerInfo::GetMetadata() const {
  protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PackMysqlServerInfo

// required int64 nRconnectTime = 1;
bool PackMysqlServerInfo::has_nrconnecttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PackMysqlServerInfo::set_has_nrconnecttime() {
  _has_bits_[0] |= 0x00000010u;
}
void PackMysqlServerInfo::clear_has_nrconnecttime() {
  _has_bits_[0] &= ~0x00000010u;
}
void PackMysqlServerInfo::clear_nrconnecttime() {
  nrconnecttime_ = GOOGLE_LONGLONG(0);
  clear_has_nrconnecttime();
}
::google::protobuf::int64 PackMysqlServerInfo::nrconnecttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nRconnectTime)
  return nrconnecttime_;
}
void PackMysqlServerInfo::set_nrconnecttime(::google::protobuf::int64 value) {
  set_has_nrconnecttime();
  nrconnecttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nRconnectTime)
}

// required int64 nRconneCount = 2;
bool PackMysqlServerInfo::has_nrconnecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PackMysqlServerInfo::set_has_nrconnecount() {
  _has_bits_[0] |= 0x00000020u;
}
void PackMysqlServerInfo::clear_has_nrconnecount() {
  _has_bits_[0] &= ~0x00000020u;
}
void PackMysqlServerInfo::clear_nrconnecount() {
  nrconnecount_ = GOOGLE_LONGLONG(0);
  clear_has_nrconnecount();
}
::google::protobuf::int64 PackMysqlServerInfo::nrconnecount() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nRconneCount)
  return nrconnecount_;
}
void PackMysqlServerInfo::set_nrconnecount(::google::protobuf::int64 value) {
  set_has_nrconnecount();
  nrconnecount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nRconneCount)
}

// required int64 nPort = 3;
bool PackMysqlServerInfo::has_nport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PackMysqlServerInfo::set_has_nport() {
  _has_bits_[0] |= 0x00000040u;
}
void PackMysqlServerInfo::clear_has_nport() {
  _has_bits_[0] &= ~0x00000040u;
}
void PackMysqlServerInfo::clear_nport() {
  nport_ = GOOGLE_LONGLONG(0);
  clear_has_nport();
}
::google::protobuf::int64 PackMysqlServerInfo::nport() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nPort)
  return nport_;
}
void PackMysqlServerInfo::set_nport(::google::protobuf::int64 value) {
  set_has_nport();
  nport_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nPort)
}

// required bytes strDBName = 4;
bool PackMysqlServerInfo::has_strdbname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PackMysqlServerInfo::set_has_strdbname() {
  _has_bits_[0] |= 0x00000001u;
}
void PackMysqlServerInfo::clear_has_strdbname() {
  _has_bits_[0] &= ~0x00000001u;
}
void PackMysqlServerInfo::clear_strdbname() {
  strdbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdbname();
}
const ::std::string& PackMysqlServerInfo::strdbname() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDBName)
  return strdbname_.GetNoArena();
}
void PackMysqlServerInfo::set_strdbname(const ::std::string& value) {
  set_has_strdbname();
  strdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDBName)
}
#if LANG_CXX11
void PackMysqlServerInfo::set_strdbname(::std::string&& value) {
  set_has_strdbname();
  strdbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDBName)
}
#endif
void PackMysqlServerInfo::set_strdbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdbname();
  strdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDBName)
}
void PackMysqlServerInfo::set_strdbname(const void* value, size_t size) {
  set_has_strdbname();
  strdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDBName)
}
::std::string* PackMysqlServerInfo::mutable_strdbname() {
  set_has_strdbname();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDBName)
  return strdbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackMysqlServerInfo::release_strdbname() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDBName)
  clear_has_strdbname();
  return strdbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackMysqlServerInfo::set_allocated_strdbname(::std::string* strdbname) {
  if (strdbname != NULL) {
    set_has_strdbname();
  } else {
    clear_has_strdbname();
  }
  strdbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDBName)
}

// required bytes strDnsIp = 5;
bool PackMysqlServerInfo::has_strdnsip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PackMysqlServerInfo::set_has_strdnsip() {
  _has_bits_[0] |= 0x00000002u;
}
void PackMysqlServerInfo::clear_has_strdnsip() {
  _has_bits_[0] &= ~0x00000002u;
}
void PackMysqlServerInfo::clear_strdnsip() {
  strdnsip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdnsip();
}
const ::std::string& PackMysqlServerInfo::strdnsip() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDnsIp)
  return strdnsip_.GetNoArena();
}
void PackMysqlServerInfo::set_strdnsip(const ::std::string& value) {
  set_has_strdnsip();
  strdnsip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDnsIp)
}
#if LANG_CXX11
void PackMysqlServerInfo::set_strdnsip(::std::string&& value) {
  set_has_strdnsip();
  strdnsip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDnsIp)
}
#endif
void PackMysqlServerInfo::set_strdnsip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdnsip();
  strdnsip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDnsIp)
}
void PackMysqlServerInfo::set_strdnsip(const void* value, size_t size) {
  set_has_strdnsip();
  strdnsip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDnsIp)
}
::std::string* PackMysqlServerInfo::mutable_strdnsip() {
  set_has_strdnsip();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDnsIp)
  return strdnsip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackMysqlServerInfo::release_strdnsip() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDnsIp)
  clear_has_strdnsip();
  return strdnsip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackMysqlServerInfo::set_allocated_strdnsip(::std::string* strdnsip) {
  if (strdnsip != NULL) {
    set_has_strdnsip();
  } else {
    clear_has_strdnsip();
  }
  strdnsip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdnsip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDnsIp)
}

// required bytes strDBUser = 6;
bool PackMysqlServerInfo::has_strdbuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PackMysqlServerInfo::set_has_strdbuser() {
  _has_bits_[0] |= 0x00000004u;
}
void PackMysqlServerInfo::clear_has_strdbuser() {
  _has_bits_[0] &= ~0x00000004u;
}
void PackMysqlServerInfo::clear_strdbuser() {
  strdbuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdbuser();
}
const ::std::string& PackMysqlServerInfo::strdbuser() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDBUser)
  return strdbuser_.GetNoArena();
}
void PackMysqlServerInfo::set_strdbuser(const ::std::string& value) {
  set_has_strdbuser();
  strdbuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDBUser)
}
#if LANG_CXX11
void PackMysqlServerInfo::set_strdbuser(::std::string&& value) {
  set_has_strdbuser();
  strdbuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDBUser)
}
#endif
void PackMysqlServerInfo::set_strdbuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdbuser();
  strdbuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDBUser)
}
void PackMysqlServerInfo::set_strdbuser(const void* value, size_t size) {
  set_has_strdbuser();
  strdbuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDBUser)
}
::std::string* PackMysqlServerInfo::mutable_strdbuser() {
  set_has_strdbuser();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDBUser)
  return strdbuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackMysqlServerInfo::release_strdbuser() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDBUser)
  clear_has_strdbuser();
  return strdbuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackMysqlServerInfo::set_allocated_strdbuser(::std::string* strdbuser) {
  if (strdbuser != NULL) {
    set_has_strdbuser();
  } else {
    clear_has_strdbuser();
  }
  strdbuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbuser);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDBUser)
}

// required bytes strDBPwd = 7;
bool PackMysqlServerInfo::has_strdbpwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PackMysqlServerInfo::set_has_strdbpwd() {
  _has_bits_[0] |= 0x00000008u;
}
void PackMysqlServerInfo::clear_has_strdbpwd() {
  _has_bits_[0] &= ~0x00000008u;
}
void PackMysqlServerInfo::clear_strdbpwd() {
  strdbpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdbpwd();
}
const ::std::string& PackMysqlServerInfo::strdbpwd() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDBPwd)
  return strdbpwd_.GetNoArena();
}
void PackMysqlServerInfo::set_strdbpwd(const ::std::string& value) {
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDBPwd)
}
#if LANG_CXX11
void PackMysqlServerInfo::set_strdbpwd(::std::string&& value) {
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDBPwd)
}
#endif
void PackMysqlServerInfo::set_strdbpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDBPwd)
}
void PackMysqlServerInfo::set_strdbpwd(const void* value, size_t size) {
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDBPwd)
}
::std::string* PackMysqlServerInfo::mutable_strdbpwd() {
  set_has_strdbpwd();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDBPwd)
  return strdbpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PackMysqlServerInfo::release_strdbpwd() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDBPwd)
  clear_has_strdbpwd();
  return strdbpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PackMysqlServerInfo::set_allocated_strdbpwd(::std::string* strdbpwd) {
  if (strdbpwd != NULL) {
    set_has_strdbpwd();
  } else {
    clear_has_strdbpwd();
  }
  strdbpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbpwd);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDBPwd)
}

// required int64 nServerID = 8;
bool PackMysqlServerInfo::has_nserverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PackMysqlServerInfo::set_has_nserverid() {
  _has_bits_[0] |= 0x00000080u;
}
void PackMysqlServerInfo::clear_has_nserverid() {
  _has_bits_[0] &= ~0x00000080u;
}
void PackMysqlServerInfo::clear_nserverid() {
  nserverid_ = GOOGLE_LONGLONG(0);
  clear_has_nserverid();
}
::google::protobuf::int64 PackMysqlServerInfo::nserverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nServerID)
  return nserverid_;
}
void PackMysqlServerInfo::set_nserverid(::google::protobuf::int64 value) {
  set_has_nserverid();
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nServerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
