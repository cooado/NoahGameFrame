// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgMysql.proto

#ifndef PROTOBUF_NFMsgMysql_2eproto__INCLUDED
#define PROTOBUF_NFMsgMysql_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace NFMsg {
class PackMysqlParam;
class PackMysqlParamDefaultTypeInternal;
extern PackMysqlParamDefaultTypeInternal _PackMysqlParam_default_instance_;
class PackMysqlServerInfo;
class PackMysqlServerInfoDefaultTypeInternal;
extern PackMysqlServerInfoDefaultTypeInternal _PackMysqlServerInfo_default_instance_;
}  // namespace NFMsg

namespace NFMsg {

namespace protobuf_NFMsgMysql_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_NFMsgMysql_2eproto

// ===================================================================

class PackMysqlParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PackMysqlParam) */ {
 public:
  PackMysqlParam();
  virtual ~PackMysqlParam();

  PackMysqlParam(const PackMysqlParam& from);

  inline PackMysqlParam& operator=(const PackMysqlParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackMysqlParam(PackMysqlParam&& from) noexcept
    : PackMysqlParam() {
    *this = ::std::move(from);
  }

  inline PackMysqlParam& operator=(PackMysqlParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackMysqlParam& default_instance();

  static inline const PackMysqlParam* internal_default_instance() {
    return reinterpret_cast<const PackMysqlParam*>(
               &_PackMysqlParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PackMysqlParam* other);
  friend void swap(PackMysqlParam& a, PackMysqlParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackMysqlParam* New() const PROTOBUF_FINAL { return New(NULL); }

  PackMysqlParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackMysqlParam& from);
  void MergeFrom(const PackMysqlParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackMysqlParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes fieldVecList = 3;
  int fieldveclist_size() const;
  void clear_fieldveclist();
  static const int kFieldVecListFieldNumber = 3;
  const ::std::string& fieldveclist(int index) const;
  ::std::string* mutable_fieldveclist(int index);
  void set_fieldveclist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fieldveclist(int index, ::std::string&& value);
  #endif
  void set_fieldveclist(int index, const char* value);
  void set_fieldveclist(int index, const void* value, size_t size);
  ::std::string* add_fieldveclist();
  void add_fieldveclist(const ::std::string& value);
  #if LANG_CXX11
  void add_fieldveclist(::std::string&& value);
  #endif
  void add_fieldveclist(const char* value);
  void add_fieldveclist(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fieldveclist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fieldveclist();

  // repeated bytes valueVecList = 4;
  int valueveclist_size() const;
  void clear_valueveclist();
  static const int kValueVecListFieldNumber = 4;
  const ::std::string& valueveclist(int index) const;
  ::std::string* mutable_valueveclist(int index);
  void set_valueveclist(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valueveclist(int index, ::std::string&& value);
  #endif
  void set_valueveclist(int index, const char* value);
  void set_valueveclist(int index, const void* value, size_t size);
  ::std::string* add_valueveclist();
  void add_valueveclist(const ::std::string& value);
  #if LANG_CXX11
  void add_valueveclist(::std::string&& value);
  #endif
  void add_valueveclist(const char* value);
  void add_valueveclist(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valueveclist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valueveclist();

  // required bytes strRecordName = 1;
  bool has_strrecordname() const;
  void clear_strrecordname();
  static const int kStrRecordNameFieldNumber = 1;
  const ::std::string& strrecordname() const;
  void set_strrecordname(const ::std::string& value);
  #if LANG_CXX11
  void set_strrecordname(::std::string&& value);
  #endif
  void set_strrecordname(const char* value);
  void set_strrecordname(const void* value, size_t size);
  ::std::string* mutable_strrecordname();
  ::std::string* release_strrecordname();
  void set_allocated_strrecordname(::std::string* strrecordname);

  // required bytes strKey = 2;
  bool has_strkey() const;
  void clear_strkey();
  static const int kStrKeyFieldNumber = 2;
  const ::std::string& strkey() const;
  void set_strkey(const ::std::string& value);
  #if LANG_CXX11
  void set_strkey(::std::string&& value);
  #endif
  void set_strkey(const char* value);
  void set_strkey(const void* value, size_t size);
  ::std::string* mutable_strkey();
  ::std::string* release_strkey();
  void set_allocated_strkey(::std::string* strkey);

  // required int64 bExit = 5;
  bool has_bexit() const;
  void clear_bexit();
  static const int kBExitFieldNumber = 5;
  ::google::protobuf::int64 bexit() const;
  void set_bexit(::google::protobuf::int64 value);

  // required int64 nreqid = 6;
  bool has_nreqid() const;
  void clear_nreqid();
  static const int kNreqidFieldNumber = 6;
  ::google::protobuf::int64 nreqid() const;
  void set_nreqid(::google::protobuf::int64 value);

  // required int64 nRet = 7;
  bool has_nret() const;
  void clear_nret();
  static const int kNRetFieldNumber = 7;
  ::google::protobuf::int64 nret() const;
  void set_nret(::google::protobuf::int64 value);

  // required int64 eType = 8;
  bool has_etype() const;
  void clear_etype();
  static const int kETypeFieldNumber = 8;
  ::google::protobuf::int64 etype() const;
  void set_etype(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.PackMysqlParam)
 private:
  void set_has_strrecordname();
  void clear_has_strrecordname();
  void set_has_strkey();
  void clear_has_strkey();
  void set_has_bexit();
  void clear_has_bexit();
  void set_has_nreqid();
  void clear_has_nreqid();
  void set_has_nret();
  void clear_has_nret();
  void set_has_etype();
  void clear_has_etype();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fieldveclist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valueveclist_;
  ::google::protobuf::internal::ArenaStringPtr strrecordname_;
  ::google::protobuf::internal::ArenaStringPtr strkey_;
  ::google::protobuf::int64 bexit_;
  ::google::protobuf::int64 nreqid_;
  ::google::protobuf::int64 nret_;
  ::google::protobuf::int64 etype_;
  friend struct protobuf_NFMsgMysql_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PackMysqlServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFMsg.PackMysqlServerInfo) */ {
 public:
  PackMysqlServerInfo();
  virtual ~PackMysqlServerInfo();

  PackMysqlServerInfo(const PackMysqlServerInfo& from);

  inline PackMysqlServerInfo& operator=(const PackMysqlServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackMysqlServerInfo(PackMysqlServerInfo&& from) noexcept
    : PackMysqlServerInfo() {
    *this = ::std::move(from);
  }

  inline PackMysqlServerInfo& operator=(PackMysqlServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackMysqlServerInfo& default_instance();

  static inline const PackMysqlServerInfo* internal_default_instance() {
    return reinterpret_cast<const PackMysqlServerInfo*>(
               &_PackMysqlServerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PackMysqlServerInfo* other);
  friend void swap(PackMysqlServerInfo& a, PackMysqlServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackMysqlServerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PackMysqlServerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PackMysqlServerInfo& from);
  void MergeFrom(const PackMysqlServerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PackMysqlServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes strDBName = 4;
  bool has_strdbname() const;
  void clear_strdbname();
  static const int kStrDBNameFieldNumber = 4;
  const ::std::string& strdbname() const;
  void set_strdbname(const ::std::string& value);
  #if LANG_CXX11
  void set_strdbname(::std::string&& value);
  #endif
  void set_strdbname(const char* value);
  void set_strdbname(const void* value, size_t size);
  ::std::string* mutable_strdbname();
  ::std::string* release_strdbname();
  void set_allocated_strdbname(::std::string* strdbname);

  // required bytes strDnsIp = 5;
  bool has_strdnsip() const;
  void clear_strdnsip();
  static const int kStrDnsIpFieldNumber = 5;
  const ::std::string& strdnsip() const;
  void set_strdnsip(const ::std::string& value);
  #if LANG_CXX11
  void set_strdnsip(::std::string&& value);
  #endif
  void set_strdnsip(const char* value);
  void set_strdnsip(const void* value, size_t size);
  ::std::string* mutable_strdnsip();
  ::std::string* release_strdnsip();
  void set_allocated_strdnsip(::std::string* strdnsip);

  // required bytes strDBUser = 6;
  bool has_strdbuser() const;
  void clear_strdbuser();
  static const int kStrDBUserFieldNumber = 6;
  const ::std::string& strdbuser() const;
  void set_strdbuser(const ::std::string& value);
  #if LANG_CXX11
  void set_strdbuser(::std::string&& value);
  #endif
  void set_strdbuser(const char* value);
  void set_strdbuser(const void* value, size_t size);
  ::std::string* mutable_strdbuser();
  ::std::string* release_strdbuser();
  void set_allocated_strdbuser(::std::string* strdbuser);

  // required bytes strDBPwd = 7;
  bool has_strdbpwd() const;
  void clear_strdbpwd();
  static const int kStrDBPwdFieldNumber = 7;
  const ::std::string& strdbpwd() const;
  void set_strdbpwd(const ::std::string& value);
  #if LANG_CXX11
  void set_strdbpwd(::std::string&& value);
  #endif
  void set_strdbpwd(const char* value);
  void set_strdbpwd(const void* value, size_t size);
  ::std::string* mutable_strdbpwd();
  ::std::string* release_strdbpwd();
  void set_allocated_strdbpwd(::std::string* strdbpwd);

  // required int64 nRconnectTime = 1;
  bool has_nrconnecttime() const;
  void clear_nrconnecttime();
  static const int kNRconnectTimeFieldNumber = 1;
  ::google::protobuf::int64 nrconnecttime() const;
  void set_nrconnecttime(::google::protobuf::int64 value);

  // required int64 nRconneCount = 2;
  bool has_nrconnecount() const;
  void clear_nrconnecount();
  static const int kNRconneCountFieldNumber = 2;
  ::google::protobuf::int64 nrconnecount() const;
  void set_nrconnecount(::google::protobuf::int64 value);

  // required int64 nPort = 3;
  bool has_nport() const;
  void clear_nport();
  static const int kNPortFieldNumber = 3;
  ::google::protobuf::int64 nport() const;
  void set_nport(::google::protobuf::int64 value);

  // required int64 nServerID = 8;
  bool has_nserverid() const;
  void clear_nserverid();
  static const int kNServerIDFieldNumber = 8;
  ::google::protobuf::int64 nserverid() const;
  void set_nserverid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NFMsg.PackMysqlServerInfo)
 private:
  void set_has_nrconnecttime();
  void clear_has_nrconnecttime();
  void set_has_nrconnecount();
  void clear_has_nrconnecount();
  void set_has_nport();
  void clear_has_nport();
  void set_has_strdbname();
  void clear_has_strdbname();
  void set_has_strdnsip();
  void clear_has_strdnsip();
  void set_has_strdbuser();
  void clear_has_strdbuser();
  void set_has_strdbpwd();
  void clear_has_strdbpwd();
  void set_has_nserverid();
  void clear_has_nserverid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr strdbname_;
  ::google::protobuf::internal::ArenaStringPtr strdnsip_;
  ::google::protobuf::internal::ArenaStringPtr strdbuser_;
  ::google::protobuf::internal::ArenaStringPtr strdbpwd_;
  ::google::protobuf::int64 nrconnecttime_;
  ::google::protobuf::int64 nrconnecount_;
  ::google::protobuf::int64 nport_;
  ::google::protobuf::int64 nserverid_;
  friend struct protobuf_NFMsgMysql_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackMysqlParam

// required bytes strRecordName = 1;
inline bool PackMysqlParam::has_strrecordname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackMysqlParam::set_has_strrecordname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackMysqlParam::clear_has_strrecordname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackMysqlParam::clear_strrecordname() {
  strrecordname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strrecordname();
}
inline const ::std::string& PackMysqlParam::strrecordname() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.strRecordName)
  return strrecordname_.GetNoArena();
}
inline void PackMysqlParam::set_strrecordname(const ::std::string& value) {
  set_has_strrecordname();
  strrecordname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.strRecordName)
}
#if LANG_CXX11
inline void PackMysqlParam::set_strrecordname(::std::string&& value) {
  set_has_strrecordname();
  strrecordname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlParam.strRecordName)
}
#endif
inline void PackMysqlParam::set_strrecordname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strrecordname();
  strrecordname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.strRecordName)
}
inline void PackMysqlParam::set_strrecordname(const void* value, size_t size) {
  set_has_strrecordname();
  strrecordname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.strRecordName)
}
inline ::std::string* PackMysqlParam::mutable_strrecordname() {
  set_has_strrecordname();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.strRecordName)
  return strrecordname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackMysqlParam::release_strrecordname() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlParam.strRecordName)
  clear_has_strrecordname();
  return strrecordname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlParam::set_allocated_strrecordname(::std::string* strrecordname) {
  if (strrecordname != NULL) {
    set_has_strrecordname();
  } else {
    clear_has_strrecordname();
  }
  strrecordname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strrecordname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlParam.strRecordName)
}

// required bytes strKey = 2;
inline bool PackMysqlParam::has_strkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackMysqlParam::set_has_strkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackMysqlParam::clear_has_strkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackMysqlParam::clear_strkey() {
  strkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strkey();
}
inline const ::std::string& PackMysqlParam::strkey() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.strKey)
  return strkey_.GetNoArena();
}
inline void PackMysqlParam::set_strkey(const ::std::string& value) {
  set_has_strkey();
  strkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.strKey)
}
#if LANG_CXX11
inline void PackMysqlParam::set_strkey(::std::string&& value) {
  set_has_strkey();
  strkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlParam.strKey)
}
#endif
inline void PackMysqlParam::set_strkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strkey();
  strkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.strKey)
}
inline void PackMysqlParam::set_strkey(const void* value, size_t size) {
  set_has_strkey();
  strkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.strKey)
}
inline ::std::string* PackMysqlParam::mutable_strkey() {
  set_has_strkey();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.strKey)
  return strkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackMysqlParam::release_strkey() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlParam.strKey)
  clear_has_strkey();
  return strkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlParam::set_allocated_strkey(::std::string* strkey) {
  if (strkey != NULL) {
    set_has_strkey();
  } else {
    clear_has_strkey();
  }
  strkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strkey);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlParam.strKey)
}

// repeated bytes fieldVecList = 3;
inline int PackMysqlParam::fieldveclist_size() const {
  return fieldveclist_.size();
}
inline void PackMysqlParam::clear_fieldveclist() {
  fieldveclist_.Clear();
}
inline const ::std::string& PackMysqlParam::fieldveclist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_.Get(index);
}
inline ::std::string* PackMysqlParam::mutable_fieldveclist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_.Mutable(index);
}
inline void PackMysqlParam::set_fieldveclist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.fieldVecList)
  fieldveclist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackMysqlParam::set_fieldveclist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.fieldVecList)
  fieldveclist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackMysqlParam::set_fieldveclist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fieldveclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.fieldVecList)
}
inline void PackMysqlParam::set_fieldveclist(int index, const void* value, size_t size) {
  fieldveclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.fieldVecList)
}
inline ::std::string* PackMysqlParam::add_fieldveclist() {
  // @@protoc_insertion_point(field_add_mutable:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_.Add();
}
inline void PackMysqlParam::add_fieldveclist(const ::std::string& value) {
  fieldveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.fieldVecList)
}
#if LANG_CXX11
inline void PackMysqlParam::add_fieldveclist(::std::string&& value) {
  fieldveclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.fieldVecList)
}
#endif
inline void PackMysqlParam::add_fieldveclist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fieldveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFMsg.PackMysqlParam.fieldVecList)
}
inline void PackMysqlParam::add_fieldveclist(const void* value, size_t size) {
  fieldveclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFMsg.PackMysqlParam.fieldVecList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackMysqlParam::fieldveclist() const {
  // @@protoc_insertion_point(field_list:NFMsg.PackMysqlParam.fieldVecList)
  return fieldveclist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackMysqlParam::mutable_fieldveclist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.PackMysqlParam.fieldVecList)
  return &fieldveclist_;
}

// repeated bytes valueVecList = 4;
inline int PackMysqlParam::valueveclist_size() const {
  return valueveclist_.size();
}
inline void PackMysqlParam::clear_valueveclist() {
  valueveclist_.Clear();
}
inline const ::std::string& PackMysqlParam::valueveclist(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_.Get(index);
}
inline ::std::string* PackMysqlParam::mutable_valueveclist(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_.Mutable(index);
}
inline void PackMysqlParam::set_valueveclist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.valueVecList)
  valueveclist_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PackMysqlParam::set_valueveclist(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.valueVecList)
  valueveclist_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PackMysqlParam::set_valueveclist(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valueveclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlParam.valueVecList)
}
inline void PackMysqlParam::set_valueveclist(int index, const void* value, size_t size) {
  valueveclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlParam.valueVecList)
}
inline ::std::string* PackMysqlParam::add_valueveclist() {
  // @@protoc_insertion_point(field_add_mutable:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_.Add();
}
inline void PackMysqlParam::add_valueveclist(const ::std::string& value) {
  valueveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.valueVecList)
}
#if LANG_CXX11
inline void PackMysqlParam::add_valueveclist(::std::string&& value) {
  valueveclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:NFMsg.PackMysqlParam.valueVecList)
}
#endif
inline void PackMysqlParam::add_valueveclist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valueveclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NFMsg.PackMysqlParam.valueVecList)
}
inline void PackMysqlParam::add_valueveclist(const void* value, size_t size) {
  valueveclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NFMsg.PackMysqlParam.valueVecList)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PackMysqlParam::valueveclist() const {
  // @@protoc_insertion_point(field_list:NFMsg.PackMysqlParam.valueVecList)
  return valueveclist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PackMysqlParam::mutable_valueveclist() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.PackMysqlParam.valueVecList)
  return &valueveclist_;
}

// required int64 bExit = 5;
inline bool PackMysqlParam::has_bexit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackMysqlParam::set_has_bexit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackMysqlParam::clear_has_bexit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackMysqlParam::clear_bexit() {
  bexit_ = GOOGLE_LONGLONG(0);
  clear_has_bexit();
}
inline ::google::protobuf::int64 PackMysqlParam::bexit() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.bExit)
  return bexit_;
}
inline void PackMysqlParam::set_bexit(::google::protobuf::int64 value) {
  set_has_bexit();
  bexit_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.bExit)
}

// required int64 nreqid = 6;
inline bool PackMysqlParam::has_nreqid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackMysqlParam::set_has_nreqid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackMysqlParam::clear_has_nreqid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackMysqlParam::clear_nreqid() {
  nreqid_ = GOOGLE_LONGLONG(0);
  clear_has_nreqid();
}
inline ::google::protobuf::int64 PackMysqlParam::nreqid() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.nreqid)
  return nreqid_;
}
inline void PackMysqlParam::set_nreqid(::google::protobuf::int64 value) {
  set_has_nreqid();
  nreqid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.nreqid)
}

// required int64 nRet = 7;
inline bool PackMysqlParam::has_nret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackMysqlParam::set_has_nret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackMysqlParam::clear_has_nret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackMysqlParam::clear_nret() {
  nret_ = GOOGLE_LONGLONG(0);
  clear_has_nret();
}
inline ::google::protobuf::int64 PackMysqlParam::nret() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.nRet)
  return nret_;
}
inline void PackMysqlParam::set_nret(::google::protobuf::int64 value) {
  set_has_nret();
  nret_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.nRet)
}

// required int64 eType = 8;
inline bool PackMysqlParam::has_etype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackMysqlParam::set_has_etype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PackMysqlParam::clear_has_etype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PackMysqlParam::clear_etype() {
  etype_ = GOOGLE_LONGLONG(0);
  clear_has_etype();
}
inline ::google::protobuf::int64 PackMysqlParam::etype() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlParam.eType)
  return etype_;
}
inline void PackMysqlParam::set_etype(::google::protobuf::int64 value) {
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlParam.eType)
}

// -------------------------------------------------------------------

// PackMysqlServerInfo

// required int64 nRconnectTime = 1;
inline bool PackMysqlServerInfo::has_nrconnecttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PackMysqlServerInfo::set_has_nrconnecttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PackMysqlServerInfo::clear_has_nrconnecttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PackMysqlServerInfo::clear_nrconnecttime() {
  nrconnecttime_ = GOOGLE_LONGLONG(0);
  clear_has_nrconnecttime();
}
inline ::google::protobuf::int64 PackMysqlServerInfo::nrconnecttime() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nRconnectTime)
  return nrconnecttime_;
}
inline void PackMysqlServerInfo::set_nrconnecttime(::google::protobuf::int64 value) {
  set_has_nrconnecttime();
  nrconnecttime_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nRconnectTime)
}

// required int64 nRconneCount = 2;
inline bool PackMysqlServerInfo::has_nrconnecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PackMysqlServerInfo::set_has_nrconnecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PackMysqlServerInfo::clear_has_nrconnecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PackMysqlServerInfo::clear_nrconnecount() {
  nrconnecount_ = GOOGLE_LONGLONG(0);
  clear_has_nrconnecount();
}
inline ::google::protobuf::int64 PackMysqlServerInfo::nrconnecount() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nRconneCount)
  return nrconnecount_;
}
inline void PackMysqlServerInfo::set_nrconnecount(::google::protobuf::int64 value) {
  set_has_nrconnecount();
  nrconnecount_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nRconneCount)
}

// required int64 nPort = 3;
inline bool PackMysqlServerInfo::has_nport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PackMysqlServerInfo::set_has_nport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PackMysqlServerInfo::clear_has_nport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PackMysqlServerInfo::clear_nport() {
  nport_ = GOOGLE_LONGLONG(0);
  clear_has_nport();
}
inline ::google::protobuf::int64 PackMysqlServerInfo::nport() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nPort)
  return nport_;
}
inline void PackMysqlServerInfo::set_nport(::google::protobuf::int64 value) {
  set_has_nport();
  nport_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nPort)
}

// required bytes strDBName = 4;
inline bool PackMysqlServerInfo::has_strdbname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackMysqlServerInfo::set_has_strdbname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PackMysqlServerInfo::clear_has_strdbname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PackMysqlServerInfo::clear_strdbname() {
  strdbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdbname();
}
inline const ::std::string& PackMysqlServerInfo::strdbname() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDBName)
  return strdbname_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strdbname(const ::std::string& value) {
  set_has_strdbname();
  strdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDBName)
}
#if LANG_CXX11
inline void PackMysqlServerInfo::set_strdbname(::std::string&& value) {
  set_has_strdbname();
  strdbname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDBName)
}
#endif
inline void PackMysqlServerInfo::set_strdbname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdbname();
  strdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDBName)
}
inline void PackMysqlServerInfo::set_strdbname(const void* value, size_t size) {
  set_has_strdbname();
  strdbname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDBName)
}
inline ::std::string* PackMysqlServerInfo::mutable_strdbname() {
  set_has_strdbname();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDBName)
  return strdbname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackMysqlServerInfo::release_strdbname() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDBName)
  clear_has_strdbname();
  return strdbname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strdbname(::std::string* strdbname) {
  if (strdbname != NULL) {
    set_has_strdbname();
  } else {
    clear_has_strdbname();
  }
  strdbname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbname);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDBName)
}

// required bytes strDnsIp = 5;
inline bool PackMysqlServerInfo::has_strdnsip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackMysqlServerInfo::set_has_strdnsip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackMysqlServerInfo::clear_has_strdnsip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackMysqlServerInfo::clear_strdnsip() {
  strdnsip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdnsip();
}
inline const ::std::string& PackMysqlServerInfo::strdnsip() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDnsIp)
  return strdnsip_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strdnsip(const ::std::string& value) {
  set_has_strdnsip();
  strdnsip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDnsIp)
}
#if LANG_CXX11
inline void PackMysqlServerInfo::set_strdnsip(::std::string&& value) {
  set_has_strdnsip();
  strdnsip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDnsIp)
}
#endif
inline void PackMysqlServerInfo::set_strdnsip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdnsip();
  strdnsip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDnsIp)
}
inline void PackMysqlServerInfo::set_strdnsip(const void* value, size_t size) {
  set_has_strdnsip();
  strdnsip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDnsIp)
}
inline ::std::string* PackMysqlServerInfo::mutable_strdnsip() {
  set_has_strdnsip();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDnsIp)
  return strdnsip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackMysqlServerInfo::release_strdnsip() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDnsIp)
  clear_has_strdnsip();
  return strdnsip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strdnsip(::std::string* strdnsip) {
  if (strdnsip != NULL) {
    set_has_strdnsip();
  } else {
    clear_has_strdnsip();
  }
  strdnsip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdnsip);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDnsIp)
}

// required bytes strDBUser = 6;
inline bool PackMysqlServerInfo::has_strdbuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackMysqlServerInfo::set_has_strdbuser() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackMysqlServerInfo::clear_has_strdbuser() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackMysqlServerInfo::clear_strdbuser() {
  strdbuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdbuser();
}
inline const ::std::string& PackMysqlServerInfo::strdbuser() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDBUser)
  return strdbuser_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strdbuser(const ::std::string& value) {
  set_has_strdbuser();
  strdbuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDBUser)
}
#if LANG_CXX11
inline void PackMysqlServerInfo::set_strdbuser(::std::string&& value) {
  set_has_strdbuser();
  strdbuser_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDBUser)
}
#endif
inline void PackMysqlServerInfo::set_strdbuser(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdbuser();
  strdbuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDBUser)
}
inline void PackMysqlServerInfo::set_strdbuser(const void* value, size_t size) {
  set_has_strdbuser();
  strdbuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDBUser)
}
inline ::std::string* PackMysqlServerInfo::mutable_strdbuser() {
  set_has_strdbuser();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDBUser)
  return strdbuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackMysqlServerInfo::release_strdbuser() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDBUser)
  clear_has_strdbuser();
  return strdbuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strdbuser(::std::string* strdbuser) {
  if (strdbuser != NULL) {
    set_has_strdbuser();
  } else {
    clear_has_strdbuser();
  }
  strdbuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbuser);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDBUser)
}

// required bytes strDBPwd = 7;
inline bool PackMysqlServerInfo::has_strdbpwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PackMysqlServerInfo::set_has_strdbpwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PackMysqlServerInfo::clear_has_strdbpwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PackMysqlServerInfo::clear_strdbpwd() {
  strdbpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strdbpwd();
}
inline const ::std::string& PackMysqlServerInfo::strdbpwd() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.strDBPwd)
  return strdbpwd_.GetNoArena();
}
inline void PackMysqlServerInfo::set_strdbpwd(const ::std::string& value) {
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.strDBPwd)
}
#if LANG_CXX11
inline void PackMysqlServerInfo::set_strdbpwd(::std::string&& value) {
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PackMysqlServerInfo.strDBPwd)
}
#endif
inline void PackMysqlServerInfo::set_strdbpwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PackMysqlServerInfo.strDBPwd)
}
inline void PackMysqlServerInfo::set_strdbpwd(const void* value, size_t size) {
  set_has_strdbpwd();
  strdbpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PackMysqlServerInfo.strDBPwd)
}
inline ::std::string* PackMysqlServerInfo::mutable_strdbpwd() {
  set_has_strdbpwd();
  // @@protoc_insertion_point(field_mutable:NFMsg.PackMysqlServerInfo.strDBPwd)
  return strdbpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackMysqlServerInfo::release_strdbpwd() {
  // @@protoc_insertion_point(field_release:NFMsg.PackMysqlServerInfo.strDBPwd)
  clear_has_strdbpwd();
  return strdbpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackMysqlServerInfo::set_allocated_strdbpwd(::std::string* strdbpwd) {
  if (strdbpwd != NULL) {
    set_has_strdbpwd();
  } else {
    clear_has_strdbpwd();
  }
  strdbpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strdbpwd);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PackMysqlServerInfo.strDBPwd)
}

// required int64 nServerID = 8;
inline bool PackMysqlServerInfo::has_nserverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PackMysqlServerInfo::set_has_nserverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PackMysqlServerInfo::clear_has_nserverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PackMysqlServerInfo::clear_nserverid() {
  nserverid_ = GOOGLE_LONGLONG(0);
  clear_has_nserverid();
}
inline ::google::protobuf::int64 PackMysqlServerInfo::nserverid() const {
  // @@protoc_insertion_point(field_get:NFMsg.PackMysqlServerInfo.nServerID)
  return nserverid_;
}
inline void PackMysqlServerInfo::set_nserverid(::google::protobuf::int64 value) {
  set_has_nserverid();
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PackMysqlServerInfo.nServerID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NFMsgMysql_2eproto__INCLUDED
