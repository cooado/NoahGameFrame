// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_NFMsgBase_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ident;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
}  // namespace protobuf_NFMsgBase_2eproto
namespace protobuf_NFMsgShare_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CurrencyStruct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ItemStruct;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckPlayerChat_ChatContainer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TileState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AckSearchGuild_SearchGuildObject;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BigMapLeaveMsg;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EffectData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GridGuildBaseInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PVPRoomInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlayerEntryInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TeammemberInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BigMapGridBaseInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BigMapWarHistory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TeamInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_NFMsgShare_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_BigMapGridDetailInfo;
}  // namespace protobuf_NFMsgShare_2eproto
namespace NFMsg {
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGameServer>
      _instance;
} _ReqEnterGameServer_default_instance_;
class ReqAckEnterGameSuccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckEnterGameSuccess>
      _instance;
} _ReqAckEnterGameSuccess_default_instance_;
class ReqHeartBeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHeartBeat>
      _instance;
} _ReqHeartBeat_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveGameServer>
      _instance;
} _ReqLeaveGameServer_default_instance_;
class PlayerEntryInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerEntryInfo>
      _instance;
} _PlayerEntryInfo_default_instance_;
class AckPlayerEntryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerEntryList>
      _instance;
} _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPlayerLeaveList>
      _instance;
} _AckPlayerLeaveList_default_instance_;
class ReqAckSynDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSynData>
      _instance;
} _ReqAckSynData_default_instance_;
class ReqAckPlayerMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerMove>
      _instance;
} _ReqAckPlayerMove_default_instance_;
class ReqAckPlayerChat_ChatContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerChat_ChatContainer>
      _instance;
} _ReqAckPlayerChat_ChatContainer_default_instance_;
class ReqAckPlayerChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckPlayerChat>
      _instance;
} _ReqAckPlayerChat_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EffectData>
      _instance;
} _EffectData_default_instance_;
class ReqAckUseSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseSkill>
      _instance;
} _ReqAckUseSkill_default_instance_;
class ReqAckUseItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckUseItem>
      _instance;
} _ReqAckUseItem_default_instance_;
class ReqAckSwapSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckSwapScene>
      _instance;
} _ReqAckSwapScene_default_instance_;
class ReqAckHomeSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckHomeScene>
      _instance;
} _ReqAckHomeScene_default_instance_;
class ItemStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ItemStruct>
      _instance;
} _ItemStruct_default_instance_;
class CurrencyStructDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurrencyStruct>
      _instance;
} _CurrencyStruct_default_instance_;
class ReqAckStartBattleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckStartBattle>
      _instance;
} _ReqAckStartBattle_default_instance_;
class ReqEndBattleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEndBattle>
      _instance;
} _ReqEndBattle_default_instance_;
class AckEndBattleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckEndBattle>
      _instance;
} _AckEndBattle_default_instance_;
class ReqPickDropItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqPickDropItem>
      _instance;
} _ReqPickDropItem_default_instance_;
class ReqAcceptTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAcceptTask>
      _instance;
} _ReqAcceptTask_default_instance_;
class ReqCompeleteTaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCompeleteTask>
      _instance;
} _ReqCompeleteTask_default_instance_;
class ReqWearEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqWearEquip>
      _instance;
} _ReqWearEquip_default_instance_;
class TakeOffEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TakeOffEquip>
      _instance;
} _TakeOffEquip_default_instance_;
class ReqAckJoinActivityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinActivity>
      _instance;
} _ReqAckJoinActivity_default_instance_;
class ReqAckCreateGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateGuild>
      _instance;
} _ReqAckCreateGuild_default_instance_;
class ReqSearchGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSearchGuild>
      _instance;
} _ReqSearchGuild_default_instance_;
class AckSearchGuild_SearchGuildObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchGuild_SearchGuildObject>
      _instance;
} _AckSearchGuild_SearchGuildObject_default_instance_;
class AckSearchGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchGuild>
      _instance;
} _AckSearchGuild_default_instance_;
class ReqAckJoinGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinGuild>
      _instance;
} _ReqAckJoinGuild_default_instance_;
class ReqAckLeaveGuildDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckLeaveGuild>
      _instance;
} _ReqAckLeaveGuild_default_instance_;
class ReqAckOprGuildMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprGuildMember>
      _instance;
} _ReqAckOprGuildMember_default_instance_;
class ReqEnterGuildEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqEnterGuildEctype>
      _instance;
} _ReqEnterGuildEctype_default_instance_;
class ReqIntensifylevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqIntensifylevelToEquip>
      _instance;
} _ReqIntensifylevelToEquip_default_instance_;
class AckIntensifylevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckIntensifylevelToEquip>
      _instance;
} _AckIntensifylevelToEquip_default_instance_;
class ReqHoleToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHoleToEquip>
      _instance;
} _ReqHoleToEquip_default_instance_;
class AckHoleToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckHoleToEquip>
      _instance;
} _AckHoleToEquip_default_instance_;
class ReqInlaystoneToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqInlaystoneToEquip>
      _instance;
} _ReqInlaystoneToEquip_default_instance_;
class AckInlaystoneToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckInlaystoneToEquip>
      _instance;
} _AckInlaystoneToEquip_default_instance_;
class ReqElementlevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqElementlevelToEquip>
      _instance;
} _ReqElementlevelToEquip_default_instance_;
class AckElementlevelToEquipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckElementlevelToEquip>
      _instance;
} _AckElementlevelToEquip_default_instance_;
class ReqSetFightHeroDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSetFightHero>
      _instance;
} _ReqSetFightHero_default_instance_;
class ReqMiningTitleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqMiningTitle>
      _instance;
} _ReqMiningTitle_default_instance_;
class TileStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TileState>
      _instance;
} _TileState_default_instance_;
class AckMiningTitleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckMiningTitle>
      _instance;
} _AckMiningTitle_default_instance_;
class ReqSearchOppnentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSearchOppnent>
      _instance;
} _ReqSearchOppnent_default_instance_;
class AckSearchOppnentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSearchOppnent>
      _instance;
} _AckSearchOppnent_default_instance_;
class ReqSendMailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSendMail>
      _instance;
} _ReqSendMail_default_instance_;
class ReqSwitchServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqSwitchServer>
      _instance;
} _ReqSwitchServer_default_instance_;
class AckSwitchServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckSwitchServer>
      _instance;
} _AckSwitchServer_default_instance_;
class TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeamInfo>
      _instance;
} _TeamInfo_default_instance_;
class TeammemberInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeammemberInfo>
      _instance;
} _TeammemberInfo_default_instance_;
class ReqAckCreateTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckCreateTeam>
      _instance;
} _ReqAckCreateTeam_default_instance_;
class ReqAckJoinTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckJoinTeam>
      _instance;
} _ReqAckJoinTeam_default_instance_;
class ReqAckLeaveTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckLeaveTeam>
      _instance;
} _ReqAckLeaveTeam_default_instance_;
class ReqAckOprTeamMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckOprTeamMember>
      _instance;
} _ReqAckOprTeamMember_default_instance_;
class ReqAckInviteTeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqAckInviteTeam>
      _instance;
} _ReqAckInviteTeam_default_instance_;
class ReqTeamEnterEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqTeamEnterEctype>
      _instance;
} _ReqTeamEnterEctype_default_instance_;
class AckTeamEnterEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckTeamEnterEctype>
      _instance;
} _AckTeamEnterEctype_default_instance_;
class GridGuildBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GridGuildBaseInfo>
      _instance;
} _GridGuildBaseInfo_default_instance_;
class ReqBigMapGridInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqBigMapGridInfo>
      _instance;
} _ReqBigMapGridInfo_default_instance_;
class BigMapGridBaseInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapGridBaseInfo>
      _instance;
} _BigMapGridBaseInfo_default_instance_;
class BigMapLeaveMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapLeaveMsg>
      _instance;
} _BigMapLeaveMsg_default_instance_;
class BigMapWarHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapWarHistory>
      _instance;
} _BigMapWarHistory_default_instance_;
class BigMapGridDetailInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BigMapGridDetailInfo>
      _instance;
} _BigMapGridDetailInfo_default_instance_;
class AckBigMapGridInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckBigMapGridInfo>
      _instance;
} _AckBigMapGridInfo_default_instance_;
class ReqBigMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqBigMapInfo>
      _instance;
} _ReqBigMapInfo_default_instance_;
class AckBigMapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckBigMapInfo>
      _instance;
} _AckBigMapInfo_default_instance_;
class ReqHoldMapGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqHoldMapGrid>
      _instance;
} _ReqHoldMapGrid_default_instance_;
class AckHoldMapGridDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckHoldMapGrid>
      _instance;
} _AckHoldMapGrid_default_instance_;
class ReqLeaveMapMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqLeaveMapMsg>
      _instance;
} _ReqLeaveMapMsg_default_instance_;
class AckLeaveMapMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckLeaveMapMsg>
      _instance;
} _AckLeaveMapMsg_default_instance_;
class ReqGetMapAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqGetMapAward>
      _instance;
} _ReqGetMapAward_default_instance_;
class AckGetMapAwardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckGetMapAward>
      _instance;
} _AckGetMapAward_default_instance_;
class ReqMapHuntingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqMapHunting>
      _instance;
} _ReqMapHunting_default_instance_;
class AckMapHuntingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckMapHunting>
      _instance;
} _AckMapHunting_default_instance_;
class ReqMapKingWarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqMapKingWar>
      _instance;
} _ReqMapKingWar_default_instance_;
class AckMapKingWarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckMapKingWar>
      _instance;
} _AckMapKingWar_default_instance_;
class PVPRoomInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PVPRoomInfo>
      _instance;
} _PVPRoomInfo_default_instance_;
class ReqPVPApplyMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqPVPApplyMatch>
      _instance;
} _ReqPVPApplyMatch_default_instance_;
class AckPVPApplyMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckPVPApplyMatch>
      _instance;
} _AckPVPApplyMatch_default_instance_;
class ReqCreatePVPEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqCreatePVPEctype>
      _instance;
} _ReqCreatePVPEctype_default_instance_;
class AckCreatePVPEctypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckCreatePVPEctype>
      _instance;
} _AckCreatePVPEctype_default_instance_;
}  // namespace NFMsg
namespace protobuf_NFMsgShare_2eproto {
static void InitDefaultsReqEnterGameServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqEnterGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqEnterGameServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqEnterGameServer}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckEnterGameSuccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckEnterGameSuccess_default_instance_;
    new (ptr) ::NFMsg::ReqAckEnterGameSuccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckEnterGameSuccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckEnterGameSuccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckEnterGameSuccess}, {}};

static void InitDefaultsReqHeartBeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHeartBeat_default_instance_;
    new (ptr) ::NFMsg::ReqHeartBeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHeartBeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqHeartBeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqHeartBeat}, {}};

static void InitDefaultsReqLeaveGameServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveGameServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqLeaveGameServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqLeaveGameServer}, {}};

static void InitDefaultsPlayerEntryInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PlayerEntryInfo_default_instance_;
    new (ptr) ::NFMsg::PlayerEntryInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PlayerEntryInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlayerEntryInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlayerEntryInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckPlayerEntryList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerEntryList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerEntryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerEntryList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckPlayerEntryList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckPlayerEntryList}, {
      &protobuf_NFMsgShare_2eproto::scc_info_PlayerEntryInfo.base,}};

static void InitDefaultsAckPlayerLeaveList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerLeaveList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerLeaveList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerLeaveList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckPlayerLeaveList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckPlayerLeaveList}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckSynData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSynData_default_instance_;
    new (ptr) ::NFMsg::ReqAckSynData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSynData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckSynData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckSynData}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckPlayerMove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerMove_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerMove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckPlayerMove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckPlayerMove}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsReqAckPlayerChat_ChatContainer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_ChatContainer_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat_ChatContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat_ChatContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckPlayerChat_ChatContainer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckPlayerChat_ChatContainer}, {}};

static void InitDefaultsReqAckPlayerChat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckPlayerChat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckPlayerChat}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat_ChatContainer.base,}};

static void InitDefaultsEffectData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_EffectData_default_instance_;
    new (ptr) ::NFMsg::EffectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::EffectData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EffectData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEffectData}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckUseSkill() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseSkill_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseSkill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ReqAckUseSkill =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReqAckUseSkill}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Vector3.base,
      &protobuf_NFMsgShare_2eproto::scc_info_EffectData.base,}};

static void InitDefaultsReqAckUseItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseItem_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ReqAckUseItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReqAckUseItem}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_EffectData.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base,}};

static void InitDefaultsReqAckSwapScene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSwapScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckSwapScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSwapScene::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckSwapScene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckSwapScene}, {}};

static void InitDefaultsReqAckHomeScene() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckHomeScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckHomeScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckHomeScene::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckHomeScene =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckHomeScene}, {}};

static void InitDefaultsItemStruct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ItemStruct_default_instance_;
    new (ptr) ::NFMsg::ItemStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ItemStruct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ItemStruct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsItemStruct}, {}};

static void InitDefaultsCurrencyStruct() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_CurrencyStruct_default_instance_;
    new (ptr) ::NFMsg::CurrencyStruct();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::CurrencyStruct::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurrencyStruct =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurrencyStruct}, {}};

static void InitDefaultsReqAckStartBattle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckStartBattle_default_instance_;
    new (ptr) ::NFMsg::ReqAckStartBattle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckStartBattle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckStartBattle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckStartBattle}, {}};

static void InitDefaultsReqEndBattle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEndBattle_default_instance_;
    new (ptr) ::NFMsg::ReqEndBattle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEndBattle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqEndBattle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqEndBattle}, {}};

static void InitDefaultsAckEndBattle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckEndBattle_default_instance_;
    new (ptr) ::NFMsg::AckEndBattle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckEndBattle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckEndBattle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckEndBattle}, {
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base,}};

static void InitDefaultsReqPickDropItem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqPickDropItem_default_instance_;
    new (ptr) ::NFMsg::ReqPickDropItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqPickDropItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqPickDropItem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqPickDropItem}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAcceptTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAcceptTask_default_instance_;
    new (ptr) ::NFMsg::ReqAcceptTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAcceptTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAcceptTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAcceptTask}, {}};

static void InitDefaultsReqCompeleteTask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqCompeleteTask_default_instance_;
    new (ptr) ::NFMsg::ReqCompeleteTask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqCompeleteTask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqCompeleteTask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqCompeleteTask}, {}};

static void InitDefaultsReqWearEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqWearEquip_default_instance_;
    new (ptr) ::NFMsg::ReqWearEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqWearEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqWearEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqWearEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsTakeOffEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TakeOffEquip_default_instance_;
    new (ptr) ::NFMsg::TakeOffEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TakeOffEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TakeOffEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTakeOffEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckJoinActivity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckJoinActivity_default_instance_;
    new (ptr) ::NFMsg::ReqAckJoinActivity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckJoinActivity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqAckJoinActivity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqAckJoinActivity}, {}};

static void InitDefaultsReqAckCreateGuild() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCreateGuild_default_instance_;
    new (ptr) ::NFMsg::ReqAckCreateGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCreateGuild::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckCreateGuild =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckCreateGuild}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSearchGuild() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSearchGuild_default_instance_;
    new (ptr) ::NFMsg::ReqSearchGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSearchGuild::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqSearchGuild =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqSearchGuild}, {}};

static void InitDefaultsAckSearchGuild_SearchGuildObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchGuild_SearchGuildObject_default_instance_;
    new (ptr) ::NFMsg::AckSearchGuild_SearchGuildObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchGuild_SearchGuildObject::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckSearchGuild_SearchGuildObject =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSearchGuild_SearchGuildObject}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckSearchGuild() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchGuild_default_instance_;
    new (ptr) ::NFMsg::AckSearchGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchGuild::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckSearchGuild =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSearchGuild}, {
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchGuild_SearchGuildObject.base,}};

static void InitDefaultsReqAckJoinGuild() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckJoinGuild_default_instance_;
    new (ptr) ::NFMsg::ReqAckJoinGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckJoinGuild::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckJoinGuild =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckJoinGuild}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckLeaveGuild() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckLeaveGuild_default_instance_;
    new (ptr) ::NFMsg::ReqAckLeaveGuild();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckLeaveGuild::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckLeaveGuild =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckLeaveGuild}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckOprGuildMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckOprGuildMember_default_instance_;
    new (ptr) ::NFMsg::ReqAckOprGuildMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckOprGuildMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckOprGuildMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckOprGuildMember}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqEnterGuildEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterGuildEctype_default_instance_;
    new (ptr) ::NFMsg::ReqEnterGuildEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterGuildEctype::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqEnterGuildEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqEnterGuildEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqIntensifylevelToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqIntensifylevelToEquip_default_instance_;
    new (ptr) ::NFMsg::ReqIntensifylevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqIntensifylevelToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqIntensifylevelToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqIntensifylevelToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckIntensifylevelToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckIntensifylevelToEquip_default_instance_;
    new (ptr) ::NFMsg::AckIntensifylevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckIntensifylevelToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckIntensifylevelToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckIntensifylevelToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqHoleToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHoleToEquip_default_instance_;
    new (ptr) ::NFMsg::ReqHoleToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHoleToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqHoleToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqHoleToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckHoleToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckHoleToEquip_default_instance_;
    new (ptr) ::NFMsg::AckHoleToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckHoleToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckHoleToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckHoleToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqInlaystoneToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqInlaystoneToEquip_default_instance_;
    new (ptr) ::NFMsg::ReqInlaystoneToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqInlaystoneToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqInlaystoneToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqInlaystoneToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckInlaystoneToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckInlaystoneToEquip_default_instance_;
    new (ptr) ::NFMsg::AckInlaystoneToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckInlaystoneToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckInlaystoneToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckInlaystoneToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqElementlevelToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqElementlevelToEquip_default_instance_;
    new (ptr) ::NFMsg::ReqElementlevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqElementlevelToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqElementlevelToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqElementlevelToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckElementlevelToEquip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckElementlevelToEquip_default_instance_;
    new (ptr) ::NFMsg::AckElementlevelToEquip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckElementlevelToEquip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckElementlevelToEquip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckElementlevelToEquip}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqSetFightHero() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSetFightHero_default_instance_;
    new (ptr) ::NFMsg::ReqSetFightHero();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSetFightHero::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqSetFightHero =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSetFightHero}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqMiningTitle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqMiningTitle_default_instance_;
    new (ptr) ::NFMsg::ReqMiningTitle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqMiningTitle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqMiningTitle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqMiningTitle}, {}};

static void InitDefaultsTileState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TileState_default_instance_;
    new (ptr) ::NFMsg::TileState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TileState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TileState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTileState}, {}};

static void InitDefaultsAckMiningTitle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckMiningTitle_default_instance_;
    new (ptr) ::NFMsg::AckMiningTitle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckMiningTitle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckMiningTitle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckMiningTitle}, {
      &protobuf_NFMsgShare_2eproto::scc_info_TileState.base,}};

static void InitDefaultsReqSearchOppnent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSearchOppnent_default_instance_;
    new (ptr) ::NFMsg::ReqSearchOppnent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSearchOppnent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqSearchOppnent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqSearchOppnent}, {}};

static void InitDefaultsAckSearchOppnent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSearchOppnent_default_instance_;
    new (ptr) ::NFMsg::AckSearchOppnent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSearchOppnent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckSearchOppnent =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckSearchOppnent}, {}};

static void InitDefaultsReqSendMail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSendMail_default_instance_;
    new (ptr) ::NFMsg::ReqSendMail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSendMail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ReqSendMail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReqSendMail}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base,
      &protobuf_NFMsgShare_2eproto::scc_info_CurrencyStruct.base,}};

static void InitDefaultsReqSwitchServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqSwitchServer_default_instance_;
    new (ptr) ::NFMsg::ReqSwitchServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqSwitchServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqSwitchServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqSwitchServer}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckSwitchServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckSwitchServer_default_instance_;
    new (ptr) ::NFMsg::AckSwitchServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckSwitchServer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckSwitchServer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckSwitchServer}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsTeamInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TeamInfo_default_instance_;
    new (ptr) ::NFMsg::TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TeamInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTeamInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_TeammemberInfo.base,}};

static void InitDefaultsTeammemberInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_TeammemberInfo_default_instance_;
    new (ptr) ::NFMsg::TeammemberInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::TeammemberInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TeammemberInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTeammemberInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqAckCreateTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckCreateTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckCreateTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckCreateTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckCreateTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckCreateTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckJoinTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckJoinTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckJoinTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckJoinTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckJoinTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckJoinTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckLeaveTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckLeaveTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckLeaveTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckLeaveTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckLeaveTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckLeaveTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckOprTeamMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckOprTeamMember_default_instance_;
    new (ptr) ::NFMsg::ReqAckOprTeamMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckOprTeamMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqAckOprTeamMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqAckOprTeamMember}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_TeamInfo.base,}};

static void InitDefaultsReqAckInviteTeam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckInviteTeam_default_instance_;
    new (ptr) ::NFMsg::ReqAckInviteTeam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckInviteTeam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqAckInviteTeam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqAckInviteTeam}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqTeamEnterEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqTeamEnterEctype_default_instance_;
    new (ptr) ::NFMsg::ReqTeamEnterEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqTeamEnterEctype::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqTeamEnterEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqTeamEnterEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckTeamEnterEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckTeamEnterEctype_default_instance_;
    new (ptr) ::NFMsg::AckTeamEnterEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckTeamEnterEctype::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckTeamEnterEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckTeamEnterEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsGridGuildBaseInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_GridGuildBaseInfo_default_instance_;
    new (ptr) ::NFMsg::GridGuildBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::GridGuildBaseInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GridGuildBaseInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGridGuildBaseInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqBigMapGridInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqBigMapGridInfo_default_instance_;
    new (ptr) ::NFMsg::ReqBigMapGridInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqBigMapGridInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqBigMapGridInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqBigMapGridInfo}, {}};

static void InitDefaultsBigMapGridBaseInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapGridBaseInfo_default_instance_;
    new (ptr) ::NFMsg::BigMapGridBaseInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapGridBaseInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BigMapGridBaseInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBigMapGridBaseInfo}, {
      &protobuf_NFMsgShare_2eproto::scc_info_GridGuildBaseInfo.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsBigMapLeaveMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapLeaveMsg_default_instance_;
    new (ptr) ::NFMsg::BigMapLeaveMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapLeaveMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BigMapLeaveMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBigMapLeaveMsg}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsBigMapWarHistory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapWarHistory_default_instance_;
    new (ptr) ::NFMsg::BigMapWarHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapWarHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BigMapWarHistory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBigMapWarHistory}, {
      &protobuf_NFMsgShare_2eproto::scc_info_GridGuildBaseInfo.base,
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsBigMapGridDetailInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_BigMapGridDetailInfo_default_instance_;
    new (ptr) ::NFMsg::BigMapGridDetailInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::BigMapGridDetailInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_BigMapGridDetailInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsBigMapGridDetailInfo}, {
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapGridBaseInfo.base,
      &protobuf_NFMsgShare_2eproto::scc_info_GridGuildBaseInfo.base,
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapLeaveMsg.base,
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapWarHistory.base,}};

static void InitDefaultsAckBigMapGridInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckBigMapGridInfo_default_instance_;
    new (ptr) ::NFMsg::AckBigMapGridInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckBigMapGridInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckBigMapGridInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckBigMapGridInfo}, {
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapGridDetailInfo.base,}};

static void InitDefaultsReqBigMapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqBigMapInfo_default_instance_;
    new (ptr) ::NFMsg::ReqBigMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqBigMapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqBigMapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqBigMapInfo}, {}};

static void InitDefaultsAckBigMapInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckBigMapInfo_default_instance_;
    new (ptr) ::NFMsg::AckBigMapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckBigMapInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckBigMapInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckBigMapInfo}, {
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapGridBaseInfo.base,}};

static void InitDefaultsReqHoldMapGrid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHoldMapGrid_default_instance_;
    new (ptr) ::NFMsg::ReqHoldMapGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHoldMapGrid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqHoldMapGrid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqHoldMapGrid}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckHoldMapGrid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckHoldMapGrid_default_instance_;
    new (ptr) ::NFMsg::AckHoldMapGrid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckHoldMapGrid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckHoldMapGrid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckHoldMapGrid}, {}};

static void InitDefaultsReqLeaveMapMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqLeaveMapMsg_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveMapMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveMapMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqLeaveMapMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqLeaveMapMsg}, {
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapLeaveMsg.base,}};

static void InitDefaultsAckLeaveMapMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckLeaveMapMsg_default_instance_;
    new (ptr) ::NFMsg::AckLeaveMapMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckLeaveMapMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckLeaveMapMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckLeaveMapMsg}, {}};

static void InitDefaultsReqGetMapAward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqGetMapAward_default_instance_;
    new (ptr) ::NFMsg::ReqGetMapAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqGetMapAward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqGetMapAward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqGetMapAward}, {}};

static void InitDefaultsAckGetMapAward() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckGetMapAward_default_instance_;
    new (ptr) ::NFMsg::AckGetMapAward();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckGetMapAward::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckGetMapAward =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckGetMapAward}, {}};

static void InitDefaultsReqMapHunting() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqMapHunting_default_instance_;
    new (ptr) ::NFMsg::ReqMapHunting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqMapHunting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqMapHunting =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqMapHunting}, {}};

static void InitDefaultsAckMapHunting() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckMapHunting_default_instance_;
    new (ptr) ::NFMsg::AckMapHunting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckMapHunting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckMapHunting =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckMapHunting}, {}};

static void InitDefaultsReqMapKingWar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqMapKingWar_default_instance_;
    new (ptr) ::NFMsg::ReqMapKingWar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqMapKingWar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqMapKingWar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqMapKingWar}, {}};

static void InitDefaultsAckMapKingWar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckMapKingWar_default_instance_;
    new (ptr) ::NFMsg::AckMapKingWar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckMapKingWar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckMapKingWar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckMapKingWar}, {}};

static void InitDefaultsPVPRoomInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PVPRoomInfo_default_instance_;
    new (ptr) ::NFMsg::PVPRoomInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PVPRoomInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PVPRoomInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPVPRoomInfo}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsReqPVPApplyMatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqPVPApplyMatch_default_instance_;
    new (ptr) ::NFMsg::ReqPVPApplyMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqPVPApplyMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReqPVPApplyMatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReqPVPApplyMatch}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,}};

static void InitDefaultsAckPVPApplyMatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPVPApplyMatch_default_instance_;
    new (ptr) ::NFMsg::AckPVPApplyMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPVPApplyMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AckPVPApplyMatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAckPVPApplyMatch}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_PVPRoomInfo.base,}};

static void InitDefaultsReqCreatePVPEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqCreatePVPEctype_default_instance_;
    new (ptr) ::NFMsg::ReqCreatePVPEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqCreatePVPEctype::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ReqCreatePVPEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReqCreatePVPEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_PVPRoomInfo.base,}};

static void InitDefaultsAckCreatePVPEctype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckCreatePVPEctype_default_instance_;
    new (ptr) ::NFMsg::AckCreatePVPEctype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckCreatePVPEctype::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_AckCreatePVPEctype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsAckCreatePVPEctype}, {
      &protobuf_NFMsgBase_2eproto::scc_info_Ident.base,
      &protobuf_NFMsgShare_2eproto::scc_info_PVPRoomInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReqEnterGameServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckEnterGameSuccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqHeartBeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqLeaveGameServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerEntryInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckPlayerEntryList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckPlayerLeaveList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckSynData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerMove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerChat_ChatContainer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckPlayerChat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EffectData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckUseSkill.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckUseItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckSwapScene.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckHomeScene.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ItemStruct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurrencyStruct.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckStartBattle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqEndBattle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckEndBattle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqPickDropItem.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAcceptTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqCompeleteTask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqWearEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TakeOffEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckJoinActivity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckCreateGuild.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSearchGuild.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSearchGuild_SearchGuildObject.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSearchGuild.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckJoinGuild.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckLeaveGuild.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckOprGuildMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqEnterGuildEctype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqIntensifylevelToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckIntensifylevelToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqHoleToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckHoleToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqInlaystoneToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckInlaystoneToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqElementlevelToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckElementlevelToEquip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSetFightHero.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqMiningTitle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TileState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckMiningTitle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSearchOppnent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSearchOppnent.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSendMail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqSwitchServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckSwitchServer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeamInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeammemberInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckCreateTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckJoinTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckLeaveTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckOprTeamMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqAckInviteTeam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqTeamEnterEctype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckTeamEnterEctype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GridGuildBaseInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqBigMapGridInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigMapGridBaseInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigMapLeaveMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigMapWarHistory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BigMapGridDetailInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckBigMapGridInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqBigMapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckBigMapInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqHoldMapGrid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckHoldMapGrid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqLeaveMapMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckLeaveMapMsg.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqGetMapAward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckGetMapAward.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqMapHunting.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckMapHunting.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqMapKingWar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckMapKingWar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PVPRoomInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqPVPApplyMatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckPVPApplyMatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqCreatePVPEctype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckCreatePVPEctype.base);
}

::google::protobuf::Metadata file_level_metadata[85];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, name_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHeartBeat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, object_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, career_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, player_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, class_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, object_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, object_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, syser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, syn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSynData, msg_id_),
  1,
  ~0u,
  0,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, mover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, movetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, target_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerMove, source_pos_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, containertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat_ChatContainer, data_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, container_data_),
  2,
  4,
  0,
  1,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_ident_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::EffectData, effect_rlt_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, now_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, tar_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, use_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, effect_data_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, item_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, effect_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckUseItem, targetid_),
  0,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, transfer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, data_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckHomeScene, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ItemStruct, item_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, currency_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::CurrencyStruct, currency_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckStartBattle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckStartBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckStartBattle, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckStartBattle, diamond_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEndBattle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, star_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, diamond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckEndBattle, item_list_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPickDropItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPickDropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPickDropItem, item_guid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAcceptTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAcceptTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAcceptTask, task_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCompeleteTask, task_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqWearEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqWearEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqWearEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqWearEquip, targetid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TakeOffEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TakeOffEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TakeOffEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TakeOffEquip, targetid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinActivity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinActivity, activity_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinActivity, sub_activity_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateGuild, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateGuild, guild_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchGuild, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchGuild, guild_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_member_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_honor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild_SearchGuildObject, guild_rank_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchGuild, guild_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinGuild, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinGuild, guild_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveGuild, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveGuild, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveGuild, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveGuild, guild_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprGuildMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprGuildMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprGuildMember, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprGuildMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprGuildMember, type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGuildEctype, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGuildEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqEnterGuildEctype, guild_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqIntensifylevelToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqIntensifylevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqIntensifylevelToEquip, equipid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckIntensifylevelToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckIntensifylevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckIntensifylevelToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckIntensifylevelToEquip, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoleToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoleToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoleToEquip, equipid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckHoleToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckHoleToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckHoleToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckHoleToEquip, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqInlaystoneToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqInlaystoneToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqInlaystoneToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqInlaystoneToEquip, stoneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqInlaystoneToEquip, hole_index_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckInlaystoneToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckInlaystoneToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckInlaystoneToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckInlaystoneToEquip, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqElementlevelToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqElementlevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqElementlevelToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqElementlevelToEquip, eelementtype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckElementlevelToEquip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckElementlevelToEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckElementlevelToEquip, equipid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckElementlevelToEquip, result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, heroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSetFightHero, fightpos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMiningTitle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMiningTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMiningTitle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMiningTitle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMiningTitle, opr_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TileState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TileState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TileState, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TileState, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TileState, opr_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMiningTitle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMiningTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMiningTitle, tile_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSearchOppnent, scene_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, reciever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSendMail, currency_list_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, self_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, target_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, gate_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqSwitchServer, groupid_),
  0,
  2,
  3,
  4,
  5,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, selfid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, self_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, target_serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckSwitchServer, gate_serverid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, captain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeamInfo, teammemberinfo_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, nlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, job_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::TeammemberInfo, headicon_),
  2,
  0,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckCreateTeam, xteaminfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckJoinTeam, xteaminfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckLeaveTeam, xteaminfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, member_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckOprTeamMember, xteaminfo_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqAckInviteTeam, invite_target_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, nectypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, nresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqTeamEnterEctype, nserverid_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, nectypeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, ngroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckTeamEnterEctype, nresult_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::GridGuildBaseInfo, icon_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBigMapGridInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBigMapGridInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBigMapGridInfo, map_title_id_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, guild_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, kingwar_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, kingwarrer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, hurting_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridBaseInfo, hurter_),
  0,
  1,
  4,
  2,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, owner_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, msg_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, msg_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapLeaveMsg, owner_level_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapWarHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapWarHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapWarHistory, red_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapWarHistory, blue_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapWarHistory, winner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapWarHistory, war_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, grid_base_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, stay_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, leave_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::BigMapGridDetailInfo, war_history_),
  0,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckBigMapGridInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckBigMapGridInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckBigMapGridInfo, map_data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBigMapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqBigMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckBigMapInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckBigMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckBigMapInfo, grid_base_info_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, map_title_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqHoldMapGrid, guild_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckHoldMapGrid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckHoldMapGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, map_title_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqLeaveMapMsg, leave_msg_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckLeaveMapMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckLeaveMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqGetMapAward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqGetMapAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqGetMapAward, map_title_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckGetMapAward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckGetMapAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMapHunting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMapHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMapHunting, map_title_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMapHunting, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMapHunting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMapKingWar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMapKingWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqMapKingWar, map_title_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMapKingWar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckMapKingWar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, ncellstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, npvpmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, npvpgrade_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, maxpalyer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, xredplayer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, xblueplayer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, sceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PVPRoomInfo, groupid_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, npvpmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, applytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqPVPApplyMatch, team_id_),
  0,
  3,
  2,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPVPApplyMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPVPApplyMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPVPApplyMatch, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPVPApplyMatch, xroominfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPVPApplyMatch, applytype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckPVPApplyMatch, nresult_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCreatePVPEctype, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCreatePVPEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCreatePVPEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::ReqCreatePVPEctype, xroominfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckCreatePVPEctype, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckCreatePVPEctype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckCreatePVPEctype, self_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckCreatePVPEctype, xroominfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::AckCreatePVPEctype, applytype_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::NFMsg::ReqEnterGameServer)},
  { 13, 18, sizeof(::NFMsg::ReqAckEnterGameSuccess)},
  { 18, 23, sizeof(::NFMsg::ReqHeartBeat)},
  { 23, 28, sizeof(::NFMsg::ReqLeaveGameServer)},
  { 28, 42, sizeof(::NFMsg::PlayerEntryInfo)},
  { 51, 57, sizeof(::NFMsg::AckPlayerEntryList)},
  { 58, 64, sizeof(::NFMsg::AckPlayerLeaveList)},
  { 65, 75, sizeof(::NFMsg::ReqAckSynData)},
  { 80, 89, sizeof(::NFMsg::ReqAckPlayerMove)},
  { 93, 100, sizeof(::NFMsg::ReqAckPlayerChat_ChatContainer)},
  { 102, 113, sizeof(::NFMsg::ReqAckPlayerChat)},
  { 119, 127, sizeof(::NFMsg::EffectData)},
  { 130, 141, sizeof(::NFMsg::ReqAckUseSkill)},
  { 147, 157, sizeof(::NFMsg::ReqAckUseItem)},
  { 162, 174, sizeof(::NFMsg::ReqAckSwapScene)},
  { 181, 187, sizeof(::NFMsg::ReqAckHomeScene)},
  { 188, 195, sizeof(::NFMsg::ItemStruct)},
  { 197, 204, sizeof(::NFMsg::CurrencyStruct)},
  { 206, 213, sizeof(::NFMsg::ReqAckStartBattle)},
  { 215, 220, sizeof(::NFMsg::ReqEndBattle)},
  { 220, 231, sizeof(::NFMsg::AckEndBattle)},
  { 237, 243, sizeof(::NFMsg::ReqPickDropItem)},
  { 244, 250, sizeof(::NFMsg::ReqAcceptTask)},
  { 251, 257, sizeof(::NFMsg::ReqCompeleteTask)},
  { 258, 265, sizeof(::NFMsg::ReqWearEquip)},
  { 267, 274, sizeof(::NFMsg::TakeOffEquip)},
  { 276, 283, sizeof(::NFMsg::ReqAckJoinActivity)},
  { 285, 292, sizeof(::NFMsg::ReqAckCreateGuild)},
  { 294, 300, sizeof(::NFMsg::ReqSearchGuild)},
  { 301, 313, sizeof(::NFMsg::AckSearchGuild_SearchGuildObject)},
  { 320, 326, sizeof(::NFMsg::AckSearchGuild)},
  { 327, 334, sizeof(::NFMsg::ReqAckJoinGuild)},
  { 336, 343, sizeof(::NFMsg::ReqAckLeaveGuild)},
  { 345, 353, sizeof(::NFMsg::ReqAckOprGuildMember)},
  { 356, 362, sizeof(::NFMsg::ReqEnterGuildEctype)},
  { 363, 369, sizeof(::NFMsg::ReqIntensifylevelToEquip)},
  { 370, 377, sizeof(::NFMsg::AckIntensifylevelToEquip)},
  { 379, 385, sizeof(::NFMsg::ReqHoleToEquip)},
  { 386, 393, sizeof(::NFMsg::AckHoleToEquip)},
  { 395, 403, sizeof(::NFMsg::ReqInlaystoneToEquip)},
  { 406, 413, sizeof(::NFMsg::AckInlaystoneToEquip)},
  { 415, 422, sizeof(::NFMsg::ReqElementlevelToEquip)},
  { 424, 431, sizeof(::NFMsg::AckElementlevelToEquip)},
  { 433, 440, sizeof(::NFMsg::ReqSetFightHero)},
  { 442, 450, sizeof(::NFMsg::ReqMiningTitle)},
  { 453, 461, sizeof(::NFMsg::TileState)},
  { 464, 470, sizeof(::NFMsg::AckMiningTitle)},
  { 471, 476, sizeof(::NFMsg::ReqSearchOppnent)},
  { 476, 482, sizeof(::NFMsg::AckSearchOppnent)},
  { 483, 491, sizeof(::NFMsg::ReqSendMail)},
  { 494, 506, sizeof(::NFMsg::ReqSwitchServer)},
  { 513, 522, sizeof(::NFMsg::AckSwitchServer)},
  { 526, 534, sizeof(::NFMsg::TeamInfo)},
  { 537, 547, sizeof(::NFMsg::TeammemberInfo)},
  { 552, 559, sizeof(::NFMsg::ReqAckCreateTeam)},
  { 561, 568, sizeof(::NFMsg::ReqAckJoinTeam)},
  { 570, 577, sizeof(::NFMsg::ReqAckLeaveTeam)},
  { 579, 588, sizeof(::NFMsg::ReqAckOprTeamMember)},
  { 592, 600, sizeof(::NFMsg::ReqAckInviteTeam)},
  { 603, 614, sizeof(::NFMsg::ReqTeamEnterEctype)},
  { 620, 630, sizeof(::NFMsg::AckTeamEnterEctype)},
  { 635, 645, sizeof(::NFMsg::GridGuildBaseInfo)},
  { 650, 656, sizeof(::NFMsg::ReqBigMapGridInfo)},
  { 657, 668, sizeof(::NFMsg::BigMapGridBaseInfo)},
  { 674, 684, sizeof(::NFMsg::BigMapLeaveMsg)},
  { 689, 698, sizeof(::NFMsg::BigMapWarHistory)},
  { 702, 711, sizeof(::NFMsg::BigMapGridDetailInfo)},
  { 715, 721, sizeof(::NFMsg::AckBigMapGridInfo)},
  { 722, 727, sizeof(::NFMsg::ReqBigMapInfo)},
  { 727, 733, sizeof(::NFMsg::AckBigMapInfo)},
  { 734, 741, sizeof(::NFMsg::ReqHoldMapGrid)},
  { 743, 748, sizeof(::NFMsg::AckHoldMapGrid)},
  { 748, 755, sizeof(::NFMsg::ReqLeaveMapMsg)},
  { 757, 762, sizeof(::NFMsg::AckLeaveMapMsg)},
  { 762, 768, sizeof(::NFMsg::ReqGetMapAward)},
  { 769, 774, sizeof(::NFMsg::AckGetMapAward)},
  { 774, 780, sizeof(::NFMsg::ReqMapHunting)},
  { 781, 786, sizeof(::NFMsg::AckMapHunting)},
  { 786, 792, sizeof(::NFMsg::ReqMapKingWar)},
  { 793, 798, sizeof(::NFMsg::AckMapKingWar)},
  { 798, 813, sizeof(::NFMsg::PVPRoomInfo)},
  { 823, 833, sizeof(::NFMsg::ReqPVPApplyMatch)},
  { 838, 847, sizeof(::NFMsg::AckPVPApplyMatch)},
  { 851, 858, sizeof(::NFMsg::ReqCreatePVPEctype)},
  { 860, 868, sizeof(::NFMsg::AckCreatePVPEctype)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckEnterGameSuccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqHeartBeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckSynData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerChat_ChatContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_EffectData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckUseSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckUseItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckSwapScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckHomeScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ItemStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_CurrencyStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckStartBattle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEndBattle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckEndBattle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqPickDropItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAcceptTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqCompeleteTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqWearEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_TakeOffEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckJoinActivity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckCreateGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSearchGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSearchGuild_SearchGuildObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSearchGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckJoinGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckLeaveGuild_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckOprGuildMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqEnterGuildEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqIntensifylevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckIntensifylevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqHoleToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckHoleToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqInlaystoneToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckInlaystoneToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqElementlevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckElementlevelToEquip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSetFightHero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqMiningTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_TileState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckMiningTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSearchOppnent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSearchOppnent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSendMail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqSwitchServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckSwitchServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_TeammemberInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckCreateTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckJoinTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckLeaveTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckOprTeamMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqAckInviteTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqTeamEnterEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckTeamEnterEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_GridGuildBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqBigMapGridInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_BigMapGridBaseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_BigMapLeaveMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_BigMapWarHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_BigMapGridDetailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckBigMapGridInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqBigMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckBigMapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqHoldMapGrid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckHoldMapGrid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqLeaveMapMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckLeaveMapMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqGetMapAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckGetMapAward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqMapHunting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckMapHunting_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqMapKingWar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckMapKingWar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PVPRoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqPVPApplyMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckPVPApplyMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_ReqCreatePVPEctype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_AckCreatePVPEctype_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NFMsgShare.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 85);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
      "o\032\017NFMsgBase.proto\"^\n\022ReqEnterGameServer"
      "\022\030\n\002id\030\001 \002(\0132\014.NFMsg.Ident\022\017\n\007account\030\002 "
      "\002(\014\022\017\n\007game_id\030\003 \002(\005\022\014\n\004name\030\004 \002(\014\"\030\n\026Re"
      "qAckEnterGameSuccess\"\016\n\014ReqHeartBeat\"\024\n\022"
      "ReqLeaveGameServer\"\267\001\n\017PlayerEntryInfo\022!"
      "\n\013object_guid\030\001 \002(\0132\014.NFMsg.Ident\022\t\n\001x\030\002"
      " \002(\002\022\t\n\001y\030\003 \002(\002\022\t\n\001z\030\004 \002(\002\022\023\n\013career_typ"
      "e\030\005 \002(\005\022\024\n\014player_state\030\006 \002(\005\022\021\n\tconfig_"
      "id\030\007 \002(\014\022\020\n\010scene_id\030\010 \002(\005\022\020\n\010class_id\030\t"
      " \002(\014\"A\n\022AckPlayerEntryList\022+\n\013object_lis"
      "t\030\001 \003(\0132\026.NFMsg.PlayerEntryInfo\"7\n\022AckPl"
      "ayerLeaveList\022!\n\013object_list\030\001 \003(\0132\014.NFM"
      "sg.Ident\"\367\001\n\rReqAckSynData\022\033\n\005syser\030\001 \002("
      "\0132\014.NFMsg.Ident\022!\n\013object_list\030\002 \003(\0132\014.N"
      "FMsg.Ident\022\014\n\004data\030\003 \002(\014\022.\n\010syn_type\030\004 \002"
      "(\0162\034.NFMsg.ReqAckSynData.SynType\022 \n\006msg_"
      "id\030\005 \002(\0162\020.NFMsg.ESynMsgID\"F\n\007SynType\022\r\n"
      "\tEST_GROUP\020\001\022\r\n\tEST_SCENE\020\002\022\r\n\tEST_GUILD"
      "\020\003\022\016\n\nEST_FRIEND\020\004\"\211\001\n\020ReqAckPlayerMove\022"
      "\033\n\005mover\030\001 \002(\0132\014.NFMsg.Ident\022\020\n\010moveType"
      "\030\002 \002(\005\022\"\n\ntarget_pos\030\003 \003(\0132\016.NFMsg.Vecto"
      "r3\022\"\n\nsource_pos\030\004 \003(\0132\016.NFMsg.Vector3\"\236"
      "\003\n\020ReqAckPlayerChat\022\035\n\007chat_id\030\001 \002(\0132\014.N"
      "FMsg.Ident\0228\n\tchat_type\030\002 \002(\0162%.NFMsg.Re"
      "qAckPlayerChat.EGameChatType\022\021\n\tchat_inf"
      "o\030\003 \002(\014\022\021\n\tchat_name\030\004 \002(\014\022\037\n\ttarget_id\030"
      "\005 \001(\0132\014.NFMsg.Ident\022=\n\016Container_data\030\006 "
      "\003(\0132%.NFMsg.ReqAckPlayerChat.ChatContain"
      "er\032Y\n\rChatContainer\022\025\n\rConTainerType\030\002 \002"
      "(\005\022\021\n\tdata_info\030\003 \002(\014\"\036\n\rContainerType\022\r"
      "\n\tEGCT_ITEM\020\001\"P\n\rEGameChatType\022\016\n\nEGCT_G"
      "UILD\020\000\022\020\n\014EGCT_PRIVATE\020\001\022\r\n\tEGCT_TEAM\020\002\022"
      "\016\n\nEGCT_WORLD\020\003\"\267\001\n\nEffectData\022\"\n\014effect"
      "_ident\030\001 \002(\0132\014.NFMsg.Ident\022\024\n\014effect_val"
      "ue\030\002 \002(\005\0221\n\neffect_rlt\030\003 \002(\0162\035.NFMsg.Eff"
      "ectData.EResultType\"<\n\013EResultType\022\017\n\013EE"
      "T_SUCCESS\020\000\022\014\n\010EET_FAIL\020\001\022\016\n\nEET_REFUSE\020"
      "\002\"\273\001\n\016ReqAckUseSkill\022\032\n\004user\030\001 \002(\0132\014.NFM"
      "sg.Ident\022\020\n\010skill_id\030\002 \002(\014\022\037\n\007now_pos\030\003 "
      "\002(\0132\016.NFMsg.Vector3\022\037\n\007tar_pos\030\004 \002(\0132\016.N"
      "FMsg.Vector3\022\021\n\tuse_index\030\005 \002(\005\022&\n\013effec"
      "t_data\030\006 \003(\0132\021.NFMsg.EffectData\"\265\001\n\rReqA"
      "ckUseItem\022\032\n\004user\030\001 \002(\0132\014.NFMsg.Ident\022\037\n"
      "\titem_guid\030\002 \002(\0132\014.NFMsg.Ident\022&\n\013effect"
      "_data\030\003 \003(\0132\021.NFMsg.EffectData\022\037\n\004item\030\004"
      " \002(\0132\021.NFMsg.ItemStruct\022\036\n\010targetid\030\005 \002("
      "\0132\014.NFMsg.Ident\"\363\001\n\017ReqAckSwapScene\022;\n\rt"
      "ransfer_type\030\001 \002(\0162$.NFMsg.ReqAckSwapSce"
      "ne.EGameSwapType\022\020\n\010scene_id\030\002 \002(\005\022\017\n\007li"
      "ne_id\030\003 \002(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006"
      " \001(\002\022\014\n\004data\030\007 \001(\t\"Q\n\rEGameSwapType\022\017\n\013E"
      "GST_NARMAL\020\000\022\016\n\nEGST_CLONE\020\001\022\016\n\nEGST_ARE"
      "NA\020\002\022\017\n\013EGST_MIRROR\020\003\"\037\n\017ReqAckHomeScene"
      "\022\014\n\004data\030\001 \001(\t\"1\n\nItemStruct\022\017\n\007item_id\030"
      "\001 \002(\t\022\022\n\nitem_count\030\002 \002(\005\"\?\n\016CurrencyStr"
      "uct\022\025\n\rcurrency_type\030\001 \002(\005\022\026\n\016currency_c"
      "ount\030\002 \002(\005\"2\n\021ReqAckStartBattle\022\014\n\004gold\030"
      "\001 \002(\005\022\017\n\007diamond\030\002 \002(\005\"\016\n\014ReqEndBattle\"{"
      "\n\014AckEndBattle\022\013\n\003win\030\001 \002(\005\022\014\n\004star\030\002 \002("
      "\005\022\014\n\004gold\030\003 \002(\005\022\013\n\003exp\030\004 \002(\005\022\017\n\007diamond\030"
      "\005 \002(\005\022$\n\titem_list\030\006 \003(\0132\021.NFMsg.ItemStr"
      "uct\"2\n\017ReqPickDropItem\022\037\n\titem_guid\030\002 \002("
      "\0132\014.NFMsg.Ident\" \n\rReqAcceptTask\022\017\n\007task"
      "_id\030\001 \002(\014\"#\n\020ReqCompeleteTask\022\017\n\007task_id"
      "\030\001 \002(\014\"M\n\014ReqWearEquip\022\035\n\007equipid\030\001 \002(\0132"
      "\014.NFMsg.Ident\022\036\n\010Targetid\030\002 \002(\0132\014.NFMsg."
      "Ident\"M\n\014TakeOffEquip\022\035\n\007equipid\030\001 \002(\0132\014"
      ".NFMsg.Ident\022\036\n\010Targetid\030\002 \002(\0132\014.NFMsg.I"
      "dent\"\357\001\n\022ReqAckJoinActivity\022B\n\ractivity_"
      "type\030\001 \002(\0162+.NFMsg.ReqAckJoinActivity.EG"
      "ameActivityType\022I\n\021sub_activity_type\030\002 \002"
      "(\0162..NFMsg.ReqAckJoinActivity.EGameActiv"
      "itySubType\"!\n\021EGameActivityType\022\014\n\010EGAT_"
      "PVP\020\000\"\'\n\024EGameActivitySubType\022\017\n\013EGAT_NO"
      "RMAL\020\000\"G\n\021ReqAckCreateGuild\022\036\n\010guild_id\030"
      "\001 \002(\0132\014.NFMsg.Ident\022\022\n\nguild_name\030\002 \002(\t\""
      "$\n\016ReqSearchGuild\022\022\n\nguild_name\030\001 \002(\t\"\220\002"
      "\n\016AckSearchGuild\022;\n\nguild_list\030\001 \003(\0132\'.N"
      "FMsg.AckSearchGuild.SearchGuildObject\032\300\001"
      "\n\021SearchGuildObject\022\036\n\010guild_ID\030\001 \002(\0132\014."
      "NFMsg.Ident\022\022\n\nguild_name\030\002 \002(\t\022\022\n\nguild"
      "_icon\030\003 \002(\t\022\032\n\022guild_member_count\030\004 \002(\005\022"
      "\036\n\026guild_member_max_count\030\005 \002(\005\022\023\n\013guild"
      "_honor\030\006 \002(\005\022\022\n\nguild_rank\030\007 \002(\005\"E\n\017ReqA"
      "ckJoinGuild\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.Id"
      "ent\022\022\n\nguild_name\030\002 \002(\t\"F\n\020ReqAckLeaveGu"
      "ild\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.Ident\022\022\n\ng"
      "uild_name\030\002 \002(\t\"\332\001\n\024ReqAckOprGuildMember"
      "\022\036\n\010guild_id\030\001 \002(\0132\014.NFMsg.Ident\022\037\n\tmemb"
      "er_id\030\002 \002(\0132\014.NFMsg.Ident\022>\n\004type\030\003 \002(\0162"
      "0.NFMsg.ReqAckOprGuildMember.EGGuildMemb"
      "erOprType\"A\n\024EGGuildMemberOprType\022\r\n\tEGA"
      "T_DOWN\020\000\022\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\"5\n\023"
      "ReqEnterGuildEctype\022\036\n\010guild_id\030\001 \002(\0132\014."
      "NFMsg.Ident\"9\n\030ReqIntensifylevelToEquip\022"
      "\035\n\007equipid\030\001 \002(\0132\014.NFMsg.Ident\"I\n\030AckInt"
      "ensifylevelToEquip\022\035\n\007equipid\030\001 \002(\0132\014.NF"
      "Msg.Ident\022\016\n\006result\030\002 \002(\005\"/\n\016ReqHoleToEq"
      "uip\022\035\n\007equipid\030\001 \002(\0132\014.NFMsg.Ident\"\?\n\016Ac"
      "kHoleToEquip\022\035\n\007equipid\030\001 \002(\0132\014.NFMsg.Id"
      "ent\022\016\n\006result\030\002 \002(\005\"Z\n\024ReqInlaystoneToEq"
      "uip\022\035\n\007equipid\030\001 \002(\0132\014.NFMsg.Ident\022\017\n\007st"
      "oneid\030\002 \002(\014\022\022\n\nhole_index\030\003 \002(\005\"E\n\024AckIn"
      "laystoneToEquip\022\035\n\007equipid\030\001 \002(\0132\014.NFMsg"
      ".Ident\022\016\n\006result\030\002 \002(\005\"f\n\026ReqElementleve"
      "lToEquip\022\035\n\007equipid\030\001 \002(\0132\014.NFMsg.Ident\022"
      "-\n\014eElementType\030\002 \002(\0162\027.NFMsg.EGameEleme"
      "ntType\"G\n\026AckElementlevelToEquip\022\035\n\007equi"
      "pid\030\001 \002(\0132\014.NFMsg.Ident\022\016\n\006result\030\002 \002(\005\""
      "A\n\017ReqSetFightHero\022\034\n\006Heroid\030\001 \002(\0132\014.NFM"
      "sg.Ident\022\020\n\010FightPos\030\002 \002(\005\"3\n\016ReqMiningT"
      "itle\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\013\n\003opr\030\003 \002(\005\""
      ".\n\tTileState\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\013\n\003op"
      "r\030\003 \002(\005\"0\n\016AckMiningTitle\022\036\n\004tile\030\001 \003(\0132"
      "\020.NFMsg.TileState\"\022\n\020ReqSearchOppnent\"$\n"
      "\020AckSearchOppnent\022\020\n\010scene_id\030\001 \002(\005\"\201\001\n\013"
      "ReqSendMail\022\036\n\010reciever\030\001 \002(\0132\014.NFMsg.Id"
      "ent\022$\n\titem_list\030\002 \003(\0132\021.NFMsg.ItemStruc"
      "t\022,\n\rcurrency_list\030\003 \003(\0132\025.NFMsg.Currenc"
      "yStruct\"\271\001\n\017ReqSwitchServer\022\034\n\006selfid\030\001 "
      "\002(\0132\014.NFMsg.Ident\022\025\n\rself_serverid\030\002 \002(\003"
      "\022\027\n\017target_serverid\030\003 \002(\003\022\025\n\rgate_server"
      "id\030\004 \002(\003\022\017\n\007SceneID\030\005 \002(\003\022\037\n\tclient_id\030\006"
      " \002(\0132\014.NFMsg.Ident\022\017\n\007groupID\030\007 \002(\003\"v\n\017A"
      "ckSwitchServer\022\034\n\006selfid\030\001 \002(\0132\014.NFMsg.I"
      "dent\022\025\n\rself_serverid\030\002 \002(\003\022\027\n\017target_se"
      "rverid\030\003 \002(\003\022\025\n\rgate_serverid\030\004 \002(\003\"z\n\010T"
      "eamInfo\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022 "
      "\n\ncaptain_id\030\002 \002(\0132\014.NFMsg.Ident\022-\n\016team"
      "memberInfo\030\003 \003(\0132\025.NFMsg.TeammemberInfo\""
      "n\n\016TeammemberInfo\022\037\n\tplayer_id\030\001 \002(\0132\014.N"
      "FMsg.Ident\022\014\n\004name\030\002 \002(\t\022\016\n\006nLevel\030\003 \002(\005"
      "\022\013\n\003job\030\004 \002(\005\022\020\n\010HeadIcon\030\005 \002(\t\"U\n\020ReqAc"
      "kCreateTeam\022\035\n\007team_id\030\001 \002(\0132\014.NFMsg.Ide"
      "nt\022\"\n\txTeamInfo\030\002 \001(\0132\017.NFMsg.TeamInfo\"S"
      "\n\016ReqAckJoinTeam\022\035\n\007team_id\030\001 \002(\0132\014.NFMs"
      "g.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.NFMsg.TeamI"
      "nfo\"T\n\017ReqAckLeaveTeam\022\035\n\007team_id\030\001 \002(\0132"
      "\014.NFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.NFMsg"
      ".TeamInfo\"\350\002\n\023ReqAckOprTeamMember\022\035\n\007tea"
      "m_id\030\001 \002(\0132\014.NFMsg.Ident\022\037\n\tmember_id\030\002 "
      "\002(\0132\014.NFMsg.Ident\022<\n\004type\030\003 \002(\0162..NFMsg."
      "ReqAckOprTeamMember.EGTeamMemberOprType\022"
      "\"\n\txTeamInfo\030\004 \001(\0132\017.NFMsg.TeamInfo\"\256\001\n\023"
      "EGTeamMemberOprType\022\r\n\tEGAT_DOWN\020\000\022\013\n\007EG"
      "AT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_APPOINT\020\003"
      "\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020\005\022\024\n\020EGAT"
      "_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPLY\020\007\022\020\n\014EG"
      "AT_KICKOUT\020\010\"x\n\020ReqAckInviteTeam\022\035\n\007team"
      "_id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007self_id\030\002 \002(\013"
      "2\014.NFMsg.Ident\022&\n\020invite_target_id\030\003 \002(\013"
      "2\014.NFMsg.Ident\"\233\001\n\022ReqTeamEnterEctype\022\035\n"
      "\007team_id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007self_id\030"
      "\002 \002(\0132\014.NFMsg.Ident\022\021\n\tnEctypeID\030\003 \001(\005\022\020"
      "\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005\022\021\n\tnSe"
      "rverID\030\006 \001(\005\"\210\001\n\022AckTeamEnterEctype\022\035\n\007t"
      "eam_id\030\001 \002(\0132\014.NFMsg.Ident\022\035\n\007self_id\030\002 "
      "\002(\0132\014.NFMsg.Ident\022\021\n\tnEctypeID\030\003 \001(\005\022\020\n\010"
      "nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005\"k\n\021GridG"
      "uildBaseInfo\022\030\n\002id\030\001 \002(\0132\014.NFMsg.Ident\022\r"
      "\n\005level\030\002 \002(\005\022\r\n\005count\030\003 \002(\005\022\020\n\010resource"
      "\030\004 \002(\005\022\014\n\004icon\030\005 \002(\014\")\n\021ReqBigMapGridInf"
      "o\022\024\n\014map_title_id\030\001 \003(\014\"\272\001\n\022BigMapGridBa"
      "seInfo\022\n\n\002id\030\001 \002(\014\022,\n\nguild_info\030\002 \002(\0132\030"
      ".NFMsg.GridGuildBaseInfo\022\024\n\014kingwar_time"
      "\030\n \002(\005\022 \n\nkingwarrer\030\013 \002(\0132\014.NFMsg.Ident"
      "\022\024\n\014hurting_time\030\024 \002(\005\022\034\n\006hurter\030\025 \002(\0132\014"
      ".NFMsg.Ident\"z\n\016BigMapLeaveMsg\022\033\n\005owner\030"
      "\001 \002(\0132\014.NFMsg.Ident\022\022\n\nowner_name\030\002 \002(\014\022"
      "\020\n\010msg_data\030\003 \002(\014\022\020\n\010msg_time\030\004 \002(\005\022\023\n\013o"
      "wner_level\030\005 \002(\005\"\236\001\n\020BigMapWarHistory\022*\n"
      "\010red_info\030\001 \002(\0132\030.NFMsg.GridGuildBaseInf"
      "o\022+\n\tblue_info\030\002 \002(\0132\030.NFMsg.GridGuildBa"
      "seInfo\022\037\n\twinner_id\030\n \002(\0132\014.NFMsg.Ident\022"
      "\020\n\010war_time\030\013 \002(\005\"\323\001\n\024BigMapGridDetailIn"
      "fo\0221\n\016grid_base_info\030\001 \002(\0132\031.NFMsg.BigMa"
      "pGridBaseInfo\0220\n\016stay_guid_list\030\002 \003(\0132\030."
      "NFMsg.GridGuildBaseInfo\022(\n\tleave_msg\030\003 \003"
      "(\0132\025.NFMsg.BigMapLeaveMsg\022,\n\013war_history"
      "\030\004 \003(\0132\027.NFMsg.BigMapWarHistory\"B\n\021AckBi"
      "gMapGridInfo\022-\n\010map_data\030\001 \003(\0132\033.NFMsg.B"
      "igMapGridDetailInfo\"\017\n\rReqBigMapInfo\"B\n\r"
      "AckBigMapInfo\0221\n\016grid_base_info\030\001 \003(\0132\031."
      "NFMsg.BigMapGridBaseInfo\"F\n\016ReqHoldMapGr"
      "id\022\024\n\014map_title_id\030\001 \002(\014\022\036\n\010guild_id\030\002 \002"
      "(\0132\014.NFMsg.Ident\"\020\n\016AckHoldMapGrid\"P\n\016Re"
      "qLeaveMapMsg\022\024\n\014map_title_id\030\001 \002(\014\022(\n\tle"
      "ave_msg\030\002 \002(\0132\025.NFMsg.BigMapLeaveMsg\"\020\n\016"
      "AckLeaveMapMsg\"&\n\016ReqGetMapAward\022\024\n\014map_"
      "title_id\030\001 \002(\014\"\020\n\016AckGetMapAward\"%\n\rReqM"
      "apHunting\022\024\n\014map_title_id\030\001 \002(\014\"\017\n\rAckMa"
      "pHunting\"%\n\rReqMapKingWar\022\024\n\014map_title_i"
      "d\030\001 \002(\014\"\017\n\rAckMapKingWar\"\361\001\n\013PVPRoomInfo"
      "\022\023\n\013nCellStatus\030\001 \002(\005\022\034\n\006RoomID\030\002 \002(\0132\014."
      "NFMsg.Ident\022\020\n\010nPVPMode\030\003 \002(\005\022\021\n\tnPVPGra"
      "de\030\004 \002(\005\022\021\n\tMaxPalyer\030\005 \002(\005\022 \n\nxRedPlaye"
      "r\030\006 \003(\0132\014.NFMsg.Ident\022!\n\013xBluePlayer\030\007 \003"
      "(\0132\014.NFMsg.Ident\022\020\n\010serverid\030\010 \001(\003\022\017\n\007Sc"
      "eneID\030\t \001(\003\022\017\n\007groupID\030\n \001(\003\"\276\001\n\020ReqPVPA"
      "pplyMatch\022\035\n\007self_id\030\001 \002(\0132\014.NFMsg.Ident"
      "\022\020\n\010nPVPMode\030\002 \002(\005\022\r\n\005score\030\003 \001(\003\022\021\n\tApp"
      "lyType\030\004 \002(\005\022\035\n\007team_id\030\005 \001(\0132\014.NFMsg.Id"
      "ent\"8\n\nEApplyType\022\025\n\021EApplyType_Single\020\000"
      "\022\023\n\017EApplyType_Team\020\001\"|\n\020AckPVPApplyMatc"
      "h\022\035\n\007self_id\030\001 \002(\0132\014.NFMsg.Ident\022%\n\txRoo"
      "mInfo\030\002 \001(\0132\022.NFMsg.PVPRoomInfo\022\021\n\tApply"
      "Type\030\003 \002(\005\022\017\n\007nResult\030\004 \002(\005\"Z\n\022ReqCreate"
      "PVPEctype\022\035\n\007self_id\030\001 \002(\0132\014.NFMsg.Ident"
      "\022%\n\txRoomInfo\030\002 \002(\0132\022.NFMsg.PVPRoomInfo\""
      "m\n\022AckCreatePVPEctype\022\035\n\007self_id\030\001 \002(\0132\014"
      ".NFMsg.Ident\022%\n\txRoomInfo\030\002 \002(\0132\022.NFMsg."
      "PVPRoomInfo\022\021\n\tApplyType\030\003 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8510);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgShare.proto", &protobuf_RegisterTypes);
  ::protobuf_NFDefine_2eproto::AddDescriptors();
  ::protobuf_NFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NFMsgShare_2eproto
namespace NFMsg {
const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[0];
}
bool ReqAckSynData_SynType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSynData_SynType ReqAckSynData::EST_GROUP;
const ReqAckSynData_SynType ReqAckSynData::EST_SCENE;
const ReqAckSynData_SynType ReqAckSynData::EST_GUILD;
const ReqAckSynData_SynType ReqAckSynData::EST_FRIEND;
const ReqAckSynData_SynType ReqAckSynData::SynType_MIN;
const ReqAckSynData_SynType ReqAckSynData::SynType_MAX;
const int ReqAckSynData::SynType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_ChatContainer_ContainerType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[1];
}
bool ReqAckPlayerChat_ChatContainer_ContainerType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::EGCT_ITEM;
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::ContainerType_MIN;
const ReqAckPlayerChat_ChatContainer_ContainerType ReqAckPlayerChat_ChatContainer::ContainerType_MAX;
const int ReqAckPlayerChat_ChatContainer::ContainerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[2];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_GUILD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_PRIVATE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEAM;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_WORLD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[3];
}
bool EffectData_EResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EffectData_EResultType EffectData::EET_SUCCESS;
const EffectData_EResultType EffectData::EET_FAIL;
const EffectData_EResultType EffectData::EET_REFUSE;
const EffectData_EResultType EffectData::EResultType_MIN;
const EffectData_EResultType EffectData::EResultType_MAX;
const int EffectData::EResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[4];
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
const int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[5];
}
bool ReqAckJoinActivity_EGameActivityType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGAT_PVP;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MIN;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MAX;
const int ReqAckJoinActivity::EGameActivityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[6];
}
bool ReqAckJoinActivity_EGameActivitySubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGAT_NORMAL;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MIN;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MAX;
const int ReqAckJoinActivity::EGameActivitySubType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[7];
}
bool ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DOWN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_UP;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICK;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MIN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MAX;
const int ReqAckOprGuildMember::EGGuildMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[8];
}
bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_UP;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICK;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_APPOINT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_FIRE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DEMISE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_ACCEPTAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DENYAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICKOUT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MIN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MAX;
const int ReqAckOprTeamMember::EGTeamMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor() {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgShare_2eproto::file_level_enum_descriptors[9];
}
bool ReqPVPApplyMatch_EApplyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Single;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Team;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MIN;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MAX;
const int ReqPVPApplyMatch::EApplyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqEnterGameServer::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGameServer::kIdFieldNumber;
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqEnterGameServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_id_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqEnterGameServer.base);
  return *internal_default_instance();
}


void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
  }
  game_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEnterGameServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEnterGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEnterGameServer)
  return false;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // required int32 game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // required bytes name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEnterGameServer)
}

::google::protobuf::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // required bytes account = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required int32 game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // required bytes name = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  if (has_account()) {
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_name()) {
    // required bytes name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_id()) {
    // required .NFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (has_game_id()) {
    // required int32 game_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  return total_size;
}
size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required bytes name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required .NFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);

    // required int32 game_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000008u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(game_id_, other->game_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckEnterGameSuccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckEnterGameSuccess::ReqAckEnterGameSuccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckEnterGameSuccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckEnterGameSuccess)
}
ReqAckEnterGameSuccess::ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckEnterGameSuccess)
}

void ReqAckEnterGameSuccess::SharedCtor() {
}

ReqAckEnterGameSuccess::~ReqAckEnterGameSuccess() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckEnterGameSuccess)
  SharedDtor();
}

void ReqAckEnterGameSuccess::SharedDtor() {
}

void ReqAckEnterGameSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckEnterGameSuccess::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckEnterGameSuccess& ReqAckEnterGameSuccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckEnterGameSuccess.base);
  return *internal_default_instance();
}


void ReqAckEnterGameSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckEnterGameSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckEnterGameSuccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckEnterGameSuccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckEnterGameSuccess)
  return false;
#undef DO_
}

void ReqAckEnterGameSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckEnterGameSuccess)
}

::google::protobuf::uint8* ReqAckEnterGameSuccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckEnterGameSuccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckEnterGameSuccess)
  return target;
}

size_t ReqAckEnterGameSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckEnterGameSuccess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckEnterGameSuccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEnterGameSuccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckEnterGameSuccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckEnterGameSuccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckEnterGameSuccess)
    MergeFrom(*source);
  }
}

void ReqAckEnterGameSuccess::MergeFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqAckEnterGameSuccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEnterGameSuccess::CopyFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEnterGameSuccess::IsInitialized() const {
  return true;
}

void ReqAckEnterGameSuccess::Swap(ReqAckEnterGameSuccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckEnterGameSuccess::InternalSwap(ReqAckEnterGameSuccess* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckEnterGameSuccess::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHeartBeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqHeartBeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHeartBeat)
}
ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
}

void ReqHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqHeartBeat.base);
  return *internal_default_instance();
}


void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqHeartBeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqHeartBeat)
  return false;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqHeartBeat)
}

::google::protobuf::uint8* ReqHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHeartBeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHeartBeat)
  return target;
}

size_t ReqHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHeartBeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeartBeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqLeaveGameServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqLeaveGameServer.base);
  return *internal_default_instance();
}


void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqLeaveGameServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqLeaveGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqLeaveGameServer)
  return false;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqLeaveGameServer)
}

::google::protobuf::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveGameServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerEntryInfo::InitAsDefaultInstance() {
  ::NFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->object_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void PlayerEntryInfo::clear_object_guid() {
  if (object_guid_ != NULL) object_guid_->Clear();
  clear_has_object_guid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kXFieldNumber;
const int PlayerEntryInfo::kYFieldNumber;
const int PlayerEntryInfo::kZFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_PlayerEntryInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_config_id()) {
    config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_id()) {
    class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    object_guid_ = new ::NFMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_PlayerEntryInfo.base);
  return *internal_default_instance();
}


void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      config_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      class_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(object_guid_ != NULL);
      object_guid_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_state_) -
        reinterpret_cast<char*>(&x_)) + sizeof(player_state_));
  }
  scene_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PlayerEntryInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident object_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 career_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_career_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 player_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_player_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes config_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 scene_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes class_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PlayerEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PlayerEntryInfo)
  return false;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident object_guid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_object_guid(), output);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // required float z = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  // required int32 career_type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->career_type(), output);
  }

  // required int32 player_state = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->player_state(), output);
  }

  // required bytes config_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->config_id(), output);
  }

  // required int32 scene_id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->scene_id(), output);
  }

  // required bytes class_id = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->class_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PlayerEntryInfo)
}

::google::protobuf::uint8* PlayerEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PlayerEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident object_guid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_object_guid(), deterministic, target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // required float z = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  // required int32 career_type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->career_type(), target);
  }

  // required int32 player_state = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->player_state(), target);
  }

  // required bytes config_id = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->config_id(), target);
  }

  // required int32 scene_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->scene_id(), target);
  }

  // required bytes class_id = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->class_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  if (has_config_id()) {
    // required bytes config_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());
  }

  if (has_class_id()) {
    // required bytes class_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->class_id());
  }

  if (has_object_guid()) {
    // required .NFMsg.Ident object_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  if (has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 4;
    total_size += 1 + 4;
  }

  if (has_career_type()) {
    // required int32 career_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());
  }

  if (has_player_state()) {
    // required int32 player_state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());
  }

  if (has_scene_id()) {
    // required int32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  return total_size;
}
size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required bytes config_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());

    // required bytes class_id = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->class_id());

    // required .NFMsg.Ident object_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *object_guid_);

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required float z = 4;
    total_size += 1 + 4;

    // required int32 career_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());

    // required int32 player_state = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());

    // required int32 scene_id = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PlayerEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_config_id();
      config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_class_id();
      class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_object_guid()->::NFMsg::Ident::MergeFrom(from.object_guid());
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000040u) {
      career_type_ = from.career_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      player_state_ = from.player_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_scene_id(from.scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  if (has_object_guid()) {
    if (!this->object_guid_->IsInitialized()) return false;
  }
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  config_id_.Swap(&other->config_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class_id_.Swap(&other->class_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_guid_, other->object_guid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(career_type_, other->career_type_);
  swap(player_state_, other->player_state_);
  swap(scene_id_, other->scene_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerEntryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckPlayerEntryList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckPlayerEntryList.base);
  return *internal_default_instance();
}


void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPlayerEntryList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPlayerEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPlayerEntryList)
  return false;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPlayerEntryList)
}

::google::protobuf::uint8* AckPlayerEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerEntryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerEntryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->object_list())) return false;
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPlayerLeaveList::InitAsDefaultInstance() {
}
void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckPlayerLeaveList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckPlayerLeaveList.base);
  return *internal_default_instance();
}


void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPlayerLeaveList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPlayerLeaveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPlayerLeaveList)
  return false;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->object_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPlayerLeaveList)
}

::google::protobuf::uint8* AckPlayerLeaveList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerLeaveList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.Ident object_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerLeaveList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerLeaveList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->object_list())) return false;
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSynData::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckSynData_default_instance_._instance.get_mutable()->syser_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckSynData::clear_syser() {
  if (syser_ != NULL) syser_->Clear();
  clear_has_syser();
}
void ReqAckSynData::clear_object_list() {
  object_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSynData::kSyserFieldNumber;
const int ReqAckSynData::kObjectListFieldNumber;
const int ReqAckSynData::kDataFieldNumber;
const int ReqAckSynData::kSynTypeFieldNumber;
const int ReqAckSynData::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSynData::ReqAckSynData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckSynData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSynData)
}
ReqAckSynData::ReqAckSynData(const ReqAckSynData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_syser()) {
    syser_ = new ::NFMsg::Ident(*from.syser_);
  } else {
    syser_ = NULL;
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&syn_type_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(syn_type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSynData)
}

void ReqAckSynData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&syser_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&syser_)) + sizeof(msg_id_));
  syn_type_ = 1;
}

ReqAckSynData::~ReqAckSynData() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSynData)
  SharedDtor();
}

void ReqAckSynData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete syser_;
}

void ReqAckSynData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckSynData::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSynData& ReqAckSynData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckSynData.base);
  return *internal_default_instance();
}


void ReqAckSynData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(syser_ != NULL);
      syser_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    msg_id_ = 0;
    syn_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckSynData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckSynData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident syser = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_syser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident object_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckSynData_SynType_IsValid(value)) {
            set_syn_type(static_cast< ::NFMsg::ReqAckSynData_SynType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ESynMsgID msg_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ESynMsgID_IsValid(value)) {
            set_msg_id(static_cast< ::NFMsg::ESynMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckSynData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckSynData)
  return false;
#undef DO_
}

void ReqAckSynData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident syser = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_syser(), output);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->object_list(static_cast<int>(i)),
      output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->syn_type(), output);
  }

  // required .NFMsg.ESynMsgID msg_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckSynData)
}

::google::protobuf::uint8* ReqAckSynData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSynData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident syser = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_syser(), deterministic, target);
  }

  // repeated .NFMsg.Ident object_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->object_list(static_cast<int>(i)), deterministic, target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->syn_type(), target);
  }

  // required .NFMsg.ESynMsgID msg_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSynData)
  return target;
}

size_t ReqAckSynData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckSynData)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_syser()) {
    // required .NFMsg.Ident syser = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *syser_);
  }

  if (has_msg_id()) {
    // required .NFMsg.ESynMsgID msg_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  if (has_syn_type()) {
    // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());
  }

  return total_size;
}
size_t ReqAckSynData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSynData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .NFMsg.Ident syser = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *syser_);

    // required .NFMsg.ESynMsgID msg_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());

    // required .NFMsg.ReqAckSynData.SynType syn_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.Ident object_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSynData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSynData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSynData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSynData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSynData)
    MergeFrom(*source);
  }
}

void ReqAckSynData::MergeFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSynData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_syser()->::NFMsg::Ident::MergeFrom(from.syser());
    }
    if (cached_has_bits & 0x00000004u) {
      msg_id_ = from.msg_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      syn_type_ = from.syn_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckSynData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSynData::CopyFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSynData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->object_list())) return false;
  if (has_syser()) {
    if (!this->syser_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckSynData::Swap(ReqAckSynData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSynData::InternalSwap(ReqAckSynData* other) {
  using std::swap;
  CastToBase(&object_list_)->InternalSwap(CastToBase(&other->object_list_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(syser_, other->syser_);
  swap(msg_id_, other->msg_id_);
  swap(syn_type_, other->syn_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckSynData::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerMove::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerMove_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerMove::clear_mover() {
  if (mover_ != NULL) mover_->Clear();
  clear_has_mover();
}
void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerMove::kMoverFieldNumber;
const int ReqAckPlayerMove::kMoveTypeFieldNumber;
const int ReqAckPlayerMove::kTargetPosFieldNumber;
const int ReqAckPlayerMove::kSourcePosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerMove::ReqAckPlayerMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerMove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerMove)
}
ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      target_pos_(from.target_pos_),
      source_pos_(from.source_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = NULL;
  }
  movetype_ = from.movetype_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerMove)
}

void ReqAckPlayerMove::SharedCtor() {
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movetype_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(movetype_));
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerMove)
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerMove::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerMove.base);
  return *internal_default_instance();
}


void ReqAckPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_pos_.Clear();
  source_pos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mover_ != NULL);
    mover_->Clear();
  }
  movetype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident mover = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mover()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 moveType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_movetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Vector3 target_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_target_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Vector3 source_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_source_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerMove)
  return false;
#undef DO_
}

void ReqAckPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident mover = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mover(), output);
  }

  // required int32 moveType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // repeated .NFMsg.Vector3 target_pos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->target_pos(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.Vector3 source_pos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->source_pos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerMove)
}

::google::protobuf::uint8* ReqAckPlayerMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident mover = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mover(), deterministic, target);
  }

  // required int32 moveType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // repeated .NFMsg.Vector3 target_pos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->target_pos(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.Vector3 source_pos = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->source_pos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerMove)
  return target;
}

size_t ReqAckPlayerMove::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckPlayerMove)
  size_t total_size = 0;

  if (has_mover()) {
    // required .NFMsg.Ident mover = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  if (has_movetype()) {
    // required int32 moveType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movetype());
  }

  return total_size;
}
size_t ReqAckPlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident mover = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mover_);

    // required int32 moveType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.Vector3 target_pos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->target_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->target_pos(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.Vector3 source_pos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->source_pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->source_pos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerMove)
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mover()->::NFMsg::Ident::MergeFrom(from.mover());
    }
    if (cached_has_bits & 0x00000002u) {
      movetype_ = from.movetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->target_pos())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->source_pos())) return false;
  if (has_mover()) {
    if (!this->mover_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckPlayerMove::Swap(ReqAckPlayerMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerMove::InternalSwap(ReqAckPlayerMove* other) {
  using std::swap;
  CastToBase(&target_pos_)->InternalSwap(CastToBase(&other->target_pos_));
  CastToBase(&source_pos_)->InternalSwap(CastToBase(&other->source_pos_));
  swap(mover_, other->mover_);
  swap(movetype_, other->movetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerMove::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerChat_ChatContainer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat_ChatContainer::kConTainerTypeFieldNumber;
const int ReqAckPlayerChat_ChatContainer::kDataInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat_ChatContainer::ReqAckPlayerChat_ChatContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat_ChatContainer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat.ChatContainer)
}
ReqAckPlayerChat_ChatContainer::ReqAckPlayerChat_ChatContainer(const ReqAckPlayerChat_ChatContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_info()) {
    data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
  }
  containertype_ = from.containertype_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat.ChatContainer)
}

void ReqAckPlayerChat_ChatContainer::SharedCtor() {
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  containertype_ = 0;
}

ReqAckPlayerChat_ChatContainer::~ReqAckPlayerChat_ChatContainer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat.ChatContainer)
  SharedDtor();
}

void ReqAckPlayerChat_ChatContainer::SharedDtor() {
  data_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckPlayerChat_ChatContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat_ChatContainer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerChat_ChatContainer& ReqAckPlayerChat_ChatContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat_ChatContainer.base);
  return *internal_default_instance();
}


void ReqAckPlayerChat_ChatContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_info_.ClearNonDefaultToEmptyNoArena();
  }
  containertype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckPlayerChat_ChatContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ConTainerType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_containertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerChat.ChatContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerChat.ChatContainer)
  return false;
#undef DO_
}

void ReqAckPlayerChat_ChatContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ConTainerType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->containertype(), output);
  }

  // required bytes data_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerChat.ChatContainer)
}

::google::protobuf::uint8* ReqAckPlayerChat_ChatContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ConTainerType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->containertype(), target);
  }

  // required bytes data_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat.ChatContainer)
  return target;
}

size_t ReqAckPlayerChat_ChatContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  size_t total_size = 0;

  if (has_data_info()) {
    // required bytes data_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_info());
  }

  if (has_containertype()) {
    // required int32 ConTainerType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containertype());
  }

  return total_size;
}
size_t ReqAckPlayerChat_ChatContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_info());

    // required int32 ConTainerType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containertype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat_ChatContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat_ChatContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat_ChatContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat.ChatContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat.ChatContainer)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat_ChatContainer::MergeFrom(const ReqAckPlayerChat_ChatContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data_info();
      data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      containertype_ = from.containertype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckPlayerChat_ChatContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat_ChatContainer::CopyFrom(const ReqAckPlayerChat_ChatContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat_ChatContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqAckPlayerChat_ChatContainer::Swap(ReqAckPlayerChat_ChatContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat_ChatContainer::InternalSwap(ReqAckPlayerChat_ChatContainer* other) {
  using std::swap;
  data_info_.Swap(&other->data_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(containertype_, other->containertype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerChat_ChatContainer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckPlayerChat::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->chat_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->target_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckPlayerChat::clear_chat_id() {
  if (chat_id_ != NULL) chat_id_->Clear();
  clear_has_chat_id();
}
void ReqAckPlayerChat::clear_target_id() {
  if (target_id_ != NULL) target_id_->Clear();
  clear_has_target_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat::kChatIdFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
const int ReqAckPlayerChat::kChatNameFieldNumber;
const int ReqAckPlayerChat::kTargetIdFieldNumber;
const int ReqAckPlayerChat::kContainerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      container_data_(from.container_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_info()) {
    chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chat_name()) {
    chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
  }
  if (from.has_chat_id()) {
    chat_id_ = new ::NFMsg::Ident(*from.chat_id_);
  } else {
    chat_id_ = NULL;
  }
  if (from.has_target_id()) {
    target_id_ = new ::NFMsg::Ident(*from.target_id_);
  } else {
    target_id_ = NULL;
  }
  chat_type_ = from.chat_type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_id_)) + sizeof(chat_type_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chat_id_;
  if (this != internal_default_instance()) delete target_id_;
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckPlayerChat.base);
  return *internal_default_instance();
}


void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  container_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      chat_info_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      chat_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chat_id_ != NULL);
      chat_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(target_id_ != NULL);
      target_id_->Clear();
    }
  }
  chat_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckPlayerChat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chat_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value)) {
            set_chat_type(static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes chat_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes chat_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.Ident target_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_container_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckPlayerChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckPlayerChat)
  return false;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_chat_id(), output);
  }

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // required bytes chat_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->chat_info(), output);
  }

  // required bytes chat_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chat_name(), output);
  }

  // optional .NFMsg.Ident target_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_target_id(), output);
  }

  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->container_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->container_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckPlayerChat)
}

::google::protobuf::uint8* ReqAckPlayerChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_chat_id(), deterministic, target);
  }

  // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // required bytes chat_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_info(), target);
  }

  // required bytes chat_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chat_name(), target);
  }

  // optional .NFMsg.Ident target_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_target_id(), deterministic, target);
  }

  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->container_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->container_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  if (has_chat_info()) {
    // required bytes chat_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());
  }

  if (has_chat_name()) {
    // required bytes chat_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_name());
  }

  if (has_chat_id()) {
    // required .NFMsg.Ident chat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_id_);
  }

  if (has_chat_type()) {
    // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  return total_size;
}
size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required bytes chat_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());

    // required bytes chat_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_name());

    // required .NFMsg.Ident chat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chat_id_);

    // required .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.ReqAckPlayerChat.ChatContainer Container_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->container_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->container_data(static_cast<int>(i)));
    }
  }

  // optional .NFMsg.Ident target_id = 5;
  if (has_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *target_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  container_data_.MergeFrom(from.container_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chat_info();
      chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chat_name();
      chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chat_id()->::NFMsg::Ident::MergeFrom(from.chat_id());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_target_id()->::NFMsg::Ident::MergeFrom(from.target_id());
    }
    if (cached_has_bits & 0x00000010u) {
      chat_type_ = from.chat_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->container_data())) return false;
  if (has_chat_id()) {
    if (!this->chat_id_->IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  CastToBase(&container_data_)->InternalSwap(CastToBase(&other->container_data_));
  chat_info_.Swap(&other->chat_info_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_name_.Swap(&other->chat_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chat_id_, other->chat_id_);
  swap(target_id_, other->target_id_);
  swap(chat_type_, other->chat_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
  ::NFMsg::_EffectData_default_instance_._instance.get_mutable()->effect_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void EffectData::clear_effect_ident() {
  if (effect_ident_ != NULL) effect_ident_->Clear();
  clear_has_effect_ident();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectData::kEffectIdentFieldNumber;
const int EffectData::kEffectValueFieldNumber;
const int EffectData::kEffectRltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectData::EffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_EffectData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_effect_ident()) {
    effect_ident_ = new ::NFMsg::Ident(*from.effect_ident_);
  } else {
    effect_ident_ = NULL;
  }
  ::memcpy(&effect_value_, &from.effect_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_rlt_) -
    reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.EffectData)
}

void EffectData::SharedCtor() {
  ::memset(&effect_ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_ident_)) + sizeof(effect_rlt_));
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:NFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != internal_default_instance()) delete effect_ident_;
}

void EffectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EffectData& EffectData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_EffectData.base);
  return *internal_default_instance();
}


void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(effect_ident_ != NULL);
    effect_ident_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&effect_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_rlt_) -
        reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.EffectData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident effect_ident = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_effect_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 effect_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_effect_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.EffectData.EResultType effect_rlt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EffectData_EResultType_IsValid(value)) {
            set_effect_rlt(static_cast< ::NFMsg::EffectData_EResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.EffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.EffectData)
  return false;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident effect_ident = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_effect_ident(), output);
  }

  // required int32 effect_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // required .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_rlt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.EffectData)
}

::google::protobuf::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident effect_ident = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_effect_ident(), deterministic, target);
  }

  // required int32 effect_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // required .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_rlt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.EffectData)
  return target;
}

size_t EffectData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.EffectData)
  size_t total_size = 0;

  if (has_effect_ident()) {
    // required .NFMsg.Ident effect_ident = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *effect_ident_);
  }

  if (has_effect_value()) {
    // required int32 effect_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());
  }

  if (has_effect_rlt()) {
    // required .NFMsg.EffectData.EResultType effect_rlt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());
  }

  return total_size;
}
size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.EffectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Ident effect_ident = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *effect_ident_);

    // required int32 effect_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());

    // required .NFMsg.EffectData.EResultType effect_rlt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.EffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_effect_ident()->::NFMsg::Ident::MergeFrom(from.effect_ident());
    }
    if (cached_has_bits & 0x00000002u) {
      effect_value_ = from.effect_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      effect_rlt_ = from.effect_rlt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_effect_ident()) {
    if (!this->effect_ident_->IsInitialized()) return false;
  }
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  swap(effect_ident_, other->effect_ident_);
  swap(effect_value_, other->effect_value_);
  swap(effect_rlt_, other->effect_rlt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseSkill::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->now_pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->tar_pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
void ReqAckUseSkill::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
void ReqAckUseSkill::clear_now_pos() {
  if (now_pos_ != NULL) now_pos_->Clear();
  clear_has_now_pos();
}
void ReqAckUseSkill::clear_tar_pos() {
  if (tar_pos_ != NULL) tar_pos_->Clear();
  clear_has_tar_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kNowPosFieldNumber;
const int ReqAckUseSkill::kTarPosFieldNumber;
const int ReqAckUseSkill::kUseIndexFieldNumber;
const int ReqAckUseSkill::kEffectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseSkill.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseSkill)
}
ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skill_id()) {
    skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_now_pos()) {
    now_pos_ = new ::NFMsg::Vector3(*from.now_pos_);
  } else {
    now_pos_ = NULL;
  }
  if (from.has_tar_pos()) {
    tar_pos_ = new ::NFMsg::Vector3(*from.tar_pos_);
  } else {
    tar_pos_ = NULL;
  }
  use_index_ = from.use_index_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_index_) -
      reinterpret_cast<char*>(&user_)) + sizeof(use_index_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete now_pos_;
  if (this != internal_default_instance()) delete tar_pos_;
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseSkill.base);
  return *internal_default_instance();
}


void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      skill_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(now_pos_ != NULL);
      now_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tar_pos_ != NULL);
      tar_pos_->Clear();
    }
  }
  use_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckUseSkill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Vector3 now_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_now_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Vector3 tar_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tar_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 use_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_use_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckUseSkill)
  return false;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident user = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // required bytes skill_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->skill_id(), output);
  }

  // required .NFMsg.Vector3 now_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_now_pos(), output);
  }

  // required .NFMsg.Vector3 tar_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_tar_pos(), output);
  }

  // required int32 use_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->use_index(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->effect_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckUseSkill)
}

::google::protobuf::uint8* ReqAckUseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // required bytes skill_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->skill_id(), target);
  }

  // required .NFMsg.Vector3 now_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_now_pos(), deterministic, target);
  }

  // required .NFMsg.Vector3 tar_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_tar_pos(), deterministic, target);
  }

  // required int32 use_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->use_index(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseSkill)
  return target;
}

size_t ReqAckUseSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  if (has_skill_id()) {
    // required bytes skill_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_id());
  }

  if (has_user()) {
    // required .NFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (has_now_pos()) {
    // required .NFMsg.Vector3 now_pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *now_pos_);
  }

  if (has_tar_pos()) {
    // required .NFMsg.Vector3 tar_pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tar_pos_);
  }

  if (has_use_index()) {
    // required int32 use_index = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_index());
  }

  return total_size;
}
size_t ReqAckUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes skill_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_id());

    // required .NFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);

    // required .NFMsg.Vector3 now_pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *now_pos_);

    // required .NFMsg.Vector3 tar_pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tar_pos_);

    // required int32 use_index = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.EffectData effect_data = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_skill_id();
      skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_now_pos()->::NFMsg::Vector3::MergeFrom(from.now_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tar_pos()->::NFMsg::Vector3::MergeFrom(from.tar_pos());
    }
    if (cached_has_bits & 0x00000010u) {
      use_index_ = from.use_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effect_data())) return false;
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_now_pos()) {
    if (!this->now_pos_->IsInitialized()) return false;
  }
  if (has_tar_pos()) {
    if (!this->tar_pos_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  using std::swap;
  CastToBase(&effect_data_)->InternalSwap(CastToBase(&other->effect_data_));
  skill_id_.Swap(&other->skill_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(now_pos_, other->now_pos_);
  swap(tar_pos_, other->tar_pos_);
  swap(use_index_, other->use_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckUseItem::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::NFMsg::ItemStruct*>(
      ::NFMsg::ItemStruct::internal_default_instance());
  ::NFMsg::_ReqAckUseItem_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckUseItem::clear_user() {
  if (user_ != NULL) user_->Clear();
  clear_has_user();
}
void ReqAckUseItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->Clear();
  clear_has_item_guid();
}
void ReqAckUseItem::clear_targetid() {
  if (targetid_ != NULL) targetid_->Clear();
  clear_has_targetid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseItem::kUserFieldNumber;
const int ReqAckUseItem::kItemGuidFieldNumber;
const int ReqAckUseItem::kEffectDataFieldNumber;
const int ReqAckUseItem::kItemFieldNumber;
const int ReqAckUseItem::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseItem::ReqAckUseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseItem)
}
ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_item_guid()) {
    item_guid_ = new ::NFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = NULL;
  }
  if (from.has_item()) {
    item_ = new ::NFMsg::ItemStruct(*from.item_);
  } else {
    item_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::NFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseItem)
}

void ReqAckUseItem::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&user_)) + sizeof(targetid_));
}

ReqAckUseItem::~ReqAckUseItem() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseItem)
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete item_guid_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete targetid_;
}

void ReqAckUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckUseItem::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckUseItem& ReqAckUseItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckUseItem.base);
  return *internal_default_instance();
}


void ReqAckUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(item_guid_ != NULL);
      item_guid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(item_ != NULL);
      item_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(targetid_ != NULL);
      targetid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckUseItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident item_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.EffectData effect_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ItemStruct item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident targetid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckUseItem)
  return false;
#undef DO_
}

void ReqAckUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  // required .NFMsg.Ident item_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_item_guid(), output);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->effect_data(static_cast<int>(i)),
      output);
  }

  // required .NFMsg.ItemStruct item = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_item(), output);
  }

  // required .NFMsg.Ident targetid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckUseItem)
}

::google::protobuf::uint8* ReqAckUseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  // required .NFMsg.Ident item_guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_item_guid(), deterministic, target);
  }

  // repeated .NFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effect_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->effect_data(static_cast<int>(i)), deterministic, target);
  }

  // required .NFMsg.ItemStruct item = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_item(), deterministic, target);
  }

  // required .NFMsg.Ident targetid = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_targetid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseItem)
  return target;
}

size_t ReqAckUseItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckUseItem)
  size_t total_size = 0;

  if (has_user()) {
    // required .NFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (has_item_guid()) {
    // required .NFMsg.Ident item_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }

  if (has_item()) {
    // required .NFMsg.ItemStruct item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);
  }

  if (has_targetid()) {
    // required .NFMsg.Ident targetid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  return total_size;
}
size_t ReqAckUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .NFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);

    // required .NFMsg.Ident item_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);

    // required .NFMsg.ItemStruct item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_);

    // required .NFMsg.Ident targetid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.EffectData effect_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->effect_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effect_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseItem)
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user()->::NFMsg::Ident::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_item()->::NFMsg::ItemStruct::MergeFrom(from.item());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
    }
  }
}

void ReqAckUseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->effect_data())) return false;
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_item_guid()) {
    if (!this->item_guid_->IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item_->IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseItem::Swap(ReqAckUseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseItem::InternalSwap(ReqAckUseItem* other) {
  using std::swap;
  CastToBase(&effect_data_)->InternalSwap(CastToBase(&other->effect_data_));
  swap(user_, other->user_);
  swap(item_guid_, other->item_guid_);
  swap(item_, other->item_);
  swap(targetid_, other->targetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckUseItem::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckSwapScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
const int ReqAckSwapScene::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckSwapScene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSwapScene)
}
ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&transfer_type_, &from.transfer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckSwapScene.base);
  return *internal_default_instance();
}


void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&transfer_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckSwapScene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value)) {
            set_transfer_type(static_cast< ::NFMsg::ReqAckSwapScene_EGameSwapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 line_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_line_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ReqAckSwapScene.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckSwapScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckSwapScene)
  return false;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transfer_type(), output);
  }

  // required int32 scene_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // required int32 line_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  // optional string data = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckSwapScene.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckSwapScene)
}

::google::protobuf::uint8* ReqAckSwapScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSwapScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transfer_type(), target);
  }

  // required int32 scene_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // required int32 line_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // optional float x = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  // optional string data = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckSwapScene.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSwapScene)
  return target;
}

size_t ReqAckSwapScene::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  if (has_transfer_type()) {
    // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
  }

  if (has_scene_id()) {
    // required int32 scene_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  if (has_line_id()) {
    // required int32 line_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());
  }

  return total_size;
}
size_t ReqAckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required .NFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());

    // required int32 scene_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());

    // required int32 line_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string data = 7;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (_has_bits_[0 / 32] & 112u) {
    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSwapScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSwapScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSwapScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      transfer_type_ = from.transfer_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      scene_id_ = from.scene_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      line_id_ = from.line_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transfer_type_, other->transfer_type_);
  swap(scene_id_, other->scene_id_);
  swap(line_id_, other->line_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckHomeScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckHomeScene::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckHomeScene::ReqAckHomeScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckHomeScene.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckHomeScene)
}
ReqAckHomeScene::ReqAckHomeScene(const ReqAckHomeScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckHomeScene)
}

void ReqAckHomeScene::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqAckHomeScene::~ReqAckHomeScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckHomeScene)
  SharedDtor();
}

void ReqAckHomeScene::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAckHomeScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckHomeScene::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckHomeScene& ReqAckHomeScene::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckHomeScene.base);
  return *internal_default_instance();
}


void ReqAckHomeScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckHomeScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckHomeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckHomeScene)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ReqAckHomeScene.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckHomeScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckHomeScene)
  return false;
#undef DO_
}

void ReqAckHomeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckHomeScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckHomeScene.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckHomeScene)
}

::google::protobuf::uint8* ReqAckHomeScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckHomeScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckHomeScene.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckHomeScene)
  return target;
}

size_t ReqAckHomeScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckHomeScene)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckHomeScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckHomeScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckHomeScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckHomeScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckHomeScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckHomeScene)
    MergeFrom(*source);
  }
}

void ReqAckHomeScene::MergeFrom(const ReqAckHomeScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckHomeScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ReqAckHomeScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckHomeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckHomeScene::CopyFrom(const ReqAckHomeScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckHomeScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckHomeScene::IsInitialized() const {
  return true;
}

void ReqAckHomeScene::Swap(ReqAckHomeScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckHomeScene::InternalSwap(ReqAckHomeScene* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckHomeScene::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ItemStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemStruct::kItemIdFieldNumber;
const int ItemStruct::kItemCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemStruct::ItemStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ItemStruct)
}
ItemStruct::ItemStruct(const ItemStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_id()) {
    item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
  }
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ItemStruct)
}

void ItemStruct::SharedCtor() {
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
}

ItemStruct::~ItemStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.ItemStruct)
  SharedDtor();
}

void ItemStruct::SharedDtor() {
  item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ItemStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ItemStruct::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ItemStruct& ItemStruct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ItemStruct.base);
  return *internal_default_instance();
}


void ItemStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_id_.ClearNonDefaultToEmptyNoArena();
  }
  item_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ItemStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ItemStruct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_id().data(), static_cast<int>(this->item_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ItemStruct.item_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 item_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_item_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ItemStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ItemStruct)
  return false;
#undef DO_
}

void ItemStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_id().data(), static_cast<int>(this->item_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ItemStruct.item_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->item_id(), output);
  }

  // required int32 item_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ItemStruct)
}

::google::protobuf::uint8* ItemStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ItemStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_id().data(), static_cast<int>(this->item_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ItemStruct.item_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item_id(), target);
  }

  // required int32 item_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ItemStruct)
  return target;
}

size_t ItemStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ItemStruct)
  size_t total_size = 0;

  if (has_item_id()) {
    // required string item_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_id());
  }

  if (has_item_count()) {
    // required int32 item_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_count());
  }

  return total_size;
}
size_t ItemStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ItemStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string item_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_id());

    // required int32 item_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ItemStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const ItemStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ItemStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ItemStruct)
    MergeFrom(*source);
  }
}

void ItemStruct::MergeFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ItemStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_item_id();
      item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      item_count_ = from.item_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ItemStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemStruct::CopyFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ItemStruct::Swap(ItemStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemStruct::InternalSwap(ItemStruct* other) {
  using std::swap;
  item_id_.Swap(&other->item_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_count_, other->item_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ItemStruct::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurrencyStruct::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyStruct::kCurrencyTypeFieldNumber;
const int CurrencyStruct::kCurrencyCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyStruct::CurrencyStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_CurrencyStruct.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.CurrencyStruct)
}
CurrencyStruct::CurrencyStruct(const CurrencyStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currency_type_, &from.currency_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_count_) -
    reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.CurrencyStruct)
}

void CurrencyStruct::SharedCtor() {
  ::memset(&currency_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_count_) -
      reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
}

CurrencyStruct::~CurrencyStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.CurrencyStruct)
  SharedDtor();
}

void CurrencyStruct::SharedDtor() {
}

void CurrencyStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurrencyStruct::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurrencyStruct& CurrencyStruct::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_CurrencyStruct.base);
  return *internal_default_instance();
}


void CurrencyStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&currency_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_count_) -
        reinterpret_cast<char*>(&currency_type_)) + sizeof(currency_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurrencyStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.CurrencyStruct)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currency_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_currency_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 currency_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_currency_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.CurrencyStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.CurrencyStruct)
  return false;
#undef DO_
}

void CurrencyStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 currency_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currency_type(), output);
  }

  // required int32 currency_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.CurrencyStruct)
}

::google::protobuf::uint8* CurrencyStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.CurrencyStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 currency_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currency_type(), target);
  }

  // required int32 currency_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.CurrencyStruct)
  return target;
}

size_t CurrencyStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.CurrencyStruct)
  size_t total_size = 0;

  if (has_currency_type()) {
    // required int32 currency_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  if (has_currency_count()) {
    // required int32 currency_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_count());
  }

  return total_size;
}
size_t CurrencyStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.CurrencyStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 currency_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());

    // required int32 currency_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.CurrencyStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.CurrencyStruct)
    MergeFrom(*source);
  }
}

void CurrencyStruct::MergeFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.CurrencyStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      currency_type_ = from.currency_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      currency_count_ = from.currency_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CurrencyStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyStruct::CopyFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CurrencyStruct::Swap(CurrencyStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyStruct::InternalSwap(CurrencyStruct* other) {
  using std::swap;
  swap(currency_type_, other->currency_type_);
  swap(currency_count_, other->currency_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurrencyStruct::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckStartBattle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckStartBattle::kGoldFieldNumber;
const int ReqAckStartBattle::kDiamondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckStartBattle::ReqAckStartBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckStartBattle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckStartBattle)
}
ReqAckStartBattle::ReqAckStartBattle(const ReqAckStartBattle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&diamond_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(diamond_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckStartBattle)
}

void ReqAckStartBattle::SharedCtor() {
  ::memset(&gold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diamond_) -
      reinterpret_cast<char*>(&gold_)) + sizeof(diamond_));
}

ReqAckStartBattle::~ReqAckStartBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckStartBattle)
  SharedDtor();
}

void ReqAckStartBattle::SharedDtor() {
}

void ReqAckStartBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckStartBattle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckStartBattle& ReqAckStartBattle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckStartBattle.base);
  return *internal_default_instance();
}


void ReqAckStartBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckStartBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diamond_) -
        reinterpret_cast<char*>(&gold_)) + sizeof(diamond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckStartBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckStartBattle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 diamond = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_diamond();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckStartBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckStartBattle)
  return false;
#undef DO_
}

void ReqAckStartBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckStartBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 gold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gold(), output);
  }

  // required int32 diamond = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->diamond(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckStartBattle)
}

::google::protobuf::uint8* ReqAckStartBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckStartBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 gold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gold(), target);
  }

  // required int32 diamond = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->diamond(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckStartBattle)
  return target;
}

size_t ReqAckStartBattle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckStartBattle)
  size_t total_size = 0;

  if (has_gold()) {
    // required int32 gold = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_diamond()) {
    // required int32 diamond = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  return total_size;
}
size_t ReqAckStartBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckStartBattle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 gold = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 diamond = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckStartBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckStartBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckStartBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckStartBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckStartBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckStartBattle)
    MergeFrom(*source);
  }
}

void ReqAckStartBattle::MergeFrom(const ReqAckStartBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckStartBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000002u) {
      diamond_ = from.diamond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckStartBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckStartBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckStartBattle::CopyFrom(const ReqAckStartBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckStartBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckStartBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqAckStartBattle::Swap(ReqAckStartBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckStartBattle::InternalSwap(ReqAckStartBattle* other) {
  using std::swap;
  swap(gold_, other->gold_);
  swap(diamond_, other->diamond_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckStartBattle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqEndBattle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEndBattle::ReqEndBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqEndBattle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEndBattle)
}
ReqEndBattle::ReqEndBattle(const ReqEndBattle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEndBattle)
}

void ReqEndBattle::SharedCtor() {
}

ReqEndBattle::~ReqEndBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEndBattle)
  SharedDtor();
}

void ReqEndBattle::SharedDtor() {
}

void ReqEndBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqEndBattle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEndBattle& ReqEndBattle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqEndBattle.base);
  return *internal_default_instance();
}


void ReqEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEndBattle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEndBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEndBattle)
  return false;
#undef DO_
}

void ReqEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEndBattle)
}

::google::protobuf::uint8* ReqEndBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEndBattle)
  return target;
}

size_t ReqEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEndBattle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEndBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEndBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEndBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEndBattle)
    MergeFrom(*source);
  }
}

void ReqEndBattle::MergeFrom(const ReqEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEndBattle::CopyFrom(const ReqEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEndBattle::IsInitialized() const {
  return true;
}

void ReqEndBattle::Swap(ReqEndBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEndBattle::InternalSwap(ReqEndBattle* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqEndBattle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckEndBattle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckEndBattle::kWinFieldNumber;
const int AckEndBattle::kStarFieldNumber;
const int AckEndBattle::kGoldFieldNumber;
const int AckEndBattle::kExpFieldNumber;
const int AckEndBattle::kDiamondFieldNumber;
const int AckEndBattle::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckEndBattle::AckEndBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckEndBattle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckEndBattle)
}
AckEndBattle::AckEndBattle(const AckEndBattle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      item_list_(from.item_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&diamond_) -
    reinterpret_cast<char*>(&win_)) + sizeof(diamond_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckEndBattle)
}

void AckEndBattle::SharedCtor() {
  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diamond_) -
      reinterpret_cast<char*>(&win_)) + sizeof(diamond_));
}

AckEndBattle::~AckEndBattle() {
  // @@protoc_insertion_point(destructor:NFMsg.AckEndBattle)
  SharedDtor();
}

void AckEndBattle::SharedDtor() {
}

void AckEndBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckEndBattle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckEndBattle& AckEndBattle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckEndBattle.base);
  return *internal_default_instance();
}


void AckEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&win_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diamond_) -
        reinterpret_cast<char*>(&win_)) + sizeof(diamond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckEndBattle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 win = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_win();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 star = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_star();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 gold = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_exp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 diamond = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_diamond();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckEndBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckEndBattle)
  return false;
#undef DO_
}

void AckEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 win = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win(), output);
  }

  // required int32 star = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // required int32 gold = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  // required int32 exp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // required int32 diamond = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->diamond(), output);
  }

  // repeated .NFMsg.ItemStruct item_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->item_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckEndBattle)
}

::google::protobuf::uint8* AckEndBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckEndBattle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 win = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win(), target);
  }

  // required int32 star = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // required int32 gold = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  // required int32 exp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // required int32 diamond = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->diamond(), target);
  }

  // repeated .NFMsg.ItemStruct item_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckEndBattle)
  return target;
}

size_t AckEndBattle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckEndBattle)
  size_t total_size = 0;

  if (has_win()) {
    // required int32 win = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());
  }

  if (has_star()) {
    // required int32 star = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());
  }

  if (has_gold()) {
    // required int32 gold = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());
  }

  if (has_exp()) {
    // required int32 exp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  if (has_diamond()) {
    // required int32 diamond = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  return total_size;
}
size_t AckEndBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckEndBattle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 win = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->win());

    // required int32 star = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->star());

    // required int32 gold = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gold());

    // required int32 exp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());

    // required int32 diamond = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.ItemStruct item_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEndBattle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckEndBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckEndBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckEndBattle)
    MergeFrom(*source);
  }
}

void AckEndBattle::MergeFrom(const AckEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckEndBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      win_ = from.win_;
    }
    if (cached_has_bits & 0x00000002u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000010u) {
      diamond_ = from.diamond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEndBattle::CopyFrom(const AckEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEndBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  return true;
}

void AckEndBattle::Swap(AckEndBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckEndBattle::InternalSwap(AckEndBattle* other) {
  using std::swap;
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  swap(win_, other->win_);
  swap(star_, other->star_);
  swap(gold_, other->gold_);
  swap(exp_, other->exp_);
  swap(diamond_, other->diamond_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckEndBattle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqPickDropItem::InitAsDefaultInstance() {
  ::NFMsg::_ReqPickDropItem_default_instance_._instance.get_mutable()->item_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqPickDropItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->Clear();
  clear_has_item_guid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPickDropItem::kItemGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPickDropItem::ReqPickDropItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqPickDropItem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqPickDropItem)
}
ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_guid()) {
    item_guid_ = new ::NFMsg::Ident(*from.item_guid_);
  } else {
    item_guid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqPickDropItem)
}

void ReqPickDropItem::SharedCtor() {
  item_guid_ = NULL;
}

ReqPickDropItem::~ReqPickDropItem() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqPickDropItem)
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_guid_;
}

void ReqPickDropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqPickDropItem::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqPickDropItem& ReqPickDropItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqPickDropItem.base);
  return *internal_default_instance();
}


void ReqPickDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_guid_ != NULL);
    item_guid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqPickDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqPickDropItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident item_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqPickDropItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqPickDropItem)
  return false;
#undef DO_
}

void ReqPickDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident item_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_item_guid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqPickDropItem)
}

::google::protobuf::uint8* ReqPickDropItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqPickDropItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident item_guid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_item_guid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqPickDropItem)
  return target;
}

size_t ReqPickDropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqPickDropItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *item_guid_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPickDropItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPickDropItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqPickDropItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqPickDropItem)
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqPickDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_guid()) {
    mutable_item_guid()->::NFMsg::Ident::MergeFrom(from.item_guid());
  }
}

void ReqPickDropItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_item_guid()) {
    if (!this->item_guid_->IsInitialized()) return false;
  }
  return true;
}

void ReqPickDropItem::Swap(ReqPickDropItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPickDropItem::InternalSwap(ReqPickDropItem* other) {
  using std::swap;
  swap(item_guid_, other->item_guid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqPickDropItem::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAcceptTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAcceptTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAcceptTask::ReqAcceptTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAcceptTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAcceptTask)
}
ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_task_id()) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAcceptTask)
}

void ReqAcceptTask::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqAcceptTask::~ReqAcceptTask() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAcceptTask)
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqAcceptTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAcceptTask::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAcceptTask& ReqAcceptTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAcceptTask.base);
  return *internal_default_instance();
}


void ReqAcceptTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    task_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAcceptTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAcceptTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAcceptTask)
  return false;
#undef DO_
}

void ReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAcceptTask)
}

::google::protobuf::uint8* ReqAcceptTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAcceptTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAcceptTask)
  return target;
}

size_t ReqAcceptTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAcceptTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes task_id = 1;
  if (has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->task_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAcceptTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAcceptTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAcceptTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAcceptTask)
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAcceptTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    set_has_task_id();
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqAcceptTask::Swap(ReqAcceptTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAcceptTask::InternalSwap(ReqAcceptTask* other) {
  using std::swap;
  task_id_.Swap(&other->task_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAcceptTask::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCompeleteTask::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCompeleteTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCompeleteTask::ReqCompeleteTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqCompeleteTask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqCompeleteTask)
}
ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_task_id()) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCompeleteTask)
}

void ReqCompeleteTask::SharedCtor() {
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqCompeleteTask::~ReqCompeleteTask() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCompeleteTask)
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqCompeleteTask::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqCompeleteTask.base);
  return *internal_default_instance();
}


void ReqCompeleteTask::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    task_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqCompeleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqCompeleteTask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqCompeleteTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqCompeleteTask)
  return false;
#undef DO_
}

void ReqCompeleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqCompeleteTask)
}

::google::protobuf::uint8* ReqCompeleteTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCompeleteTask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCompeleteTask)
  return target;
}

size_t ReqCompeleteTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCompeleteTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes task_id = 1;
  if (has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->task_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCompeleteTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCompeleteTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCompeleteTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCompeleteTask)
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCompeleteTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    set_has_task_id();
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
}

void ReqCompeleteTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqCompeleteTask::Swap(ReqCompeleteTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCompeleteTask::InternalSwap(ReqCompeleteTask* other) {
  using std::swap;
  task_id_.Swap(&other->task_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqCompeleteTask::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqWearEquip::InitAsDefaultInstance() {
  ::NFMsg::_ReqWearEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqWearEquip_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqWearEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
void ReqWearEquip::clear_targetid() {
  if (targetid_ != NULL) targetid_->Clear();
  clear_has_targetid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWearEquip::kEquipidFieldNumber;
const int ReqWearEquip::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWearEquip::ReqWearEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqWearEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqWearEquip)
}
ReqWearEquip::ReqWearEquip(const ReqWearEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::NFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqWearEquip)
}

void ReqWearEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(targetid_));
}

ReqWearEquip::~ReqWearEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqWearEquip)
  SharedDtor();
}

void ReqWearEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
  if (this != internal_default_instance()) delete targetid_;
}

void ReqWearEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqWearEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqWearEquip& ReqWearEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqWearEquip.base);
  return *internal_default_instance();
}


void ReqWearEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqWearEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(equipid_ != NULL);
      equipid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(targetid_ != NULL);
      targetid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqWearEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqWearEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident Targetid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqWearEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqWearEquip)
  return false;
#undef DO_
}

void ReqWearEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqWearEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required .NFMsg.Ident Targetid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqWearEquip)
}

::google::protobuf::uint8* ReqWearEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqWearEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required .NFMsg.Ident Targetid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_targetid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqWearEquip)
  return target;
}

size_t ReqWearEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqWearEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_targetid()) {
    // required .NFMsg.Ident Targetid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  return total_size;
}
size_t ReqWearEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqWearEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required .NFMsg.Ident Targetid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqWearEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqWearEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqWearEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWearEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqWearEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqWearEquip)
    MergeFrom(*source);
  }
}

void ReqWearEquip::MergeFrom(const ReqWearEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqWearEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
    }
  }
}

void ReqWearEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqWearEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWearEquip::CopyFrom(const ReqWearEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqWearEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWearEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid_->IsInitialized()) return false;
  }
  return true;
}

void ReqWearEquip::Swap(ReqWearEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWearEquip::InternalSwap(ReqWearEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(targetid_, other->targetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqWearEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TakeOffEquip::InitAsDefaultInstance() {
  ::NFMsg::_TakeOffEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_TakeOffEquip_default_instance_._instance.get_mutable()->targetid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void TakeOffEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
void TakeOffEquip::clear_targetid() {
  if (targetid_ != NULL) targetid_->Clear();
  clear_has_targetid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeOffEquip::kEquipidFieldNumber;
const int TakeOffEquip::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeOffEquip::TakeOffEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_TakeOffEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TakeOffEquip)
}
TakeOffEquip::TakeOffEquip(const TakeOffEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  if (from.has_targetid()) {
    targetid_ = new ::NFMsg::Ident(*from.targetid_);
  } else {
    targetid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.TakeOffEquip)
}

void TakeOffEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targetid_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(targetid_));
}

TakeOffEquip::~TakeOffEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.TakeOffEquip)
  SharedDtor();
}

void TakeOffEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
  if (this != internal_default_instance()) delete targetid_;
}

void TakeOffEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TakeOffEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeOffEquip& TakeOffEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_TakeOffEquip.base);
  return *internal_default_instance();
}


void TakeOffEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TakeOffEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(equipid_ != NULL);
      equipid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(targetid_ != NULL);
      targetid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TakeOffEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.TakeOffEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident Targetid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.TakeOffEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.TakeOffEquip)
  return false;
#undef DO_
}

void TakeOffEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.TakeOffEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required .NFMsg.Ident Targetid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_targetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.TakeOffEquip)
}

::google::protobuf::uint8* TakeOffEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TakeOffEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required .NFMsg.Ident Targetid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_targetid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TakeOffEquip)
  return target;
}

size_t TakeOffEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.TakeOffEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_targetid()) {
    // required .NFMsg.Ident Targetid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);
  }

  return total_size;
}
size_t TakeOffEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TakeOffEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required .NFMsg.Ident Targetid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TakeOffEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TakeOffEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeOffEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeOffEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TakeOffEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TakeOffEquip)
    MergeFrom(*source);
  }
}

void TakeOffEquip::MergeFrom(const TakeOffEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TakeOffEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_targetid()->::NFMsg::Ident::MergeFrom(from.targetid());
    }
  }
}

void TakeOffEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TakeOffEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeOffEquip::CopyFrom(const TakeOffEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TakeOffEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeOffEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid_->IsInitialized()) return false;
  }
  return true;
}

void TakeOffEquip::Swap(TakeOffEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeOffEquip::InternalSwap(TakeOffEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(targetid_, other->targetid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TakeOffEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinActivity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinActivity::kActivityTypeFieldNumber;
const int ReqAckJoinActivity::kSubActivityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinActivity::ReqAckJoinActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinActivity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckJoinActivity)
}
ReqAckJoinActivity::ReqAckJoinActivity(const ReqAckJoinActivity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activity_type_, &from.activity_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_activity_type_) -
    reinterpret_cast<char*>(&activity_type_)) + sizeof(sub_activity_type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckJoinActivity)
}

void ReqAckJoinActivity::SharedCtor() {
  ::memset(&activity_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_activity_type_) -
      reinterpret_cast<char*>(&activity_type_)) + sizeof(sub_activity_type_));
}

ReqAckJoinActivity::~ReqAckJoinActivity() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckJoinActivity)
  SharedDtor();
}

void ReqAckJoinActivity::SharedDtor() {
}

void ReqAckJoinActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckJoinActivity::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinActivity& ReqAckJoinActivity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinActivity.base);
  return *internal_default_instance();
}


void ReqAckJoinActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckJoinActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&activity_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_activity_type_) -
        reinterpret_cast<char*>(&activity_type_)) + sizeof(sub_activity_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckJoinActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckJoinActivity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckJoinActivity_EGameActivityType_IsValid(value)) {
            set_activity_type(static_cast< ::NFMsg::ReqAckJoinActivity_EGameActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckJoinActivity_EGameActivitySubType_IsValid(value)) {
            set_sub_activity_type(static_cast< ::NFMsg::ReqAckJoinActivity_EGameActivitySubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckJoinActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckJoinActivity)
  return false;
#undef DO_
}

void ReqAckJoinActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckJoinActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity_type(), output);
  }

  // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sub_activity_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckJoinActivity)
}

::google::protobuf::uint8* ReqAckJoinActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckJoinActivity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity_type(), target);
  }

  // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sub_activity_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckJoinActivity)
  return target;
}

size_t ReqAckJoinActivity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckJoinActivity)
  size_t total_size = 0;

  if (has_activity_type()) {
    // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_type());
  }

  if (has_sub_activity_type()) {
    // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_activity_type());
  }

  return total_size;
}
size_t ReqAckJoinActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckJoinActivity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_type());

    // required .NFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_activity_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckJoinActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckJoinActivity)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinActivity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckJoinActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckJoinActivity)
    MergeFrom(*source);
  }
}

void ReqAckJoinActivity::MergeFrom(const ReqAckJoinActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckJoinActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      activity_type_ = from.activity_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      sub_activity_type_ = from.sub_activity_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckJoinActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckJoinActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinActivity::CopyFrom(const ReqAckJoinActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckJoinActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ReqAckJoinActivity::Swap(ReqAckJoinActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinActivity::InternalSwap(ReqAckJoinActivity* other) {
  using std::swap;
  swap(activity_type_, other->activity_type_);
  swap(sub_activity_type_, other->sub_activity_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckJoinActivity::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateGuild::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCreateGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckCreateGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateGuild::kGuildIdFieldNumber;
const int ReqAckCreateGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateGuild::ReqAckCreateGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckCreateGuild.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCreateGuild)
}
ReqAckCreateGuild::ReqAckCreateGuild(const ReqAckCreateGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCreateGuild)
}

void ReqAckCreateGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
}

ReqAckCreateGuild::~ReqAckCreateGuild() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCreateGuild)
  SharedDtor();
}

void ReqAckCreateGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqAckCreateGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckCreateGuild::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateGuild& ReqAckCreateGuild::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckCreateGuild.base);
  return *internal_default_instance();
}


void ReqAckCreateGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCreateGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(guild_id_ != NULL);
      guild_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckCreateGuild)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ReqAckCreateGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckCreateGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckCreateGuild)
  return false;
#undef DO_
}

void ReqAckCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckCreateGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guild_id(), output);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckCreateGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckCreateGuild)
}

::google::protobuf::uint8* ReqAckCreateGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCreateGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guild_id(), deterministic, target);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckCreateGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCreateGuild)
  return target;
}

size_t ReqAckCreateGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckCreateGuild)
  size_t total_size = 0;

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  if (has_guild_id()) {
    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  return total_size;
}
size_t ReqAckCreateGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCreateGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCreateGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCreateGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCreateGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCreateGuild)
    MergeFrom(*source);
  }
}

void ReqAckCreateGuild::MergeFrom(const ReqAckCreateGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCreateGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
}

void ReqAckCreateGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCreateGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateGuild::CopyFrom(const ReqAckCreateGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCreateGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateGuild::Swap(ReqAckCreateGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateGuild::InternalSwap(ReqAckCreateGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckCreateGuild::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSearchGuild::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSearchGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSearchGuild::ReqSearchGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSearchGuild.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSearchGuild)
}
ReqSearchGuild::ReqSearchGuild(const ReqSearchGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSearchGuild)
}

void ReqSearchGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqSearchGuild::~ReqSearchGuild() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSearchGuild)
  SharedDtor();
}

void ReqSearchGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqSearchGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSearchGuild::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSearchGuild& ReqSearchGuild::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSearchGuild.base);
  return *internal_default_instance();
}


void ReqSearchGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guild_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSearchGuild)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guild_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ReqSearchGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSearchGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSearchGuild)
  return false;
#undef DO_
}

void ReqSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string guild_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqSearchGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSearchGuild)
}

::google::protobuf::uint8* ReqSearchGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string guild_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqSearchGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSearchGuild)
  return target;
}

size_t ReqSearchGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSearchGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string guild_name = 1;
  if (has_guild_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSearchGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSearchGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSearchGuild)
    MergeFrom(*source);
  }
}

void ReqSearchGuild::MergeFrom(const ReqSearchGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guild_name()) {
    set_has_guild_name();
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
}

void ReqSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchGuild::CopyFrom(const ReqSearchGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqSearchGuild::Swap(ReqSearchGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSearchGuild::InternalSwap(ReqSearchGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSearchGuild::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchGuild_SearchGuildObject::InitAsDefaultInstance() {
  ::NFMsg::_AckSearchGuild_SearchGuildObject_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckSearchGuild_SearchGuildObject::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchGuild_SearchGuildObject::kGuildIDFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildNameFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildIconFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberMaxCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildHonorFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchGuild_SearchGuildObject.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchGuild.SearchGuildObject)
}
AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject(const AckSearchGuild_SearchGuildObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_icon()) {
    guild_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_icon_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  ::memcpy(&guild_member_count_, &from.guild_member_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_rank_) -
    reinterpret_cast<char*>(&guild_member_count_)) + sizeof(guild_rank_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchGuild.SearchGuildObject)
}

void AckSearchGuild_SearchGuildObject::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guild_rank_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_rank_));
}

AckSearchGuild_SearchGuildObject::~AckSearchGuild_SearchGuildObject() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchGuild.SearchGuildObject)
  SharedDtor();
}

void AckSearchGuild_SearchGuildObject::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void AckSearchGuild_SearchGuildObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSearchGuild_SearchGuildObject::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchGuild_SearchGuildObject& AckSearchGuild_SearchGuildObject::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSearchGuild_SearchGuildObject.base);
  return *internal_default_instance();
}


void AckSearchGuild_SearchGuildObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchGuild.SearchGuildObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      guild_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      guild_icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(guild_id_ != NULL);
      guild_id_->Clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&guild_member_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_rank_) -
        reinterpret_cast<char*>(&guild_member_count_)) + sizeof(guild_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckSearchGuild_SearchGuildObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSearchGuild.SearchGuildObject)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_ID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.AckSearchGuild.SearchGuildObject.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string guild_icon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_icon().data(), static_cast<int>(this->guild_icon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 guild_member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_guild_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 guild_member_max_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_guild_member_max_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 guild_honor = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_guild_honor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_honor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 guild_rank = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_guild_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSearchGuild.SearchGuildObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSearchGuild.SearchGuildObject)
  return false;
#undef DO_
}

void AckSearchGuild_SearchGuildObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSearchGuild.SearchGuildObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_ID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guild_id(), output);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.AckSearchGuild.SearchGuildObject.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  // required string guild_icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_icon().data(), static_cast<int>(this->guild_icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guild_icon(), output);
  }

  // required int32 guild_member_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guild_member_count(), output);
  }

  // required int32 guild_member_max_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_member_max_count(), output);
  }

  // required int32 guild_honor = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guild_honor(), output);
  }

  // required int32 guild_rank = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSearchGuild.SearchGuildObject)
}

::google::protobuf::uint8* AckSearchGuild_SearchGuildObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchGuild.SearchGuildObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_ID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guild_id(), deterministic, target);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.AckSearchGuild.SearchGuildObject.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // required string guild_icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_icon().data(), static_cast<int>(this->guild_icon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_icon(), target);
  }

  // required int32 guild_member_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guild_member_count(), target);
  }

  // required int32 guild_member_max_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_member_max_count(), target);
  }

  // required int32 guild_honor = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guild_honor(), target);
  }

  // required int32 guild_rank = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchGuild.SearchGuildObject)
  return target;
}

size_t AckSearchGuild_SearchGuildObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckSearchGuild.SearchGuildObject)
  size_t total_size = 0;

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  if (has_guild_icon()) {
    // required string guild_icon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_icon());
  }

  if (has_guild_id()) {
    // required .NFMsg.Ident guild_ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  if (has_guild_member_count()) {
    // required int32 guild_member_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_count());
  }

  if (has_guild_member_max_count()) {
    // required int32 guild_member_max_count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_max_count());
  }

  if (has_guild_honor()) {
    // required int32 guild_honor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_honor());
  }

  if (has_guild_rank()) {
    // required int32 guild_rank = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_rank());
  }

  return total_size;
}
size_t AckSearchGuild_SearchGuildObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchGuild.SearchGuildObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

    // required string guild_icon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_icon());

    // required .NFMsg.Ident guild_ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);

    // required int32 guild_member_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_count());

    // required int32 guild_member_max_count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_max_count());

    // required int32 guild_honor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_honor());

    // required int32 guild_rank = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_rank());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchGuild.SearchGuildObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchGuild_SearchGuildObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchGuild_SearchGuildObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchGuild.SearchGuildObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchGuild.SearchGuildObject)
    MergeFrom(*source);
  }
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const AckSearchGuild_SearchGuildObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchGuild.SearchGuildObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_guild_icon();
      guild_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (cached_has_bits & 0x00000008u) {
      guild_member_count_ = from.guild_member_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      guild_member_max_count_ = from.guild_member_max_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      guild_honor_ = from.guild_honor_;
    }
    if (cached_has_bits & 0x00000040u) {
      guild_rank_ = from.guild_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchGuild.SearchGuildObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const AckSearchGuild_SearchGuildObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchGuild.SearchGuildObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild_SearchGuildObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void AckSearchGuild_SearchGuildObject::Swap(AckSearchGuild_SearchGuildObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchGuild_SearchGuildObject::InternalSwap(AckSearchGuild_SearchGuildObject* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guild_icon_.Swap(&other->guild_icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(guild_member_count_, other->guild_member_count_);
  swap(guild_member_max_count_, other->guild_member_max_count_);
  swap(guild_honor_, other->guild_honor_);
  swap(guild_rank_, other->guild_rank_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSearchGuild_SearchGuildObject::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchGuild::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchGuild::kGuildListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchGuild::AckSearchGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchGuild.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchGuild)
}
AckSearchGuild::AckSearchGuild(const AckSearchGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      guild_list_(from.guild_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchGuild)
}

void AckSearchGuild::SharedCtor() {
}

AckSearchGuild::~AckSearchGuild() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchGuild)
  SharedDtor();
}

void AckSearchGuild::SharedDtor() {
}

void AckSearchGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSearchGuild::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchGuild& AckSearchGuild::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSearchGuild.base);
  return *internal_default_instance();
}


void AckSearchGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guild_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSearchGuild)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_guild_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSearchGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSearchGuild)
  return false;
#undef DO_
}

void AckSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->guild_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->guild_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSearchGuild)
}

::google::protobuf::uint8* AckSearchGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->guild_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->guild_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchGuild)
  return target;
}

size_t AckSearchGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->guild_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->guild_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchGuild)
    MergeFrom(*source);
  }
}

void AckSearchGuild::MergeFrom(const AckSearchGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guild_list_.MergeFrom(from.guild_list_);
}

void AckSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild::CopyFrom(const AckSearchGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->guild_list())) return false;
  return true;
}

void AckSearchGuild::Swap(AckSearchGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchGuild::InternalSwap(AckSearchGuild* other) {
  using std::swap;
  CastToBase(&guild_list_)->InternalSwap(CastToBase(&other->guild_list_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSearchGuild::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinGuild::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckJoinGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckJoinGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinGuild::kGuildIdFieldNumber;
const int ReqAckJoinGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinGuild::ReqAckJoinGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinGuild.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckJoinGuild)
}
ReqAckJoinGuild::ReqAckJoinGuild(const ReqAckJoinGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckJoinGuild)
}

void ReqAckJoinGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
}

ReqAckJoinGuild::~ReqAckJoinGuild() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckJoinGuild)
  SharedDtor();
}

void ReqAckJoinGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqAckJoinGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckJoinGuild::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinGuild& ReqAckJoinGuild::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinGuild.base);
  return *internal_default_instance();
}


void ReqAckJoinGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckJoinGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(guild_id_ != NULL);
      guild_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckJoinGuild)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ReqAckJoinGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckJoinGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckJoinGuild)
  return false;
#undef DO_
}

void ReqAckJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckJoinGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guild_id(), output);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckJoinGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckJoinGuild)
}

::google::protobuf::uint8* ReqAckJoinGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckJoinGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guild_id(), deterministic, target);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckJoinGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckJoinGuild)
  return target;
}

size_t ReqAckJoinGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckJoinGuild)
  size_t total_size = 0;

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  if (has_guild_id()) {
    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  return total_size;
}
size_t ReqAckJoinGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckJoinGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckJoinGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckJoinGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckJoinGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckJoinGuild)
    MergeFrom(*source);
  }
}

void ReqAckJoinGuild::MergeFrom(const ReqAckJoinGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckJoinGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
}

void ReqAckJoinGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckJoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinGuild::CopyFrom(const ReqAckJoinGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckJoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinGuild::Swap(ReqAckJoinGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinGuild::InternalSwap(ReqAckJoinGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckJoinGuild::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckLeaveGuild::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckLeaveGuild_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckLeaveGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveGuild::kGuildIdFieldNumber;
const int ReqAckLeaveGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveGuild::ReqAckLeaveGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckLeaveGuild.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckLeaveGuild)
}
ReqAckLeaveGuild::ReqAckLeaveGuild(const ReqAckLeaveGuild& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckLeaveGuild)
}

void ReqAckLeaveGuild::SharedCtor() {
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
}

ReqAckLeaveGuild::~ReqAckLeaveGuild() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckLeaveGuild)
  SharedDtor();
}

void ReqAckLeaveGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqAckLeaveGuild::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckLeaveGuild::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckLeaveGuild& ReqAckLeaveGuild::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckLeaveGuild.base);
  return *internal_default_instance();
}


void ReqAckLeaveGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckLeaveGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(guild_id_ != NULL);
      guild_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckLeaveGuild)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), static_cast<int>(this->guild_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.ReqAckLeaveGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckLeaveGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckLeaveGuild)
  return false;
#undef DO_
}

void ReqAckLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckLeaveGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guild_id(), output);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckLeaveGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckLeaveGuild)
}

::google::protobuf::uint8* ReqAckLeaveGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckLeaveGuild)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guild_id(), deterministic, target);
  }

  // required string guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), static_cast<int>(this->guild_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.ReqAckLeaveGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckLeaveGuild)
  return target;
}

size_t ReqAckLeaveGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckLeaveGuild)
  size_t total_size = 0;

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  if (has_guild_id()) {
    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  return total_size;
}
size_t ReqAckLeaveGuild::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckLeaveGuild)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckLeaveGuild)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveGuild* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckLeaveGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckLeaveGuild)
    MergeFrom(*source);
  }
}

void ReqAckLeaveGuild::MergeFrom(const ReqAckLeaveGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckLeaveGuild)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
}

void ReqAckLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckLeaveGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveGuild::CopyFrom(const ReqAckLeaveGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckLeaveGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveGuild::Swap(ReqAckLeaveGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveGuild::InternalSwap(ReqAckLeaveGuild* other) {
  using std::swap;
  guild_name_.Swap(&other->guild_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckLeaveGuild::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprGuildMember::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckOprGuildMember_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprGuildMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckOprGuildMember::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
void ReqAckOprGuildMember::clear_member_id() {
  if (member_id_ != NULL) member_id_->Clear();
  clear_has_member_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprGuildMember::kGuildIdFieldNumber;
const int ReqAckOprGuildMember::kMemberIdFieldNumber;
const int ReqAckOprGuildMember::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprGuildMember::ReqAckOprGuildMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckOprGuildMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckOprGuildMember)
}
ReqAckOprGuildMember::ReqAckOprGuildMember(const ReqAckOprGuildMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  if (from.has_member_id()) {
    member_id_ = new ::NFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckOprGuildMember)
}

void ReqAckOprGuildMember::SharedCtor() {
  ::memset(&guild_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&guild_id_)) + sizeof(type_));
}

ReqAckOprGuildMember::~ReqAckOprGuildMember() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckOprGuildMember)
  SharedDtor();
}

void ReqAckOprGuildMember::SharedDtor() {
  if (this != internal_default_instance()) delete guild_id_;
  if (this != internal_default_instance()) delete member_id_;
}

void ReqAckOprGuildMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckOprGuildMember::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprGuildMember& ReqAckOprGuildMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckOprGuildMember.base);
  return *internal_default_instance();
}


void ReqAckOprGuildMember::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckOprGuildMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(guild_id_ != NULL);
      guild_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_id_ != NULL);
      member_id_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckOprGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckOprGuildMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckOprGuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckOprGuildMember)
  return false;
#undef DO_
}

void ReqAckOprGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckOprGuildMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guild_id(), output);
  }

  // required .NFMsg.Ident member_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_member_id(), output);
  }

  // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckOprGuildMember)
}

::google::protobuf::uint8* ReqAckOprGuildMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckOprGuildMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guild_id(), deterministic, target);
  }

  // required .NFMsg.Ident member_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_member_id(), deterministic, target);
  }

  // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckOprGuildMember)
  return target;
}

size_t ReqAckOprGuildMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckOprGuildMember)
  size_t total_size = 0;

  if (has_guild_id()) {
    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  if (has_member_id()) {
    // required .NFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  if (has_type()) {
    // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t ReqAckOprGuildMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckOprGuildMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);

    // required .NFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);

    // required .NFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckOprGuildMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckOprGuildMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprGuildMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprGuildMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckOprGuildMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckOprGuildMember)
    MergeFrom(*source);
  }
}

void ReqAckOprGuildMember::MergeFrom(const ReqAckOprGuildMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckOprGuildMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckOprGuildMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckOprGuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuildMember::CopyFrom(const ReqAckOprGuildMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckOprGuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprGuildMember::Swap(ReqAckOprGuildMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprGuildMember::InternalSwap(ReqAckOprGuildMember* other) {
  using std::swap;
  swap(guild_id_, other->guild_id_);
  swap(member_id_, other->member_id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckOprGuildMember::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqEnterGuildEctype::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterGuildEctype_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqEnterGuildEctype::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGuildEctype::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGuildEctype::ReqEnterGuildEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqEnterGuildEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterGuildEctype)
}
ReqEnterGuildEctype::ReqEnterGuildEctype(const ReqEnterGuildEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterGuildEctype)
}

void ReqEnterGuildEctype::SharedCtor() {
  guild_id_ = NULL;
}

ReqEnterGuildEctype::~ReqEnterGuildEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterGuildEctype)
  SharedDtor();
}

void ReqEnterGuildEctype::SharedDtor() {
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqEnterGuildEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqEnterGuildEctype::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqEnterGuildEctype& ReqEnterGuildEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqEnterGuildEctype.base);
  return *internal_default_instance();
}


void ReqEnterGuildEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterGuildEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guild_id_ != NULL);
    guild_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqEnterGuildEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqEnterGuildEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqEnterGuildEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqEnterGuildEctype)
  return false;
#undef DO_
}

void ReqEnterGuildEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqEnterGuildEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_guild_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqEnterGuildEctype)
}

::google::protobuf::uint8* ReqEnterGuildEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterGuildEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_guild_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterGuildEctype)
  return target;
}

size_t ReqEnterGuildEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterGuildEctype)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGuildEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterGuildEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGuildEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGuildEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterGuildEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterGuildEctype)
    MergeFrom(*source);
  }
}

void ReqEnterGuildEctype::MergeFrom(const ReqEnterGuildEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterGuildEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_guild_id()) {
    mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
  }
}

void ReqEnterGuildEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterGuildEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGuildEctype::CopyFrom(const ReqEnterGuildEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterGuildEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGuildEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqEnterGuildEctype::Swap(ReqEnterGuildEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGuildEctype::InternalSwap(ReqEnterGuildEctype* other) {
  using std::swap;
  swap(guild_id_, other->guild_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqEnterGuildEctype::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqIntensifylevelToEquip::InitAsDefaultInstance() {
  ::NFMsg::_ReqIntensifylevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqIntensifylevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqIntensifylevelToEquip::kEquipidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqIntensifylevelToEquip::ReqIntensifylevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqIntensifylevelToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqIntensifylevelToEquip)
}
ReqIntensifylevelToEquip::ReqIntensifylevelToEquip(const ReqIntensifylevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqIntensifylevelToEquip)
}

void ReqIntensifylevelToEquip::SharedCtor() {
  equipid_ = NULL;
}

ReqIntensifylevelToEquip::~ReqIntensifylevelToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqIntensifylevelToEquip)
  SharedDtor();
}

void ReqIntensifylevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void ReqIntensifylevelToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqIntensifylevelToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqIntensifylevelToEquip& ReqIntensifylevelToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqIntensifylevelToEquip.base);
  return *internal_default_instance();
}


void ReqIntensifylevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqIntensifylevelToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqIntensifylevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqIntensifylevelToEquip)
  return false;
#undef DO_
}

void ReqIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqIntensifylevelToEquip)
}

::google::protobuf::uint8* ReqIntensifylevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqIntensifylevelToEquip)
  return target;
}

size_t ReqIntensifylevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqIntensifylevelToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident equipid = 1;
  if (has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqIntensifylevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqIntensifylevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqIntensifylevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqIntensifylevelToEquip)
    MergeFrom(*source);
  }
}

void ReqIntensifylevelToEquip::MergeFrom(const ReqIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_equipid()) {
    mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
  }
}

void ReqIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqIntensifylevelToEquip::CopyFrom(const ReqIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqIntensifylevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqIntensifylevelToEquip::Swap(ReqIntensifylevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqIntensifylevelToEquip::InternalSwap(ReqIntensifylevelToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqIntensifylevelToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckIntensifylevelToEquip::InitAsDefaultInstance() {
  ::NFMsg::_AckIntensifylevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckIntensifylevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckIntensifylevelToEquip::kEquipidFieldNumber;
const int AckIntensifylevelToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckIntensifylevelToEquip::AckIntensifylevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckIntensifylevelToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckIntensifylevelToEquip)
}
AckIntensifylevelToEquip::AckIntensifylevelToEquip(const AckIntensifylevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckIntensifylevelToEquip)
}

void AckIntensifylevelToEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(result_));
}

AckIntensifylevelToEquip::~AckIntensifylevelToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.AckIntensifylevelToEquip)
  SharedDtor();
}

void AckIntensifylevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void AckIntensifylevelToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckIntensifylevelToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckIntensifylevelToEquip& AckIntensifylevelToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckIntensifylevelToEquip.base);
  return *internal_default_instance();
}


void AckIntensifylevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckIntensifylevelToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckIntensifylevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckIntensifylevelToEquip)
  return false;
#undef DO_
}

void AckIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckIntensifylevelToEquip)
}

::google::protobuf::uint8* AckIntensifylevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckIntensifylevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckIntensifylevelToEquip)
  return target;
}

size_t AckIntensifylevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckIntensifylevelToEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_result()) {
    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
size_t AckIntensifylevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckIntensifylevelToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckIntensifylevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckIntensifylevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckIntensifylevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckIntensifylevelToEquip)
    MergeFrom(*source);
  }
}

void AckIntensifylevelToEquip::MergeFrom(const AckIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckIntensifylevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIntensifylevelToEquip::CopyFrom(const AckIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIntensifylevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckIntensifylevelToEquip::Swap(AckIntensifylevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckIntensifylevelToEquip::InternalSwap(AckIntensifylevelToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckIntensifylevelToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHoleToEquip::InitAsDefaultInstance() {
  ::NFMsg::_ReqHoleToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqHoleToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHoleToEquip::kEquipidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHoleToEquip::ReqHoleToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqHoleToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHoleToEquip)
}
ReqHoleToEquip::ReqHoleToEquip(const ReqHoleToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHoleToEquip)
}

void ReqHoleToEquip::SharedCtor() {
  equipid_ = NULL;
}

ReqHoleToEquip::~ReqHoleToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHoleToEquip)
  SharedDtor();
}

void ReqHoleToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void ReqHoleToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqHoleToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHoleToEquip& ReqHoleToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqHoleToEquip.base);
  return *internal_default_instance();
}


void ReqHoleToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqHoleToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqHoleToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqHoleToEquip)
  return false;
#undef DO_
}

void ReqHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqHoleToEquip)
}

::google::protobuf::uint8* ReqHoleToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHoleToEquip)
  return target;
}

size_t ReqHoleToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHoleToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident equipid = 1;
  if (has_equipid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHoleToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHoleToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHoleToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHoleToEquip)
    MergeFrom(*source);
  }
}

void ReqHoleToEquip::MergeFrom(const ReqHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_equipid()) {
    mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
  }
}

void ReqHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoleToEquip::CopyFrom(const ReqHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoleToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqHoleToEquip::Swap(ReqHoleToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHoleToEquip::InternalSwap(ReqHoleToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqHoleToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckHoleToEquip::InitAsDefaultInstance() {
  ::NFMsg::_AckHoleToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckHoleToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckHoleToEquip::kEquipidFieldNumber;
const int AckHoleToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckHoleToEquip::AckHoleToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckHoleToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckHoleToEquip)
}
AckHoleToEquip::AckHoleToEquip(const AckHoleToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckHoleToEquip)
}

void AckHoleToEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(result_));
}

AckHoleToEquip::~AckHoleToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.AckHoleToEquip)
  SharedDtor();
}

void AckHoleToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void AckHoleToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckHoleToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckHoleToEquip& AckHoleToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckHoleToEquip.base);
  return *internal_default_instance();
}


void AckHoleToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckHoleToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckHoleToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckHoleToEquip)
  return false;
#undef DO_
}

void AckHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckHoleToEquip)
}

::google::protobuf::uint8* AckHoleToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckHoleToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckHoleToEquip)
  return target;
}

size_t AckHoleToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckHoleToEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_result()) {
    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
size_t AckHoleToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckHoleToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHoleToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckHoleToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckHoleToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckHoleToEquip)
    MergeFrom(*source);
  }
}

void AckHoleToEquip::MergeFrom(const AckHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckHoleToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoleToEquip::CopyFrom(const AckHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoleToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckHoleToEquip::Swap(AckHoleToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckHoleToEquip::InternalSwap(AckHoleToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckHoleToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqInlaystoneToEquip::InitAsDefaultInstance() {
  ::NFMsg::_ReqInlaystoneToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqInlaystoneToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqInlaystoneToEquip::kEquipidFieldNumber;
const int ReqInlaystoneToEquip::kStoneidFieldNumber;
const int ReqInlaystoneToEquip::kHoleIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqInlaystoneToEquip::ReqInlaystoneToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqInlaystoneToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqInlaystoneToEquip)
}
ReqInlaystoneToEquip::ReqInlaystoneToEquip(const ReqInlaystoneToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stoneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stoneid()) {
    stoneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoneid_);
  }
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  hole_index_ = from.hole_index_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqInlaystoneToEquip)
}

void ReqInlaystoneToEquip::SharedCtor() {
  stoneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hole_index_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(hole_index_));
}

ReqInlaystoneToEquip::~ReqInlaystoneToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqInlaystoneToEquip)
  SharedDtor();
}

void ReqInlaystoneToEquip::SharedDtor() {
  stoneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete equipid_;
}

void ReqInlaystoneToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqInlaystoneToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqInlaystoneToEquip& ReqInlaystoneToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqInlaystoneToEquip.base);
  return *internal_default_instance();
}


void ReqInlaystoneToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stoneid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(equipid_ != NULL);
      equipid_->Clear();
    }
  }
  hole_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqInlaystoneToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes stoneid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stoneid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hole_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_hole_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqInlaystoneToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqInlaystoneToEquip)
  return false;
#undef DO_
}

void ReqInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required bytes stoneid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->stoneid(), output);
  }

  // required int32 hole_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hole_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqInlaystoneToEquip)
}

::google::protobuf::uint8* ReqInlaystoneToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required bytes stoneid = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stoneid(), target);
  }

  // required int32 hole_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hole_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqInlaystoneToEquip)
  return target;
}

size_t ReqInlaystoneToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqInlaystoneToEquip)
  size_t total_size = 0;

  if (has_stoneid()) {
    // required bytes stoneid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stoneid());
  }

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_hole_index()) {
    // required int32 hole_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_index());
  }

  return total_size;
}
size_t ReqInlaystoneToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqInlaystoneToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes stoneid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stoneid());

    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required int32 hole_index = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqInlaystoneToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqInlaystoneToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqInlaystoneToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqInlaystoneToEquip)
    MergeFrom(*source);
  }
}

void ReqInlaystoneToEquip::MergeFrom(const ReqInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stoneid();
      stoneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoneid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000004u) {
      hole_index_ = from.hole_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInlaystoneToEquip::CopyFrom(const ReqInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInlaystoneToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqInlaystoneToEquip::Swap(ReqInlaystoneToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqInlaystoneToEquip::InternalSwap(ReqInlaystoneToEquip* other) {
  using std::swap;
  stoneid_.Swap(&other->stoneid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(equipid_, other->equipid_);
  swap(hole_index_, other->hole_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqInlaystoneToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckInlaystoneToEquip::InitAsDefaultInstance() {
  ::NFMsg::_AckInlaystoneToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckInlaystoneToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckInlaystoneToEquip::kEquipidFieldNumber;
const int AckInlaystoneToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckInlaystoneToEquip::AckInlaystoneToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckInlaystoneToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckInlaystoneToEquip)
}
AckInlaystoneToEquip::AckInlaystoneToEquip(const AckInlaystoneToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckInlaystoneToEquip)
}

void AckInlaystoneToEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(result_));
}

AckInlaystoneToEquip::~AckInlaystoneToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.AckInlaystoneToEquip)
  SharedDtor();
}

void AckInlaystoneToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void AckInlaystoneToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckInlaystoneToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckInlaystoneToEquip& AckInlaystoneToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckInlaystoneToEquip.base);
  return *internal_default_instance();
}


void AckInlaystoneToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckInlaystoneToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckInlaystoneToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckInlaystoneToEquip)
  return false;
#undef DO_
}

void AckInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckInlaystoneToEquip)
}

::google::protobuf::uint8* AckInlaystoneToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckInlaystoneToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckInlaystoneToEquip)
  return target;
}

size_t AckInlaystoneToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckInlaystoneToEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_result()) {
    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
size_t AckInlaystoneToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckInlaystoneToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckInlaystoneToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckInlaystoneToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckInlaystoneToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckInlaystoneToEquip)
    MergeFrom(*source);
  }
}

void AckInlaystoneToEquip::MergeFrom(const AckInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckInlaystoneToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInlaystoneToEquip::CopyFrom(const AckInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInlaystoneToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckInlaystoneToEquip::Swap(AckInlaystoneToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckInlaystoneToEquip::InternalSwap(AckInlaystoneToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckInlaystoneToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqElementlevelToEquip::InitAsDefaultInstance() {
  ::NFMsg::_ReqElementlevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqElementlevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqElementlevelToEquip::kEquipidFieldNumber;
const int ReqElementlevelToEquip::kEElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqElementlevelToEquip::ReqElementlevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqElementlevelToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqElementlevelToEquip)
}
ReqElementlevelToEquip::ReqElementlevelToEquip(const ReqElementlevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  eelementtype_ = from.eelementtype_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqElementlevelToEquip)
}

void ReqElementlevelToEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eelementtype_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(eelementtype_));
}

ReqElementlevelToEquip::~ReqElementlevelToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqElementlevelToEquip)
  SharedDtor();
}

void ReqElementlevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void ReqElementlevelToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqElementlevelToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqElementlevelToEquip& ReqElementlevelToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqElementlevelToEquip.base);
  return *internal_default_instance();
}


void ReqElementlevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  eelementtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqElementlevelToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.EGameElementType eElementType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::EGameElementType_IsValid(value)) {
            set_eelementtype(static_cast< ::NFMsg::EGameElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqElementlevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqElementlevelToEquip)
  return false;
#undef DO_
}

void ReqElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required .NFMsg.EGameElementType eElementType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eelementtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqElementlevelToEquip)
}

::google::protobuf::uint8* ReqElementlevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required .NFMsg.EGameElementType eElementType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eelementtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqElementlevelToEquip)
  return target;
}

size_t ReqElementlevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqElementlevelToEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_eelementtype()) {
    // required .NFMsg.EGameElementType eElementType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eelementtype());
  }

  return total_size;
}
size_t ReqElementlevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqElementlevelToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required .NFMsg.EGameElementType eElementType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eelementtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqElementlevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqElementlevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqElementlevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqElementlevelToEquip)
    MergeFrom(*source);
  }
}

void ReqElementlevelToEquip::MergeFrom(const ReqElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      eelementtype_ = from.eelementtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqElementlevelToEquip::CopyFrom(const ReqElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqElementlevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqElementlevelToEquip::Swap(ReqElementlevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqElementlevelToEquip::InternalSwap(ReqElementlevelToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(eelementtype_, other->eelementtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqElementlevelToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckElementlevelToEquip::InitAsDefaultInstance() {
  ::NFMsg::_AckElementlevelToEquip_default_instance_._instance.get_mutable()->equipid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckElementlevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->Clear();
  clear_has_equipid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckElementlevelToEquip::kEquipidFieldNumber;
const int AckElementlevelToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckElementlevelToEquip::AckElementlevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckElementlevelToEquip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckElementlevelToEquip)
}
AckElementlevelToEquip::AckElementlevelToEquip(const AckElementlevelToEquip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_equipid()) {
    equipid_ = new ::NFMsg::Ident(*from.equipid_);
  } else {
    equipid_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckElementlevelToEquip)
}

void AckElementlevelToEquip::SharedCtor() {
  ::memset(&equipid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&equipid_)) + sizeof(result_));
}

AckElementlevelToEquip::~AckElementlevelToEquip() {
  // @@protoc_insertion_point(destructor:NFMsg.AckElementlevelToEquip)
  SharedDtor();
}

void AckElementlevelToEquip::SharedDtor() {
  if (this != internal_default_instance()) delete equipid_;
}

void AckElementlevelToEquip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckElementlevelToEquip::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckElementlevelToEquip& AckElementlevelToEquip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckElementlevelToEquip.base);
  return *internal_default_instance();
}


void AckElementlevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(equipid_ != NULL);
    equipid_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckElementlevelToEquip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident equipid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckElementlevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckElementlevelToEquip)
  return false;
#undef DO_
}

void AckElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_equipid(), output);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckElementlevelToEquip)
}

::google::protobuf::uint8* AckElementlevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckElementlevelToEquip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident equipid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_equipid(), deterministic, target);
  }

  // required int32 result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckElementlevelToEquip)
  return target;
}

size_t AckElementlevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckElementlevelToEquip)
  size_t total_size = 0;

  if (has_equipid()) {
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);
  }

  if (has_result()) {
    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
size_t AckElementlevelToEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckElementlevelToEquip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident equipid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *equipid_);

    // required int32 result = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  const AckElementlevelToEquip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckElementlevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckElementlevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckElementlevelToEquip)
    MergeFrom(*source);
  }
}

void AckElementlevelToEquip::MergeFrom(const AckElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckElementlevelToEquip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_equipid()->::NFMsg::Ident::MergeFrom(from.equipid());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckElementlevelToEquip::CopyFrom(const AckElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckElementlevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckElementlevelToEquip::Swap(AckElementlevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckElementlevelToEquip::InternalSwap(AckElementlevelToEquip* other) {
  using std::swap;
  swap(equipid_, other->equipid_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckElementlevelToEquip::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSetFightHero::InitAsDefaultInstance() {
  ::NFMsg::_ReqSetFightHero_default_instance_._instance.get_mutable()->heroid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSetFightHero::clear_heroid() {
  if (heroid_ != NULL) heroid_->Clear();
  clear_has_heroid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetFightHero::kHeroidFieldNumber;
const int ReqSetFightHero::kFightPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetFightHero::ReqSetFightHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSetFightHero.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSetFightHero)
}
ReqSetFightHero::ReqSetFightHero(const ReqSetFightHero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_heroid()) {
    heroid_ = new ::NFMsg::Ident(*from.heroid_);
  } else {
    heroid_ = NULL;
  }
  fightpos_ = from.fightpos_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSetFightHero)
}

void ReqSetFightHero::SharedCtor() {
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightpos_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(fightpos_));
}

ReqSetFightHero::~ReqSetFightHero() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSetFightHero)
  SharedDtor();
}

void ReqSetFightHero::SharedDtor() {
  if (this != internal_default_instance()) delete heroid_;
}

void ReqSetFightHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSetFightHero::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSetFightHero& ReqSetFightHero::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSetFightHero.base);
  return *internal_default_instance();
}


void ReqSetFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(heroid_ != NULL);
    heroid_->Clear();
  }
  fightpos_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqSetFightHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSetFightHero)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident Heroid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heroid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 FightPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_fightpos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSetFightHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSetFightHero)
  return false;
#undef DO_
}

void ReqSetFightHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident Heroid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_heroid(), output);
  }

  // required int32 FightPos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fightpos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSetFightHero)
}

::google::protobuf::uint8* ReqSetFightHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSetFightHero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident Heroid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_heroid(), deterministic, target);
  }

  // required int32 FightPos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fightpos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSetFightHero)
  return target;
}

size_t ReqSetFightHero::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqSetFightHero)
  size_t total_size = 0;

  if (has_heroid()) {
    // required .NFMsg.Ident Heroid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heroid_);
  }

  if (has_fightpos()) {
    // required int32 FightPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fightpos());
  }

  return total_size;
}
size_t ReqSetFightHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSetFightHero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident Heroid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *heroid_);

    // required int32 FightPos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fightpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSetFightHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSetFightHero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSetFightHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSetFightHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSetFightHero)
    MergeFrom(*source);
  }
}

void ReqSetFightHero::MergeFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSetFightHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_heroid()->::NFMsg::Ident::MergeFrom(from.heroid());
    }
    if (cached_has_bits & 0x00000002u) {
      fightpos_ = from.fightpos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqSetFightHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFightHero::CopyFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFightHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_heroid()) {
    if (!this->heroid_->IsInitialized()) return false;
  }
  return true;
}

void ReqSetFightHero::Swap(ReqSetFightHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetFightHero::InternalSwap(ReqSetFightHero* other) {
  using std::swap;
  swap(heroid_, other->heroid_);
  swap(fightpos_, other->fightpos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSetFightHero::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqMiningTitle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMiningTitle::kXFieldNumber;
const int ReqMiningTitle::kYFieldNumber;
const int ReqMiningTitle::kOprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMiningTitle::ReqMiningTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqMiningTitle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqMiningTitle)
}
ReqMiningTitle::ReqMiningTitle(const ReqMiningTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&opr_) -
    reinterpret_cast<char*>(&x_)) + sizeof(opr_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqMiningTitle)
}

void ReqMiningTitle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opr_) -
      reinterpret_cast<char*>(&x_)) + sizeof(opr_));
}

ReqMiningTitle::~ReqMiningTitle() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqMiningTitle)
  SharedDtor();
}

void ReqMiningTitle::SharedDtor() {
}

void ReqMiningTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqMiningTitle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqMiningTitle& ReqMiningTitle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqMiningTitle.base);
  return *internal_default_instance();
}


void ReqMiningTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opr_) -
        reinterpret_cast<char*>(&x_)) + sizeof(opr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqMiningTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqMiningTitle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 opr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_opr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqMiningTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqMiningTitle)
  return false;
#undef DO_
}

void ReqMiningTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 opr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqMiningTitle)
}

::google::protobuf::uint8* ReqMiningTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 opr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqMiningTitle)
  return target;
}

size_t ReqMiningTitle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqMiningTitle)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_opr()) {
    // required int32 opr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opr());
  }

  return total_size;
}
size_t ReqMiningTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqMiningTitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 opr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opr());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqMiningTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqMiningTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMiningTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMiningTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqMiningTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqMiningTitle)
    MergeFrom(*source);
  }
}

void ReqMiningTitle::MergeFrom(const ReqMiningTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqMiningTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      opr_ = from.opr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqMiningTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMiningTitle::CopyFrom(const ReqMiningTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMiningTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ReqMiningTitle::Swap(ReqMiningTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMiningTitle::InternalSwap(ReqMiningTitle* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(opr_, other->opr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqMiningTitle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TileState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TileState::kXFieldNumber;
const int TileState::kYFieldNumber;
const int TileState::kOprFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TileState::TileState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_TileState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TileState)
}
TileState::TileState(const TileState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&opr_) -
    reinterpret_cast<char*>(&x_)) + sizeof(opr_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.TileState)
}

void TileState::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opr_) -
      reinterpret_cast<char*>(&x_)) + sizeof(opr_));
}

TileState::~TileState() {
  // @@protoc_insertion_point(destructor:NFMsg.TileState)
  SharedDtor();
}

void TileState::SharedDtor() {
}

void TileState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TileState::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TileState& TileState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_TileState.base);
  return *internal_default_instance();
}


void TileState::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TileState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opr_) -
        reinterpret_cast<char*>(&x_)) + sizeof(opr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TileState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.TileState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 opr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_opr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.TileState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.TileState)
  return false;
#undef DO_
}

void TileState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.TileState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 opr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.TileState)
}

::google::protobuf::uint8* TileState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TileState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 opr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TileState)
  return target;
}

size_t TileState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.TileState)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_opr()) {
    // required int32 opr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opr());
  }

  return total_size;
}
size_t TileState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TileState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 opr = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opr());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TileState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TileState)
  GOOGLE_DCHECK_NE(&from, this);
  const TileState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TileState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TileState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TileState)
    MergeFrom(*source);
  }
}

void TileState::MergeFrom(const TileState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TileState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      opr_ = from.opr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TileState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TileState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TileState::CopyFrom(const TileState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TileState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TileState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TileState::Swap(TileState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TileState::InternalSwap(TileState* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(opr_, other->opr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TileState::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckMiningTitle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckMiningTitle::kTileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMiningTitle::AckMiningTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckMiningTitle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckMiningTitle)
}
AckMiningTitle::AckMiningTitle(const AckMiningTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tile_(from.tile_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckMiningTitle)
}

void AckMiningTitle::SharedCtor() {
}

AckMiningTitle::~AckMiningTitle() {
  // @@protoc_insertion_point(destructor:NFMsg.AckMiningTitle)
  SharedDtor();
}

void AckMiningTitle::SharedDtor() {
}

void AckMiningTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckMiningTitle::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckMiningTitle& AckMiningTitle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckMiningTitle.base);
  return *internal_default_instance();
}


void AckMiningTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tile_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckMiningTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckMiningTitle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.TileState tile = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckMiningTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckMiningTitle)
  return false;
#undef DO_
}

void AckMiningTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.TileState tile = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tile(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckMiningTitle)
}

::google::protobuf::uint8* AckMiningTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckMiningTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.TileState tile = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tile(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckMiningTitle)
  return target;
}

size_t AckMiningTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckMiningTitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.TileState tile = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tile(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMiningTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckMiningTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMiningTitle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMiningTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckMiningTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckMiningTitle)
    MergeFrom(*source);
  }
}

void AckMiningTitle::MergeFrom(const AckMiningTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckMiningTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tile_.MergeFrom(from.tile_);
}

void AckMiningTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMiningTitle::CopyFrom(const AckMiningTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMiningTitle::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->tile())) return false;
  return true;
}

void AckMiningTitle::Swap(AckMiningTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMiningTitle::InternalSwap(AckMiningTitle* other) {
  using std::swap;
  CastToBase(&tile_)->InternalSwap(CastToBase(&other->tile_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckMiningTitle::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSearchOppnent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSearchOppnent::ReqSearchOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSearchOppnent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSearchOppnent)
}
ReqSearchOppnent::ReqSearchOppnent(const ReqSearchOppnent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSearchOppnent)
}

void ReqSearchOppnent::SharedCtor() {
}

ReqSearchOppnent::~ReqSearchOppnent() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSearchOppnent)
  SharedDtor();
}

void ReqSearchOppnent::SharedDtor() {
}

void ReqSearchOppnent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSearchOppnent::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSearchOppnent& ReqSearchOppnent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSearchOppnent.base);
  return *internal_default_instance();
}


void ReqSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSearchOppnent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSearchOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSearchOppnent)
  return false;
#undef DO_
}

void ReqSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSearchOppnent)
}

::google::protobuf::uint8* ReqSearchOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSearchOppnent)
  return target;
}

size_t ReqSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSearchOppnent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSearchOppnent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSearchOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSearchOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSearchOppnent)
    MergeFrom(*source);
  }
}

void ReqSearchOppnent::MergeFrom(const ReqSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchOppnent::CopyFrom(const ReqSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchOppnent::IsInitialized() const {
  return true;
}

void ReqSearchOppnent::Swap(ReqSearchOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSearchOppnent::InternalSwap(ReqSearchOppnent* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSearchOppnent::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSearchOppnent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchOppnent::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchOppnent::AckSearchOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSearchOppnent.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSearchOppnent)
}
AckSearchOppnent::AckSearchOppnent(const AckSearchOppnent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSearchOppnent)
}

void AckSearchOppnent::SharedCtor() {
  scene_id_ = 0;
}

AckSearchOppnent::~AckSearchOppnent() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSearchOppnent)
  SharedDtor();
}

void AckSearchOppnent::SharedDtor() {
}

void AckSearchOppnent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSearchOppnent::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSearchOppnent& AckSearchOppnent::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSearchOppnent.base);
  return *internal_default_instance();
}


void AckSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSearchOppnent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSearchOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSearchOppnent)
  return false;
#undef DO_
}

void AckSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 scene_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSearchOppnent)
}

::google::protobuf::uint8* AckSearchOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSearchOppnent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 scene_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSearchOppnent)
  return target;
}

size_t AckSearchOppnent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSearchOppnent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSearchOppnent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSearchOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSearchOppnent)
    MergeFrom(*source);
  }
}

void AckSearchOppnent::MergeFrom(const AckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSearchOppnent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scene_id()) {
    set_scene_id(from.scene_id());
  }
}

void AckSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchOppnent::CopyFrom(const AckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchOppnent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AckSearchOppnent::Swap(AckSearchOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchOppnent::InternalSwap(AckSearchOppnent* other) {
  using std::swap;
  swap(scene_id_, other->scene_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSearchOppnent::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSendMail::InitAsDefaultInstance() {
  ::NFMsg::_ReqSendMail_default_instance_._instance.get_mutable()->reciever_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSendMail::clear_reciever() {
  if (reciever_ != NULL) reciever_->Clear();
  clear_has_reciever();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSendMail::kRecieverFieldNumber;
const int ReqSendMail::kItemListFieldNumber;
const int ReqSendMail::kCurrencyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSendMail::ReqSendMail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSendMail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSendMail)
}
ReqSendMail::ReqSendMail(const ReqSendMail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      item_list_(from.item_list_),
      currency_list_(from.currency_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reciever()) {
    reciever_ = new ::NFMsg::Ident(*from.reciever_);
  } else {
    reciever_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSendMail)
}

void ReqSendMail::SharedCtor() {
  reciever_ = NULL;
}

ReqSendMail::~ReqSendMail() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSendMail)
  SharedDtor();
}

void ReqSendMail::SharedDtor() {
  if (this != internal_default_instance()) delete reciever_;
}

void ReqSendMail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSendMail::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSendMail& ReqSendMail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSendMail.base);
  return *internal_default_instance();
}


void ReqSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  currency_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reciever_ != NULL);
    reciever_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSendMail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident reciever = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reciever()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ItemStruct item_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.CurrencyStruct currency_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_currency_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSendMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSendMail)
  return false;
#undef DO_
}

void ReqSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident reciever = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_reciever(), output);
  }

  // repeated .NFMsg.ItemStruct item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->item_list(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->currency_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSendMail)
}

::google::protobuf::uint8* ReqSendMail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSendMail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident reciever = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_reciever(), deterministic, target);
  }

  // repeated .NFMsg.ItemStruct item_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->currency_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->currency_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSendMail)
  return target;
}

size_t ReqSendMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSendMail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident reciever = 1;
  if (has_reciever()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reciever_);
  }
  // repeated .NFMsg.ItemStruct item_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.CurrencyStruct currency_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->currency_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->currency_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSendMail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSendMail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSendMail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSendMail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSendMail)
    MergeFrom(*source);
  }
}

void ReqSendMail::MergeFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSendMail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  currency_list_.MergeFrom(from.currency_list_);
  if (from.has_reciever()) {
    mutable_reciever()->::NFMsg::Ident::MergeFrom(from.reciever());
  }
}

void ReqSendMail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendMail::CopyFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->currency_list())) return false;
  if (has_reciever()) {
    if (!this->reciever_->IsInitialized()) return false;
  }
  return true;
}

void ReqSendMail::Swap(ReqSendMail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSendMail::InternalSwap(ReqSendMail* other) {
  using std::swap;
  CastToBase(&item_list_)->InternalSwap(CastToBase(&other->item_list_));
  CastToBase(&currency_list_)->InternalSwap(CastToBase(&other->currency_list_));
  swap(reciever_, other->reciever_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSendMail::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqSwitchServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqSwitchServer_default_instance_._instance.get_mutable()->client_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqSwitchServer::clear_selfid() {
  if (selfid_ != NULL) selfid_->Clear();
  clear_has_selfid();
}
void ReqSwitchServer::clear_client_id() {
  if (client_id_ != NULL) client_id_->Clear();
  clear_has_client_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSwitchServer::kSelfidFieldNumber;
const int ReqSwitchServer::kSelfServeridFieldNumber;
const int ReqSwitchServer::kTargetServeridFieldNumber;
const int ReqSwitchServer::kGateServeridFieldNumber;
const int ReqSwitchServer::kSceneIDFieldNumber;
const int ReqSwitchServer::kClientIdFieldNumber;
const int ReqSwitchServer::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSwitchServer::ReqSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqSwitchServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqSwitchServer)
}
ReqSwitchServer::ReqSwitchServer(const ReqSwitchServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  if (from.has_client_id()) {
    client_id_ = new ::NFMsg::Ident(*from.client_id_);
  } else {
    client_id_ = NULL;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqSwitchServer)
}

void ReqSwitchServer::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(groupid_));
}

ReqSwitchServer::~ReqSwitchServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqSwitchServer)
  SharedDtor();
}

void ReqSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
  if (this != internal_default_instance()) delete client_id_;
}

void ReqSwitchServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqSwitchServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqSwitchServer& ReqSwitchServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqSwitchServer.base);
  return *internal_default_instance();
}


void ReqSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(selfid_ != NULL);
      selfid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(client_id_ != NULL);
      client_id_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&self_serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&self_serverid_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqSwitchServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 self_serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_self_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 target_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 gate_serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gate_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 SceneID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident client_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 groupID = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqSwitchServer)
  return false;
#undef DO_
}

void ReqSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident selfid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selfid(), output);
  }

  // required int64 self_serverid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // required int64 target_serverid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // required int64 gate_serverid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  // required int64 SceneID = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sceneid(), output);
  }

  // required .NFMsg.Ident client_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_client_id(), output);
  }

  // required int64 groupID = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqSwitchServer)
}

::google::protobuf::uint8* ReqSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident selfid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selfid(), deterministic, target);
  }

  // required int64 self_serverid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // required int64 target_serverid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // required int64 gate_serverid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  // required int64 SceneID = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sceneid(), target);
  }

  // required .NFMsg.Ident client_id = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_client_id(), deterministic, target);
  }

  // required int64 groupID = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqSwitchServer)
  return target;
}

size_t ReqSwitchServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqSwitchServer)
  size_t total_size = 0;

  if (has_selfid()) {
    // required .NFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  if (has_client_id()) {
    // required .NFMsg.Ident client_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_id_);
  }

  if (has_self_serverid()) {
    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  if (has_target_serverid()) {
    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  if (has_gate_serverid()) {
    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  if (has_sceneid()) {
    // required int64 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());
  }

  if (has_groupid()) {
    // required int64 groupID = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());
  }

  return total_size;
}
size_t ReqSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqSwitchServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .NFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);

    // required .NFMsg.Ident client_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_id_);

    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());

    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());

    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());

    // required int64 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());

    // required int64 groupID = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwitchServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqSwitchServer)
    MergeFrom(*source);
  }
}

void ReqSwitchServer::MergeFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_client_id()->::NFMsg::Ident::MergeFrom(from.client_id());
    }
    if (cached_has_bits & 0x00000004u) {
      self_serverid_ = from.self_serverid_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_serverid_ = from.target_serverid_;
    }
    if (cached_has_bits & 0x00000010u) {
      gate_serverid_ = from.gate_serverid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sceneid_ = from.sceneid_;
    }
    if (cached_has_bits & 0x00000040u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchServer::CopyFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_client_id()) {
    if (!this->client_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqSwitchServer::Swap(ReqSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSwitchServer::InternalSwap(ReqSwitchServer* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(client_id_, other->client_id_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  swap(sceneid_, other->sceneid_);
  swap(groupid_, other->groupid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqSwitchServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckSwitchServer::InitAsDefaultInstance() {
  ::NFMsg::_AckSwitchServer_default_instance_._instance.get_mutable()->selfid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckSwitchServer::clear_selfid() {
  if (selfid_ != NULL) selfid_->Clear();
  clear_has_selfid();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSwitchServer::kSelfidFieldNumber;
const int AckSwitchServer::kSelfServeridFieldNumber;
const int AckSwitchServer::kTargetServeridFieldNumber;
const int AckSwitchServer::kGateServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSwitchServer::AckSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckSwitchServer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckSwitchServer)
}
AckSwitchServer::AckSwitchServer(const AckSwitchServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selfid()) {
    selfid_ = new ::NFMsg::Ident(*from.selfid_);
  } else {
    selfid_ = NULL;
  }
  ::memcpy(&self_serverid_, &from.self_serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_serverid_) -
    reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckSwitchServer)
}

void AckSwitchServer::SharedCtor() {
  ::memset(&selfid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_serverid_) -
      reinterpret_cast<char*>(&selfid_)) + sizeof(gate_serverid_));
}

AckSwitchServer::~AckSwitchServer() {
  // @@protoc_insertion_point(destructor:NFMsg.AckSwitchServer)
  SharedDtor();
}

void AckSwitchServer::SharedDtor() {
  if (this != internal_default_instance()) delete selfid_;
}

void AckSwitchServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckSwitchServer::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckSwitchServer& AckSwitchServer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckSwitchServer.base);
  return *internal_default_instance();
}


void AckSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(selfid_ != NULL);
    selfid_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&self_serverid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gate_serverid_) -
        reinterpret_cast<char*>(&self_serverid_)) + sizeof(gate_serverid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckSwitchServer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident selfid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 self_serverid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_self_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 target_serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 gate_serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gate_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckSwitchServer)
  return false;
#undef DO_
}

void AckSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident selfid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selfid(), output);
  }

  // required int64 self_serverid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // required int64 target_serverid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // required int64 gate_serverid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckSwitchServer)
}

::google::protobuf::uint8* AckSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckSwitchServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident selfid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selfid(), deterministic, target);
  }

  // required int64 self_serverid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // required int64 target_serverid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // required int64 gate_serverid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckSwitchServer)
  return target;
}

size_t AckSwitchServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckSwitchServer)
  size_t total_size = 0;

  if (has_selfid()) {
    // required .NFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);
  }

  if (has_self_serverid()) {
    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  if (has_target_serverid()) {
    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  if (has_gate_serverid()) {
    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  return total_size;
}
size_t AckSwitchServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckSwitchServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .NFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *selfid_);

    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());

    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());

    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwitchServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckSwitchServer)
    MergeFrom(*source);
  }
}

void AckSwitchServer::MergeFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckSwitchServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_selfid()->::NFMsg::Ident::MergeFrom(from.selfid());
    }
    if (cached_has_bits & 0x00000002u) {
      self_serverid_ = from.self_serverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_serverid_ = from.target_serverid_;
    }
    if (cached_has_bits & 0x00000008u) {
      gate_serverid_ = from.gate_serverid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchServer::CopyFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  return true;
}

void AckSwitchServer::Swap(AckSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSwitchServer::InternalSwap(AckSwitchServer* other) {
  using std::swap;
  swap(selfid_, other->selfid_);
  swap(self_serverid_, other->self_serverid_);
  swap(target_serverid_, other->target_serverid_);
  swap(gate_serverid_, other->gate_serverid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckSwitchServer::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeamInfo::InitAsDefaultInstance() {
  ::NFMsg::_TeamInfo_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_TeamInfo_default_instance_._instance.get_mutable()->captain_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void TeamInfo::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
void TeamInfo::clear_captain_id() {
  if (captain_id_ != NULL) captain_id_->Clear();
  clear_has_captain_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kCaptainIdFieldNumber;
const int TeamInfo::kTeammemberInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_TeamInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TeamInfo)
}
TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      teammemberinfo_(from.teammemberinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_captain_id()) {
    captain_id_ = new ::NFMsg::Ident(*from.captain_id_);
  } else {
    captain_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.TeamInfo)
}

void TeamInfo::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&captain_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(captain_id_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete captain_id_;
}

void TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamInfo& TeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_TeamInfo.base);
  return *internal_default_instance();
}


void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teammemberinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(captain_id_ != NULL);
      captain_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.TeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident captain_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_captain_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teammemberinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // required .NFMsg.Ident captain_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_captain_id(), output);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teammemberinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->teammemberinfo(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // required .NFMsg.Ident captain_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_captain_id(), deterministic, target);
  }

  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teammemberinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->teammemberinfo(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TeamInfo)
  return target;
}

size_t TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.TeamInfo)
  size_t total_size = 0;

  if (has_team_id()) {
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (has_captain_id()) {
    // required .NFMsg.Ident captain_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *captain_id_);
  }

  return total_size;
}
size_t TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);

    // required .NFMsg.Ident captain_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *captain_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.TeammemberInfo teammemberInfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->teammemberinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teammemberinfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teammemberinfo_.MergeFrom(from.teammemberinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_captain_id()->::NFMsg::Ident::MergeFrom(from.captain_id());
    }
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->teammemberinfo())) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_captain_id()) {
    if (!this->captain_id_->IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  using std::swap;
  CastToBase(&teammemberinfo_)->InternalSwap(CastToBase(&other->teammemberinfo_));
  swap(team_id_, other->team_id_);
  swap(captain_id_, other->captain_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeammemberInfo::InitAsDefaultInstance() {
  ::NFMsg::_TeammemberInfo_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void TeammemberInfo::clear_player_id() {
  if (player_id_ != NULL) player_id_->Clear();
  clear_has_player_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeammemberInfo::kPlayerIdFieldNumber;
const int TeammemberInfo::kNameFieldNumber;
const int TeammemberInfo::kNLevelFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kHeadIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_TeammemberInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.TeammemberInfo)
}
TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_headicon()) {
    headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  ::memcpy(&nlevel_, &from.nlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_) -
    reinterpret_cast<char*>(&nlevel_)) + sizeof(job_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.TeammemberInfo)
}

void TeammemberInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(job_));
}

TeammemberInfo::~TeammemberInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.TeammemberInfo)
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void TeammemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_TeammemberInfo.base);
  return *internal_default_instance();
}


void TeammemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      headicon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&nlevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&job_) -
        reinterpret_cast<char*>(&nlevel_)) + sizeof(job_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.TeammemberInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.TeammemberInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nLevel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nlevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 job = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_job();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string HeadIcon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headicon().data(), static_cast<int>(this->headicon().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NFMsg.TeammemberInfo.HeadIcon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.TeammemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.TeammemberInfo)
  return false;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player_id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.TeammemberInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 nLevel = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // required int32 job = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // required string HeadIcon = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headicon().data(), static_cast<int>(this->headicon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.TeammemberInfo.HeadIcon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->headicon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.TeammemberInfo)
}

::google::protobuf::uint8* TeammemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.TeammemberInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player_id(), deterministic, target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.TeammemberInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 nLevel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // required int32 job = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  // required string HeadIcon = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headicon().data(), static_cast<int>(this->headicon().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NFMsg.TeammemberInfo.HeadIcon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headicon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.TeammemberInfo)
  return target;
}

size_t TeammemberInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.TeammemberInfo)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_headicon()) {
    // required string HeadIcon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headicon());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (has_nlevel()) {
    // required int32 nLevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());
  }

  if (has_job()) {
    // required int32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job());
  }

  return total_size;
}
size_t TeammemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.TeammemberInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string HeadIcon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headicon());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *player_id_);

    // required int32 nLevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());

    // required int32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.TeammemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeammemberInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeammemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.TeammemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.TeammemberInfo)
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.TeammemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_headicon();
      headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (cached_has_bits & 0x00000008u) {
      nlevel_ = from.nlevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      job_ = from.job_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeammemberInfo::InternalSwap(TeammemberInfo* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headicon_.Swap(&other->headicon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(nlevel_, other->nlevel_);
  swap(job_, other->job_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckCreateTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckCreateTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckCreateTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckCreateTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateTeam::kTeamIdFieldNumber;
const int ReqAckCreateTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateTeam::ReqAckCreateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckCreateTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckCreateTeam)
}
ReqAckCreateTeam::ReqAckCreateTeam(const ReqAckCreateTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckCreateTeam)
}

void ReqAckCreateTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
}

ReqAckCreateTeam::~ReqAckCreateTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckCreateTeam)
  SharedDtor();
}

void ReqAckCreateTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckCreateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckCreateTeam::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckCreateTeam& ReqAckCreateTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckCreateTeam.base);
  return *internal_default_instance();
}


void ReqAckCreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xteaminfo_ != NULL);
      xteaminfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckCreateTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckCreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckCreateTeam)
  return false;
#undef DO_
}

void ReqAckCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xteaminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckCreateTeam)
}

::google::protobuf::uint8* ReqAckCreateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckCreateTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xteaminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckCreateTeam)
  return target;
}

size_t ReqAckCreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckCreateTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }
  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckCreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckCreateTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckCreateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckCreateTeam)
    MergeFrom(*source);
  }
}

void ReqAckCreateTeam::MergeFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckCreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
}

void ReqAckCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateTeam::CopyFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateTeam::Swap(ReqAckCreateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateTeam::InternalSwap(ReqAckCreateTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckCreateTeam::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckJoinTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckJoinTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckJoinTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckJoinTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinTeam::kTeamIdFieldNumber;
const int ReqAckJoinTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinTeam::ReqAckJoinTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckJoinTeam)
}
ReqAckJoinTeam::ReqAckJoinTeam(const ReqAckJoinTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckJoinTeam)
}

void ReqAckJoinTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
}

ReqAckJoinTeam::~ReqAckJoinTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckJoinTeam)
  SharedDtor();
}

void ReqAckJoinTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckJoinTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckJoinTeam::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckJoinTeam& ReqAckJoinTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckJoinTeam.base);
  return *internal_default_instance();
}


void ReqAckJoinTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xteaminfo_ != NULL);
      xteaminfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckJoinTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckJoinTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckJoinTeam)
  return false;
#undef DO_
}

void ReqAckJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xteaminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckJoinTeam)
}

::google::protobuf::uint8* ReqAckJoinTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckJoinTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xteaminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckJoinTeam)
  return target;
}

size_t ReqAckJoinTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckJoinTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }
  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckJoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckJoinTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckJoinTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckJoinTeam)
    MergeFrom(*source);
  }
}

void ReqAckJoinTeam::MergeFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckJoinTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
}

void ReqAckJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinTeam::CopyFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinTeam::Swap(ReqAckJoinTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinTeam::InternalSwap(ReqAckJoinTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckJoinTeam::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckLeaveTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckLeaveTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckLeaveTeam_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckLeaveTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveTeam::kTeamIdFieldNumber;
const int ReqAckLeaveTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveTeam::ReqAckLeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckLeaveTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckLeaveTeam)
}
ReqAckLeaveTeam::ReqAckLeaveTeam(const ReqAckLeaveTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckLeaveTeam)
}

void ReqAckLeaveTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xteaminfo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(xteaminfo_));
}

ReqAckLeaveTeam::~ReqAckLeaveTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckLeaveTeam)
  SharedDtor();
}

void ReqAckLeaveTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckLeaveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckLeaveTeam::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckLeaveTeam& ReqAckLeaveTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckLeaveTeam.base);
  return *internal_default_instance();
}


void ReqAckLeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xteaminfo_ != NULL);
      xteaminfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckLeaveTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckLeaveTeam)
  return false;
#undef DO_
}

void ReqAckLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xteaminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckLeaveTeam)
}

::google::protobuf::uint8* ReqAckLeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckLeaveTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xteaminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckLeaveTeam)
  return target;
}

size_t ReqAckLeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckLeaveTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }
  // optional .NFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLeaveTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckLeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckLeaveTeam)
    MergeFrom(*source);
  }
}

void ReqAckLeaveTeam::MergeFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckLeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
}

void ReqAckLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveTeam::CopyFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveTeam::Swap(ReqAckLeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveTeam::InternalSwap(ReqAckLeaveTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(xteaminfo_, other->xteaminfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckLeaveTeam::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckOprTeamMember::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->member_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckOprTeamMember_default_instance_._instance.get_mutable()->xteaminfo_ = const_cast< ::NFMsg::TeamInfo*>(
      ::NFMsg::TeamInfo::internal_default_instance());
}
void ReqAckOprTeamMember::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
void ReqAckOprTeamMember::clear_member_id() {
  if (member_id_ != NULL) member_id_->Clear();
  clear_has_member_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprTeamMember::kTeamIdFieldNumber;
const int ReqAckOprTeamMember::kMemberIdFieldNumber;
const int ReqAckOprTeamMember::kTypeFieldNumber;
const int ReqAckOprTeamMember::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprTeamMember::ReqAckOprTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckOprTeamMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckOprTeamMember)
}
ReqAckOprTeamMember::ReqAckOprTeamMember(const ReqAckOprTeamMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_member_id()) {
    member_id_ = new ::NFMsg::Ident(*from.member_id_);
  } else {
    member_id_ = NULL;
  }
  if (from.has_xteaminfo()) {
    xteaminfo_ = new ::NFMsg::TeamInfo(*from.xteaminfo_);
  } else {
    xteaminfo_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckOprTeamMember)
}

void ReqAckOprTeamMember::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(type_));
}

ReqAckOprTeamMember::~ReqAckOprTeamMember() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckOprTeamMember)
  SharedDtor();
}

void ReqAckOprTeamMember::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete member_id_;
  if (this != internal_default_instance()) delete xteaminfo_;
}

void ReqAckOprTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckOprTeamMember::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckOprTeamMember& ReqAckOprTeamMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckOprTeamMember.base);
  return *internal_default_instance();
}


void ReqAckOprTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_id_ != NULL);
      member_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(xteaminfo_ != NULL);
      xteaminfo_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckOprTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckOprTeamMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident member_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value)) {
            set_type(static_cast< ::NFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.TeamInfo xTeamInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckOprTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckOprTeamMember)
  return false;
#undef DO_
}

void ReqAckOprTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // required .NFMsg.Ident member_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_member_id(), output);
  }

  // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_xteaminfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckOprTeamMember)
}

::google::protobuf::uint8* ReqAckOprTeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckOprTeamMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // required .NFMsg.Ident member_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_member_id(), deterministic, target);
  }

  // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_xteaminfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckOprTeamMember)
  return target;
}

size_t ReqAckOprTeamMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckOprTeamMember)
  size_t total_size = 0;

  if (has_team_id()) {
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (has_member_id()) {
    // required .NFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);
  }

  if (has_type()) {
    // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t ReqAckOprTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckOprTeamMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);

    // required .NFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *member_id_);

    // required .NFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .NFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xteaminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckOprTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckOprTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckOprTeamMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprTeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckOprTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckOprTeamMember)
    MergeFrom(*source);
  }
}

void ReqAckOprTeamMember::MergeFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckOprTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_member_id()->::NFMsg::Ident::MergeFrom(from.member_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_xteaminfo()->::NFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqAckOprTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprTeamMember::CopyFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprTeamMember::Swap(ReqAckOprTeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprTeamMember::InternalSwap(ReqAckOprTeamMember* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(member_id_, other->member_id_);
  swap(xteaminfo_, other->xteaminfo_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckOprTeamMember::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqAckInviteTeam::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqAckInviteTeam_default_instance_._instance.get_mutable()->invite_target_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqAckInviteTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
void ReqAckInviteTeam::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
void ReqAckInviteTeam::clear_invite_target_id() {
  if (invite_target_id_ != NULL) invite_target_id_->Clear();
  clear_has_invite_target_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckInviteTeam::kTeamIdFieldNumber;
const int ReqAckInviteTeam::kSelfIdFieldNumber;
const int ReqAckInviteTeam::kInviteTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckInviteTeam::ReqAckInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqAckInviteTeam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckInviteTeam)
}
ReqAckInviteTeam::ReqAckInviteTeam(const ReqAckInviteTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_invite_target_id()) {
    invite_target_id_ = new ::NFMsg::Ident(*from.invite_target_id_);
  } else {
    invite_target_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckInviteTeam)
}

void ReqAckInviteTeam::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_target_id_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(invite_target_id_));
}

ReqAckInviteTeam::~ReqAckInviteTeam() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckInviteTeam)
  SharedDtor();
}

void ReqAckInviteTeam::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete invite_target_id_;
}

void ReqAckInviteTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqAckInviteTeam::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqAckInviteTeam& ReqAckInviteTeam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqAckInviteTeam.base);
  return *internal_default_instance();
}


void ReqAckInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(invite_target_id_ != NULL);
      invite_target_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqAckInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqAckInviteTeam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident invite_target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_invite_target_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqAckInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqAckInviteTeam)
  return false;
#undef DO_
}

void ReqAckInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_self_id(), output);
  }

  // required .NFMsg.Ident invite_target_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_invite_target_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqAckInviteTeam)
}

::google::protobuf::uint8* ReqAckInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckInviteTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_self_id(), deterministic, target);
  }

  // required .NFMsg.Ident invite_target_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_invite_target_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckInviteTeam)
  return target;
}

size_t ReqAckInviteTeam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqAckInviteTeam)
  size_t total_size = 0;

  if (has_team_id()) {
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  if (has_invite_target_id()) {
    // required .NFMsg.Ident invite_target_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *invite_target_id_);
  }

  return total_size;
}
size_t ReqAckInviteTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckInviteTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);

    // required .NFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

    // required .NFMsg.Ident invite_target_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *invite_target_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckInviteTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckInviteTeam)
    MergeFrom(*source);
  }
}

void ReqAckInviteTeam::MergeFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckInviteTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_invite_target_id()->::NFMsg::Ident::MergeFrom(from.invite_target_id());
    }
  }
}

void ReqAckInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckInviteTeam::CopyFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckInviteTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_invite_target_id()) {
    if (!this->invite_target_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckInviteTeam::Swap(ReqAckInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckInviteTeam::InternalSwap(ReqAckInviteTeam* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(invite_target_id_, other->invite_target_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqAckInviteTeam::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqTeamEnterEctype::InitAsDefaultInstance() {
  ::NFMsg::_ReqTeamEnterEctype_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqTeamEnterEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqTeamEnterEctype::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
void ReqTeamEnterEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTeamEnterEctype::kTeamIdFieldNumber;
const int ReqTeamEnterEctype::kSelfIdFieldNumber;
const int ReqTeamEnterEctype::kNEctypeIDFieldNumber;
const int ReqTeamEnterEctype::kNGroupIDFieldNumber;
const int ReqTeamEnterEctype::kNResultFieldNumber;
const int ReqTeamEnterEctype::kNServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTeamEnterEctype::ReqTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqTeamEnterEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqTeamEnterEctype)
}
ReqTeamEnterEctype::ReqTeamEnterEctype(const ReqTeamEnterEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  ::memcpy(&nectypeid_, &from.nectypeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nserverid_) -
    reinterpret_cast<char*>(&nectypeid_)) + sizeof(nserverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqTeamEnterEctype)
}

void ReqTeamEnterEctype::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(nserverid_));
}

ReqTeamEnterEctype::~ReqTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqTeamEnterEctype)
  SharedDtor();
}

void ReqTeamEnterEctype::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
}

void ReqTeamEnterEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqTeamEnterEctype::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqTeamEnterEctype& ReqTeamEnterEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqTeamEnterEctype.base);
  return *internal_default_instance();
}


void ReqTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&nectypeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nserverid_) -
        reinterpret_cast<char*>(&nectypeid_)) + sizeof(nserverid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqTeamEnterEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nectypeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ngroupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_nresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nServerID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_nserverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqTeamEnterEctype)
  return false;
#undef DO_
}

void ReqTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_self_id(), output);
  }

  // optional int32 nEctypeID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  // optional int32 nServerID = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nserverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqTeamEnterEctype)
}

::google::protobuf::uint8* ReqTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_self_id(), deterministic, target);
  }

  // optional int32 nEctypeID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  // optional int32 nServerID = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nserverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqTeamEnterEctype)
  return target;
}

size_t ReqTeamEnterEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqTeamEnterEctype)
  size_t total_size = 0;

  if (has_team_id()) {
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  return total_size;
}
size_t ReqTeamEnterEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqTeamEnterEctype)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);

    // required .NFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

    // optional int32 nServerID = 6;
    if (has_nserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserverid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTeamEnterEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqTeamEnterEctype)
    MergeFrom(*source);
  }
}

void ReqTeamEnterEctype::MergeFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000004u) {
      nectypeid_ = from.nectypeid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ngroupid_ = from.ngroupid_;
    }
    if (cached_has_bits & 0x00000010u) {
      nresult_ = from.nresult_;
    }
    if (cached_has_bits & 0x00000020u) {
      nserverid_ = from.nserverid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamEnterEctype::CopyFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqTeamEnterEctype::Swap(ReqTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTeamEnterEctype::InternalSwap(ReqTeamEnterEctype* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(nectypeid_, other->nectypeid_);
  swap(ngroupid_, other->ngroupid_);
  swap(nresult_, other->nresult_);
  swap(nserverid_, other->nserverid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqTeamEnterEctype::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckTeamEnterEctype::InitAsDefaultInstance() {
  ::NFMsg::_AckTeamEnterEctype_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckTeamEnterEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void AckTeamEnterEctype::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
void AckTeamEnterEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckTeamEnterEctype::kTeamIdFieldNumber;
const int AckTeamEnterEctype::kSelfIdFieldNumber;
const int AckTeamEnterEctype::kNEctypeIDFieldNumber;
const int AckTeamEnterEctype::kNGroupIDFieldNumber;
const int AckTeamEnterEctype::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckTeamEnterEctype::AckTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckTeamEnterEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckTeamEnterEctype)
}
AckTeamEnterEctype::AckTeamEnterEctype(const AckTeamEnterEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  ::memcpy(&nectypeid_, &from.nectypeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nresult_) -
    reinterpret_cast<char*>(&nectypeid_)) + sizeof(nresult_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckTeamEnterEctype)
}

void AckTeamEnterEctype::SharedCtor() {
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(nresult_));
}

AckTeamEnterEctype::~AckTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.AckTeamEnterEctype)
  SharedDtor();
}

void AckTeamEnterEctype::SharedDtor() {
  if (this != internal_default_instance()) delete team_id_;
  if (this != internal_default_instance()) delete self_id_;
}

void AckTeamEnterEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckTeamEnterEctype::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckTeamEnterEctype& AckTeamEnterEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckTeamEnterEctype.base);
  return *internal_default_instance();
}


void AckTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&nectypeid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nresult_) -
        reinterpret_cast<char*>(&nectypeid_)) + sizeof(nresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckTeamEnterEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident self_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nectypeid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ngroupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_nresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckTeamEnterEctype)
  return false;
#undef DO_
}

void AckTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_team_id(), output);
  }

  // required .NFMsg.Ident self_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_self_id(), output);
  }

  // optional int32 nEctypeID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckTeamEnterEctype)
}

::google::protobuf::uint8* AckTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckTeamEnterEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_team_id(), deterministic, target);
  }

  // required .NFMsg.Ident self_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_self_id(), deterministic, target);
  }

  // optional int32 nEctypeID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckTeamEnterEctype)
  return target;
}

size_t AckTeamEnterEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckTeamEnterEctype)
  size_t total_size = 0;

  if (has_team_id()) {
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);
  }

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  return total_size;
}
size_t AckTeamEnterEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckTeamEnterEctype)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *team_id_);

    // required .NFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTeamEnterEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckTeamEnterEctype)
    MergeFrom(*source);
  }
}

void AckTeamEnterEctype::MergeFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckTeamEnterEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000004u) {
      nectypeid_ = from.nectypeid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ngroupid_ = from.ngroupid_;
    }
    if (cached_has_bits & 0x00000010u) {
      nresult_ = from.nresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamEnterEctype::CopyFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  return true;
}

void AckTeamEnterEctype::Swap(AckTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckTeamEnterEctype::InternalSwap(AckTeamEnterEctype* other) {
  using std::swap;
  swap(team_id_, other->team_id_);
  swap(self_id_, other->self_id_);
  swap(nectypeid_, other->nectypeid_);
  swap(ngroupid_, other->ngroupid_);
  swap(nresult_, other->nresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckTeamEnterEctype::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GridGuildBaseInfo::InitAsDefaultInstance() {
  ::NFMsg::_GridGuildBaseInfo_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void GridGuildBaseInfo::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridGuildBaseInfo::kIdFieldNumber;
const int GridGuildBaseInfo::kLevelFieldNumber;
const int GridGuildBaseInfo::kCountFieldNumber;
const int GridGuildBaseInfo::kResourceFieldNumber;
const int GridGuildBaseInfo::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridGuildBaseInfo::GridGuildBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_GridGuildBaseInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.GridGuildBaseInfo)
}
GridGuildBaseInfo::GridGuildBaseInfo(const GridGuildBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_) -
    reinterpret_cast<char*>(&level_)) + sizeof(resource_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.GridGuildBaseInfo)
}

void GridGuildBaseInfo::SharedCtor() {
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resource_));
}

GridGuildBaseInfo::~GridGuildBaseInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.GridGuildBaseInfo)
  SharedDtor();
}

void GridGuildBaseInfo::SharedDtor() {
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void GridGuildBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GridGuildBaseInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GridGuildBaseInfo& GridGuildBaseInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_GridGuildBaseInfo.base);
  return *internal_default_instance();
}


void GridGuildBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.GridGuildBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resource_) -
        reinterpret_cast<char*>(&level_)) + sizeof(resource_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GridGuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.GridGuildBaseInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 resource = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_resource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes icon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.GridGuildBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.GridGuildBaseInfo)
  return false;
#undef DO_
}

void GridGuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.GridGuildBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // required int32 resource = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource(), output);
  }

  // required bytes icon = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.GridGuildBaseInfo)
}

::google::protobuf::uint8* GridGuildBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.GridGuildBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // required int32 level = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // required int32 resource = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resource(), target);
  }

  // required bytes icon = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.GridGuildBaseInfo)
  return target;
}

size_t GridGuildBaseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.GridGuildBaseInfo)
  size_t total_size = 0;

  if (has_icon()) {
    // required bytes icon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->icon());
  }

  if (has_id()) {
    // required .NFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_count()) {
    // required int32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_resource()) {
    // required int32 resource = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resource());
  }

  return total_size;
}
size_t GridGuildBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.GridGuildBaseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes icon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->icon());

    // required .NFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 resource = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resource());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridGuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.GridGuildBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GridGuildBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GridGuildBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.GridGuildBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.GridGuildBaseInfo)
    MergeFrom(*source);
  }
}

void GridGuildBaseInfo::MergeFrom(const GridGuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.GridGuildBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_id()->::NFMsg::Ident::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      resource_ = from.resource_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GridGuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.GridGuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridGuildBaseInfo::CopyFrom(const GridGuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.GridGuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridGuildBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  return true;
}

void GridGuildBaseInfo::Swap(GridGuildBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridGuildBaseInfo::InternalSwap(GridGuildBaseInfo* other) {
  using std::swap;
  icon_.Swap(&other->icon_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(count_, other->count_);
  swap(resource_, other->resource_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GridGuildBaseInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqBigMapGridInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBigMapGridInfo::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBigMapGridInfo::ReqBigMapGridInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqBigMapGridInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqBigMapGridInfo)
}
ReqBigMapGridInfo::ReqBigMapGridInfo(const ReqBigMapGridInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      map_title_id_(from.map_title_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqBigMapGridInfo)
}

void ReqBigMapGridInfo::SharedCtor() {
}

ReqBigMapGridInfo::~ReqBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqBigMapGridInfo)
  SharedDtor();
}

void ReqBigMapGridInfo::SharedDtor() {
}

void ReqBigMapGridInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqBigMapGridInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqBigMapGridInfo& ReqBigMapGridInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqBigMapGridInfo.base);
  return *internal_default_instance();
}


void ReqBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_title_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqBigMapGridInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_map_title_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqBigMapGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqBigMapGridInfo)
  return false;
#undef DO_
}

void ReqBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes map_title_id = 1;
  for (int i = 0, n = this->map_title_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqBigMapGridInfo)
}

::google::protobuf::uint8* ReqBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes map_title_id = 1;
  for (int i = 0, n = this->map_title_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->map_title_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqBigMapGridInfo)
  return target;
}

size_t ReqBigMapGridInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqBigMapGridInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes map_title_id = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_title_id_size());
  for (int i = 0, n = this->map_title_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->map_title_id(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBigMapGridInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBigMapGridInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqBigMapGridInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqBigMapGridInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapGridInfo::MergeFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_title_id_.MergeFrom(from.map_title_id_);
}

void ReqBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapGridInfo::CopyFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapGridInfo::IsInitialized() const {
  return true;
}

void ReqBigMapGridInfo::Swap(ReqBigMapGridInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBigMapGridInfo::InternalSwap(ReqBigMapGridInfo* other) {
  using std::swap;
  map_title_id_.InternalSwap(CastToBase(&other->map_title_id_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqBigMapGridInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapGridBaseInfo::InitAsDefaultInstance() {
  ::NFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->guild_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(
      ::NFMsg::GridGuildBaseInfo::internal_default_instance());
  ::NFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->kingwarrer_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_BigMapGridBaseInfo_default_instance_._instance.get_mutable()->hurter_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void BigMapGridBaseInfo::clear_kingwarrer() {
  if (kingwarrer_ != NULL) kingwarrer_->Clear();
  clear_has_kingwarrer();
}
void BigMapGridBaseInfo::clear_hurter() {
  if (hurter_ != NULL) hurter_->Clear();
  clear_has_hurter();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapGridBaseInfo::kIdFieldNumber;
const int BigMapGridBaseInfo::kGuildInfoFieldNumber;
const int BigMapGridBaseInfo::kKingwarTimeFieldNumber;
const int BigMapGridBaseInfo::kKingwarrerFieldNumber;
const int BigMapGridBaseInfo::kHurtingTimeFieldNumber;
const int BigMapGridBaseInfo::kHurterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapGridBaseInfo::BigMapGridBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapGridBaseInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapGridBaseInfo)
}
BigMapGridBaseInfo::BigMapGridBaseInfo(const BigMapGridBaseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_guild_info()) {
    guild_info_ = new ::NFMsg::GridGuildBaseInfo(*from.guild_info_);
  } else {
    guild_info_ = NULL;
  }
  if (from.has_kingwarrer()) {
    kingwarrer_ = new ::NFMsg::Ident(*from.kingwarrer_);
  } else {
    kingwarrer_ = NULL;
  }
  if (from.has_hurter()) {
    hurter_ = new ::NFMsg::Ident(*from.hurter_);
  } else {
    hurter_ = NULL;
  }
  ::memcpy(&kingwar_time_, &from.kingwar_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&hurting_time_) -
    reinterpret_cast<char*>(&kingwar_time_)) + sizeof(hurting_time_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapGridBaseInfo)
}

void BigMapGridBaseInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hurting_time_) -
      reinterpret_cast<char*>(&guild_info_)) + sizeof(hurting_time_));
}

BigMapGridBaseInfo::~BigMapGridBaseInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapGridBaseInfo)
  SharedDtor();
}

void BigMapGridBaseInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_info_;
  if (this != internal_default_instance()) delete kingwarrer_;
  if (this != internal_default_instance()) delete hurter_;
}

void BigMapGridBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BigMapGridBaseInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapGridBaseInfo& BigMapGridBaseInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_BigMapGridBaseInfo.base);
  return *internal_default_instance();
}


void BigMapGridBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapGridBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(guild_info_ != NULL);
      guild_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kingwarrer_ != NULL);
      kingwarrer_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hurter_ != NULL);
      hurter_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&kingwar_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hurting_time_) -
        reinterpret_cast<char*>(&kingwar_time_)) + sizeof(hurting_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BigMapGridBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.BigMapGridBaseInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.GridGuildBaseInfo guild_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 kingwar_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_kingwar_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kingwar_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident kingwarrer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kingwarrer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 hurting_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_hurting_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurting_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident hurter = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hurter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.BigMapGridBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.BigMapGridBaseInfo)
  return false;
#undef DO_
}

void BigMapGridBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.BigMapGridBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // required .NFMsg.GridGuildBaseInfo guild_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_guild_info(), output);
  }

  // required int32 kingwar_time = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->kingwar_time(), output);
  }

  // required .NFMsg.Ident kingwarrer = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_kingwarrer(), output);
  }

  // required int32 hurting_time = 20;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hurting_time(), output);
  }

  // required .NFMsg.Ident hurter = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_hurter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.BigMapGridBaseInfo)
}

::google::protobuf::uint8* BigMapGridBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapGridBaseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required .NFMsg.GridGuildBaseInfo guild_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_guild_info(), deterministic, target);
  }

  // required int32 kingwar_time = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->kingwar_time(), target);
  }

  // required .NFMsg.Ident kingwarrer = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_kingwarrer(), deterministic, target);
  }

  // required int32 hurting_time = 20;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hurting_time(), target);
  }

  // required .NFMsg.Ident hurter = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_hurter(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapGridBaseInfo)
  return target;
}

size_t BigMapGridBaseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.BigMapGridBaseInfo)
  size_t total_size = 0;

  if (has_id()) {
    // required bytes id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  if (has_guild_info()) {
    // required .NFMsg.GridGuildBaseInfo guild_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_info_);
  }

  if (has_kingwarrer()) {
    // required .NFMsg.Ident kingwarrer = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kingwarrer_);
  }

  if (has_hurter()) {
    // required .NFMsg.Ident hurter = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hurter_);
  }

  if (has_kingwar_time()) {
    // required int32 kingwar_time = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kingwar_time());
  }

  if (has_hurting_time()) {
    // required int32 hurting_time = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hurting_time());
  }

  return total_size;
}
size_t BigMapGridBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapGridBaseInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());

    // required .NFMsg.GridGuildBaseInfo guild_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_info_);

    // required .NFMsg.Ident kingwarrer = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kingwarrer_);

    // required .NFMsg.Ident hurter = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hurter_);

    // required int32 kingwar_time = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kingwar_time());

    // required int32 hurting_time = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hurting_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapGridBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapGridBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapGridBaseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapGridBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapGridBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapGridBaseInfo)
    MergeFrom(*source);
  }
}

void BigMapGridBaseInfo::MergeFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapGridBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_guild_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.guild_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kingwarrer()->::NFMsg::Ident::MergeFrom(from.kingwarrer());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_hurter()->::NFMsg::Ident::MergeFrom(from.hurter());
    }
    if (cached_has_bits & 0x00000010u) {
      kingwar_time_ = from.kingwar_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      hurting_time_ = from.hurting_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BigMapGridBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridBaseInfo::CopyFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_guild_info()) {
    if (!this->guild_info_->IsInitialized()) return false;
  }
  if (has_kingwarrer()) {
    if (!this->kingwarrer_->IsInitialized()) return false;
  }
  if (has_hurter()) {
    if (!this->hurter_->IsInitialized()) return false;
  }
  return true;
}

void BigMapGridBaseInfo::Swap(BigMapGridBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapGridBaseInfo::InternalSwap(BigMapGridBaseInfo* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_info_, other->guild_info_);
  swap(kingwarrer_, other->kingwarrer_);
  swap(hurter_, other->hurter_);
  swap(kingwar_time_, other->kingwar_time_);
  swap(hurting_time_, other->hurting_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BigMapGridBaseInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapLeaveMsg::InitAsDefaultInstance() {
  ::NFMsg::_BigMapLeaveMsg_default_instance_._instance.get_mutable()->owner_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void BigMapLeaveMsg::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapLeaveMsg::kOwnerFieldNumber;
const int BigMapLeaveMsg::kOwnerNameFieldNumber;
const int BigMapLeaveMsg::kMsgDataFieldNumber;
const int BigMapLeaveMsg::kMsgTimeFieldNumber;
const int BigMapLeaveMsg::kOwnerLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapLeaveMsg::BigMapLeaveMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapLeaveMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapLeaveMsg)
}
BigMapLeaveMsg::BigMapLeaveMsg(const BigMapLeaveMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_owner_name()) {
    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_data()) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_owner()) {
    owner_ = new ::NFMsg::Ident(*from.owner_);
  } else {
    owner_ = NULL;
  }
  ::memcpy(&msg_time_, &from.msg_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_level_) -
    reinterpret_cast<char*>(&msg_time_)) + sizeof(owner_level_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapLeaveMsg)
}

void BigMapLeaveMsg::SharedCtor() {
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_level_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(owner_level_));
}

BigMapLeaveMsg::~BigMapLeaveMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapLeaveMsg)
  SharedDtor();
}

void BigMapLeaveMsg::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
}

void BigMapLeaveMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BigMapLeaveMsg::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapLeaveMsg& BigMapLeaveMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_BigMapLeaveMsg.base);
  return *internal_default_instance();
}


void BigMapLeaveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapLeaveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      owner_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      msg_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(owner_ != NULL);
      owner_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&msg_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_level_) -
        reinterpret_cast<char*>(&msg_time_)) + sizeof(owner_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BigMapLeaveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.BigMapLeaveMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident owner = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes owner_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes msg_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 msg_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_msg_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 owner_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_owner_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.BigMapLeaveMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.BigMapLeaveMsg)
  return false;
#undef DO_
}

void BigMapLeaveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.BigMapLeaveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident owner = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_owner(), output);
  }

  // required bytes owner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->owner_name(), output);
  }

  // required bytes msg_data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg_data(), output);
  }

  // required int32 msg_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  // required int32 owner_level = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.BigMapLeaveMsg)
}

::google::protobuf::uint8* BigMapLeaveMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapLeaveMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident owner = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_owner(), deterministic, target);
  }

  // required bytes owner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->owner_name(), target);
  }

  // required bytes msg_data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  // required int32 msg_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_time(), target);
  }

  // required int32 owner_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapLeaveMsg)
  return target;
}

size_t BigMapLeaveMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.BigMapLeaveMsg)
  size_t total_size = 0;

  if (has_owner_name()) {
    // required bytes owner_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->owner_name());
  }

  if (has_msg_data()) {
    // required bytes msg_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  if (has_owner()) {
    // required .NFMsg.Ident owner = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  if (has_msg_time()) {
    // required int32 msg_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_time());
  }

  if (has_owner_level()) {
    // required int32 owner_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_level());
  }

  return total_size;
}
size_t BigMapLeaveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapLeaveMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes owner_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->owner_name());

    // required bytes msg_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());

    // required .NFMsg.Ident owner = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *owner_);

    // required int32 msg_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_time());

    // required int32 owner_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapLeaveMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapLeaveMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapLeaveMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapLeaveMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapLeaveMsg)
    MergeFrom(*source);
  }
}

void BigMapLeaveMsg::MergeFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapLeaveMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_owner_name();
      owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_owner()->::NFMsg::Ident::MergeFrom(from.owner());
    }
    if (cached_has_bits & 0x00000008u) {
      msg_time_ = from.msg_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      owner_level_ = from.owner_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BigMapLeaveMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapLeaveMsg::CopyFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapLeaveMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_owner()) {
    if (!this->owner_->IsInitialized()) return false;
  }
  return true;
}

void BigMapLeaveMsg::Swap(BigMapLeaveMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapLeaveMsg::InternalSwap(BigMapLeaveMsg* other) {
  using std::swap;
  owner_name_.Swap(&other->owner_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_data_.Swap(&other->msg_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(owner_, other->owner_);
  swap(msg_time_, other->msg_time_);
  swap(owner_level_, other->owner_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BigMapLeaveMsg::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapWarHistory::InitAsDefaultInstance() {
  ::NFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->red_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(
      ::NFMsg::GridGuildBaseInfo::internal_default_instance());
  ::NFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->blue_info_ = const_cast< ::NFMsg::GridGuildBaseInfo*>(
      ::NFMsg::GridGuildBaseInfo::internal_default_instance());
  ::NFMsg::_BigMapWarHistory_default_instance_._instance.get_mutable()->winner_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void BigMapWarHistory::clear_winner_id() {
  if (winner_id_ != NULL) winner_id_->Clear();
  clear_has_winner_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapWarHistory::kRedInfoFieldNumber;
const int BigMapWarHistory::kBlueInfoFieldNumber;
const int BigMapWarHistory::kWinnerIdFieldNumber;
const int BigMapWarHistory::kWarTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapWarHistory::BigMapWarHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapWarHistory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapWarHistory)
}
BigMapWarHistory::BigMapWarHistory(const BigMapWarHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_red_info()) {
    red_info_ = new ::NFMsg::GridGuildBaseInfo(*from.red_info_);
  } else {
    red_info_ = NULL;
  }
  if (from.has_blue_info()) {
    blue_info_ = new ::NFMsg::GridGuildBaseInfo(*from.blue_info_);
  } else {
    blue_info_ = NULL;
  }
  if (from.has_winner_id()) {
    winner_id_ = new ::NFMsg::Ident(*from.winner_id_);
  } else {
    winner_id_ = NULL;
  }
  war_time_ = from.war_time_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapWarHistory)
}

void BigMapWarHistory::SharedCtor() {
  ::memset(&red_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&war_time_) -
      reinterpret_cast<char*>(&red_info_)) + sizeof(war_time_));
}

BigMapWarHistory::~BigMapWarHistory() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapWarHistory)
  SharedDtor();
}

void BigMapWarHistory::SharedDtor() {
  if (this != internal_default_instance()) delete red_info_;
  if (this != internal_default_instance()) delete blue_info_;
  if (this != internal_default_instance()) delete winner_id_;
}

void BigMapWarHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BigMapWarHistory::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapWarHistory& BigMapWarHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_BigMapWarHistory.base);
  return *internal_default_instance();
}


void BigMapWarHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapWarHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(red_info_ != NULL);
      red_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(blue_info_ != NULL);
      blue_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(winner_id_ != NULL);
      winner_id_->Clear();
    }
  }
  war_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BigMapWarHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.BigMapWarHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.GridGuildBaseInfo red_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_red_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.GridGuildBaseInfo blue_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blue_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident winner_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_winner_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 war_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_war_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.BigMapWarHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.BigMapWarHistory)
  return false;
#undef DO_
}

void BigMapWarHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.BigMapWarHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.GridGuildBaseInfo red_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_red_info(), output);
  }

  // required .NFMsg.GridGuildBaseInfo blue_info = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_blue_info(), output);
  }

  // required .NFMsg.Ident winner_id = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_winner_id(), output);
  }

  // required int32 war_time = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->war_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.BigMapWarHistory)
}

::google::protobuf::uint8* BigMapWarHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapWarHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.GridGuildBaseInfo red_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_red_info(), deterministic, target);
  }

  // required .NFMsg.GridGuildBaseInfo blue_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_blue_info(), deterministic, target);
  }

  // required .NFMsg.Ident winner_id = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_winner_id(), deterministic, target);
  }

  // required int32 war_time = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->war_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapWarHistory)
  return target;
}

size_t BigMapWarHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.BigMapWarHistory)
  size_t total_size = 0;

  if (has_red_info()) {
    // required .NFMsg.GridGuildBaseInfo red_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *red_info_);
  }

  if (has_blue_info()) {
    // required .NFMsg.GridGuildBaseInfo blue_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_info_);
  }

  if (has_winner_id()) {
    // required .NFMsg.Ident winner_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *winner_id_);
  }

  if (has_war_time()) {
    // required int32 war_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->war_time());
  }

  return total_size;
}
size_t BigMapWarHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapWarHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .NFMsg.GridGuildBaseInfo red_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *red_info_);

    // required .NFMsg.GridGuildBaseInfo blue_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *blue_info_);

    // required .NFMsg.Ident winner_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *winner_id_);

    // required int32 war_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->war_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapWarHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapWarHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapWarHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapWarHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapWarHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapWarHistory)
    MergeFrom(*source);
  }
}

void BigMapWarHistory::MergeFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapWarHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_red_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.red_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_blue_info()->::NFMsg::GridGuildBaseInfo::MergeFrom(from.blue_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_winner_id()->::NFMsg::Ident::MergeFrom(from.winner_id());
    }
    if (cached_has_bits & 0x00000008u) {
      war_time_ = from.war_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BigMapWarHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapWarHistory::CopyFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapWarHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_red_info()) {
    if (!this->red_info_->IsInitialized()) return false;
  }
  if (has_blue_info()) {
    if (!this->blue_info_->IsInitialized()) return false;
  }
  if (has_winner_id()) {
    if (!this->winner_id_->IsInitialized()) return false;
  }
  return true;
}

void BigMapWarHistory::Swap(BigMapWarHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapWarHistory::InternalSwap(BigMapWarHistory* other) {
  using std::swap;
  swap(red_info_, other->red_info_);
  swap(blue_info_, other->blue_info_);
  swap(winner_id_, other->winner_id_);
  swap(war_time_, other->war_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BigMapWarHistory::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BigMapGridDetailInfo::InitAsDefaultInstance() {
  ::NFMsg::_BigMapGridDetailInfo_default_instance_._instance.get_mutable()->grid_base_info_ = const_cast< ::NFMsg::BigMapGridBaseInfo*>(
      ::NFMsg::BigMapGridBaseInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapGridDetailInfo::kGridBaseInfoFieldNumber;
const int BigMapGridDetailInfo::kStayGuidListFieldNumber;
const int BigMapGridDetailInfo::kLeaveMsgFieldNumber;
const int BigMapGridDetailInfo::kWarHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapGridDetailInfo::BigMapGridDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_BigMapGridDetailInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.BigMapGridDetailInfo)
}
BigMapGridDetailInfo::BigMapGridDetailInfo(const BigMapGridDetailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stay_guid_list_(from.stay_guid_list_),
      leave_msg_(from.leave_msg_),
      war_history_(from.war_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_grid_base_info()) {
    grid_base_info_ = new ::NFMsg::BigMapGridBaseInfo(*from.grid_base_info_);
  } else {
    grid_base_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.BigMapGridDetailInfo)
}

void BigMapGridDetailInfo::SharedCtor() {
  grid_base_info_ = NULL;
}

BigMapGridDetailInfo::~BigMapGridDetailInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.BigMapGridDetailInfo)
  SharedDtor();
}

void BigMapGridDetailInfo::SharedDtor() {
  if (this != internal_default_instance()) delete grid_base_info_;
}

void BigMapGridDetailInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BigMapGridDetailInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BigMapGridDetailInfo& BigMapGridDetailInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_BigMapGridDetailInfo.base);
  return *internal_default_instance();
}


void BigMapGridDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.BigMapGridDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stay_guid_list_.Clear();
  leave_msg_.Clear();
  war_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(grid_base_info_ != NULL);
    grid_base_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BigMapGridDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.BigMapGridDetailInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_grid_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stay_guid_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_leave_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.BigMapWarHistory war_history = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_war_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.BigMapGridDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.BigMapGridDetailInfo)
  return false;
#undef DO_
}

void BigMapGridDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.BigMapGridDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_grid_base_info(), output);
  }

  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stay_guid_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->stay_guid_list(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leave_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->leave_msg(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->war_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->war_history(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.BigMapGridDetailInfo)
}

::google::protobuf::uint8* BigMapGridDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.BigMapGridDetailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_grid_base_info(), deterministic, target);
  }

  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stay_guid_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->stay_guid_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->leave_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->leave_msg(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->war_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->war_history(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.BigMapGridDetailInfo)
  return target;
}

size_t BigMapGridDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.BigMapGridDetailInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *grid_base_info_);
  }
  // repeated .NFMsg.GridGuildBaseInfo stay_guid_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->stay_guid_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stay_guid_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.BigMapLeaveMsg leave_msg = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->leave_msg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->leave_msg(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.BigMapWarHistory war_history = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->war_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->war_history(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigMapGridDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.BigMapGridDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BigMapGridDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapGridDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.BigMapGridDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.BigMapGridDetailInfo)
    MergeFrom(*source);
  }
}

void BigMapGridDetailInfo::MergeFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.BigMapGridDetailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stay_guid_list_.MergeFrom(from.stay_guid_list_);
  leave_msg_.MergeFrom(from.leave_msg_);
  war_history_.MergeFrom(from.war_history_);
  if (from.has_grid_base_info()) {
    mutable_grid_base_info()->::NFMsg::BigMapGridBaseInfo::MergeFrom(from.grid_base_info());
  }
}

void BigMapGridDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridDetailInfo::CopyFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stay_guid_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->leave_msg())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->war_history())) return false;
  if (has_grid_base_info()) {
    if (!this->grid_base_info_->IsInitialized()) return false;
  }
  return true;
}

void BigMapGridDetailInfo::Swap(BigMapGridDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapGridDetailInfo::InternalSwap(BigMapGridDetailInfo* other) {
  using std::swap;
  CastToBase(&stay_guid_list_)->InternalSwap(CastToBase(&other->stay_guid_list_));
  CastToBase(&leave_msg_)->InternalSwap(CastToBase(&other->leave_msg_));
  CastToBase(&war_history_)->InternalSwap(CastToBase(&other->war_history_));
  swap(grid_base_info_, other->grid_base_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BigMapGridDetailInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckBigMapGridInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckBigMapGridInfo::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckBigMapGridInfo::AckBigMapGridInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckBigMapGridInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckBigMapGridInfo)
}
AckBigMapGridInfo::AckBigMapGridInfo(const AckBigMapGridInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      map_data_(from.map_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckBigMapGridInfo)
}

void AckBigMapGridInfo::SharedCtor() {
}

AckBigMapGridInfo::~AckBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.AckBigMapGridInfo)
  SharedDtor();
}

void AckBigMapGridInfo::SharedDtor() {
}

void AckBigMapGridInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckBigMapGridInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckBigMapGridInfo& AckBigMapGridInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckBigMapGridInfo.base);
  return *internal_default_instance();
}


void AckBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckBigMapGridInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckBigMapGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckBigMapGridInfo)
  return false;
#undef DO_
}

void AckBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->map_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckBigMapGridInfo)
}

::google::protobuf::uint8* AckBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckBigMapGridInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->map_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckBigMapGridInfo)
  return target;
}

size_t AckBigMapGridInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckBigMapGridInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.BigMapGridDetailInfo map_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->map_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBigMapGridInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckBigMapGridInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckBigMapGridInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckBigMapGridInfo)
    MergeFrom(*source);
  }
}

void AckBigMapGridInfo::MergeFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckBigMapGridInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_data_.MergeFrom(from.map_data_);
}

void AckBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapGridInfo::CopyFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapGridInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->map_data())) return false;
  return true;
}

void AckBigMapGridInfo::Swap(AckBigMapGridInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckBigMapGridInfo::InternalSwap(AckBigMapGridInfo* other) {
  using std::swap;
  CastToBase(&map_data_)->InternalSwap(CastToBase(&other->map_data_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckBigMapGridInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqBigMapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBigMapInfo::ReqBigMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqBigMapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqBigMapInfo)
}
ReqBigMapInfo::ReqBigMapInfo(const ReqBigMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqBigMapInfo)
}

void ReqBigMapInfo::SharedCtor() {
}

ReqBigMapInfo::~ReqBigMapInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqBigMapInfo)
  SharedDtor();
}

void ReqBigMapInfo::SharedDtor() {
}

void ReqBigMapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqBigMapInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqBigMapInfo& ReqBigMapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqBigMapInfo.base);
  return *internal_default_instance();
}


void ReqBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqBigMapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqBigMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqBigMapInfo)
  return false;
#undef DO_
}

void ReqBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqBigMapInfo)
}

::google::protobuf::uint8* ReqBigMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqBigMapInfo)
  return target;
}

size_t ReqBigMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqBigMapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqBigMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBigMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqBigMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqBigMapInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapInfo::MergeFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapInfo::CopyFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapInfo::IsInitialized() const {
  return true;
}

void ReqBigMapInfo::Swap(ReqBigMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBigMapInfo::InternalSwap(ReqBigMapInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqBigMapInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckBigMapInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckBigMapInfo::kGridBaseInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckBigMapInfo::AckBigMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckBigMapInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckBigMapInfo)
}
AckBigMapInfo::AckBigMapInfo(const AckBigMapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      grid_base_info_(from.grid_base_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckBigMapInfo)
}

void AckBigMapInfo::SharedCtor() {
}

AckBigMapInfo::~AckBigMapInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.AckBigMapInfo)
  SharedDtor();
}

void AckBigMapInfo::SharedDtor() {
}

void AckBigMapInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckBigMapInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckBigMapInfo& AckBigMapInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckBigMapInfo.base);
  return *internal_default_instance();
}


void AckBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grid_base_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckBigMapInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_grid_base_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckBigMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckBigMapInfo)
  return false;
#undef DO_
}

void AckBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grid_base_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->grid_base_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckBigMapInfo)
}

::google::protobuf::uint8* AckBigMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckBigMapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->grid_base_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->grid_base_info(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckBigMapInfo)
  return target;
}

size_t AckBigMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckBigMapInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.BigMapGridBaseInfo grid_base_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->grid_base_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->grid_base_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AckBigMapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckBigMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckBigMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckBigMapInfo)
    MergeFrom(*source);
  }
}

void AckBigMapInfo::MergeFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckBigMapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  grid_base_info_.MergeFrom(from.grid_base_info_);
}

void AckBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapInfo::CopyFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->grid_base_info())) return false;
  return true;
}

void AckBigMapInfo::Swap(AckBigMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckBigMapInfo::InternalSwap(AckBigMapInfo* other) {
  using std::swap;
  CastToBase(&grid_base_info_)->InternalSwap(CastToBase(&other->grid_base_info_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckBigMapInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqHoldMapGrid::InitAsDefaultInstance() {
  ::NFMsg::_ReqHoldMapGrid_default_instance_._instance.get_mutable()->guild_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqHoldMapGrid::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->Clear();
  clear_has_guild_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHoldMapGrid::kMapTitleIdFieldNumber;
const int ReqHoldMapGrid::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHoldMapGrid::ReqHoldMapGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqHoldMapGrid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHoldMapGrid)
}
ReqHoldMapGrid::ReqHoldMapGrid(const ReqHoldMapGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_title_id()) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_guild_id()) {
    guild_id_ = new ::NFMsg::Ident(*from.guild_id_);
  } else {
    guild_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHoldMapGrid)
}

void ReqHoldMapGrid::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
}

ReqHoldMapGrid::~ReqHoldMapGrid() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHoldMapGrid)
  SharedDtor();
}

void ReqHoldMapGrid::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete guild_id_;
}

void ReqHoldMapGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqHoldMapGrid::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqHoldMapGrid& ReqHoldMapGrid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqHoldMapGrid.base);
  return *internal_default_instance();
}


void ReqHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_title_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(guild_id_ != NULL);
      guild_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqHoldMapGrid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqHoldMapGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqHoldMapGrid)
  return false;
#undef DO_
}

void ReqHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_guild_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqHoldMapGrid)
}

::google::protobuf::uint8* ReqHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .NFMsg.Ident guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_guild_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHoldMapGrid)
  return target;
}

size_t ReqHoldMapGrid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqHoldMapGrid)
  size_t total_size = 0;

  if (has_map_title_id()) {
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }

  if (has_guild_id()) {
    // required .NFMsg.Ident guild_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);
  }

  return total_size;
}
size_t ReqHoldMapGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHoldMapGrid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());

    // required .NFMsg.Ident guild_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *guild_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHoldMapGrid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHoldMapGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHoldMapGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHoldMapGrid)
    MergeFrom(*source);
  }
}

void ReqHoldMapGrid::MergeFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_guild_id()->::NFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
}

void ReqHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoldMapGrid::CopyFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoldMapGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqHoldMapGrid::Swap(ReqHoldMapGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHoldMapGrid::InternalSwap(ReqHoldMapGrid* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guild_id_, other->guild_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqHoldMapGrid::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckHoldMapGrid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckHoldMapGrid::AckHoldMapGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckHoldMapGrid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckHoldMapGrid)
}
AckHoldMapGrid::AckHoldMapGrid(const AckHoldMapGrid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckHoldMapGrid)
}

void AckHoldMapGrid::SharedCtor() {
}

AckHoldMapGrid::~AckHoldMapGrid() {
  // @@protoc_insertion_point(destructor:NFMsg.AckHoldMapGrid)
  SharedDtor();
}

void AckHoldMapGrid::SharedDtor() {
}

void AckHoldMapGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckHoldMapGrid::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckHoldMapGrid& AckHoldMapGrid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckHoldMapGrid.base);
  return *internal_default_instance();
}


void AckHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckHoldMapGrid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckHoldMapGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckHoldMapGrid)
  return false;
#undef DO_
}

void AckHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckHoldMapGrid)
}

::google::protobuf::uint8* AckHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckHoldMapGrid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckHoldMapGrid)
  return target;
}

size_t AckHoldMapGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckHoldMapGrid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  const AckHoldMapGrid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckHoldMapGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckHoldMapGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckHoldMapGrid)
    MergeFrom(*source);
  }
}

void AckHoldMapGrid::MergeFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckHoldMapGrid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoldMapGrid::CopyFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoldMapGrid::IsInitialized() const {
  return true;
}

void AckHoldMapGrid::Swap(AckHoldMapGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckHoldMapGrid::InternalSwap(AckHoldMapGrid* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckHoldMapGrid::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqLeaveMapMsg::InitAsDefaultInstance() {
  ::NFMsg::_ReqLeaveMapMsg_default_instance_._instance.get_mutable()->leave_msg_ = const_cast< ::NFMsg::BigMapLeaveMsg*>(
      ::NFMsg::BigMapLeaveMsg::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLeaveMapMsg::kMapTitleIdFieldNumber;
const int ReqLeaveMapMsg::kLeaveMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveMapMsg::ReqLeaveMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqLeaveMapMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveMapMsg)
}
ReqLeaveMapMsg::ReqLeaveMapMsg(const ReqLeaveMapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_title_id()) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  if (from.has_leave_msg()) {
    leave_msg_ = new ::NFMsg::BigMapLeaveMsg(*from.leave_msg_);
  } else {
    leave_msg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveMapMsg)
}

void ReqLeaveMapMsg::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leave_msg_ = NULL;
}

ReqLeaveMapMsg::~ReqLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveMapMsg)
  SharedDtor();
}

void ReqLeaveMapMsg::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leave_msg_;
}

void ReqLeaveMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqLeaveMapMsg::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqLeaveMapMsg& ReqLeaveMapMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqLeaveMapMsg.base);
  return *internal_default_instance();
}


void ReqLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_title_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leave_msg_ != NULL);
      leave_msg_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqLeaveMapMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leave_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqLeaveMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqLeaveMapMsg)
  return false;
#undef DO_
}

void ReqLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_leave_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqLeaveMapMsg)
}

::google::protobuf::uint8* ReqLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_leave_msg(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveMapMsg)
  return target;
}

size_t ReqLeaveMapMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqLeaveMapMsg)
  size_t total_size = 0;

  if (has_map_title_id()) {
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }

  if (has_leave_msg()) {
    // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leave_msg_);
  }

  return total_size;
}
size_t ReqLeaveMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveMapMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());

    // required .NFMsg.BigMapLeaveMsg leave_msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *leave_msg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveMapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveMapMsg)
    MergeFrom(*source);
  }
}

void ReqLeaveMapMsg::MergeFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_leave_msg()->::NFMsg::BigMapLeaveMsg::MergeFrom(from.leave_msg());
    }
  }
}

void ReqLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveMapMsg::CopyFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveMapMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_leave_msg()) {
    if (!this->leave_msg_->IsInitialized()) return false;
  }
  return true;
}

void ReqLeaveMapMsg::Swap(ReqLeaveMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveMapMsg::InternalSwap(ReqLeaveMapMsg* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leave_msg_, other->leave_msg_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqLeaveMapMsg::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckLeaveMapMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLeaveMapMsg::AckLeaveMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckLeaveMapMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckLeaveMapMsg)
}
AckLeaveMapMsg::AckLeaveMapMsg(const AckLeaveMapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckLeaveMapMsg)
}

void AckLeaveMapMsg::SharedCtor() {
}

AckLeaveMapMsg::~AckLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:NFMsg.AckLeaveMapMsg)
  SharedDtor();
}

void AckLeaveMapMsg::SharedDtor() {
}

void AckLeaveMapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckLeaveMapMsg::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckLeaveMapMsg& AckLeaveMapMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckLeaveMapMsg.base);
  return *internal_default_instance();
}


void AckLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckLeaveMapMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckLeaveMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckLeaveMapMsg)
  return false;
#undef DO_
}

void AckLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckLeaveMapMsg)
}

::google::protobuf::uint8* AckLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckLeaveMapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckLeaveMapMsg)
  return target;
}

size_t AckLeaveMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckLeaveMapMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const AckLeaveMapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLeaveMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckLeaveMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckLeaveMapMsg)
    MergeFrom(*source);
  }
}

void AckLeaveMapMsg::MergeFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckLeaveMapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveMapMsg::CopyFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveMapMsg::IsInitialized() const {
  return true;
}

void AckLeaveMapMsg::Swap(AckLeaveMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLeaveMapMsg::InternalSwap(AckLeaveMapMsg* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckLeaveMapMsg::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqGetMapAward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetMapAward::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetMapAward::ReqGetMapAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqGetMapAward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqGetMapAward)
}
ReqGetMapAward::ReqGetMapAward(const ReqGetMapAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_title_id()) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqGetMapAward)
}

void ReqGetMapAward::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqGetMapAward::~ReqGetMapAward() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqGetMapAward)
  SharedDtor();
}

void ReqGetMapAward::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqGetMapAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqGetMapAward::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqGetMapAward& ReqGetMapAward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqGetMapAward.base);
  return *internal_default_instance();
}


void ReqGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_title_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqGetMapAward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqGetMapAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqGetMapAward)
  return false;
#undef DO_
}

void ReqGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqGetMapAward)
}

::google::protobuf::uint8* ReqGetMapAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqGetMapAward)
  return target;
}

size_t ReqGetMapAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqGetMapAward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqGetMapAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGetMapAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqGetMapAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqGetMapAward)
    MergeFrom(*source);
  }
}

void ReqGetMapAward::MergeFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_title_id()) {
    set_has_map_title_id();
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMapAward::CopyFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMapAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqGetMapAward::Swap(ReqGetMapAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetMapAward::InternalSwap(ReqGetMapAward* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqGetMapAward::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckGetMapAward::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckGetMapAward::AckGetMapAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckGetMapAward.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckGetMapAward)
}
AckGetMapAward::AckGetMapAward(const AckGetMapAward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckGetMapAward)
}

void AckGetMapAward::SharedCtor() {
}

AckGetMapAward::~AckGetMapAward() {
  // @@protoc_insertion_point(destructor:NFMsg.AckGetMapAward)
  SharedDtor();
}

void AckGetMapAward::SharedDtor() {
}

void AckGetMapAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckGetMapAward::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckGetMapAward& AckGetMapAward::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckGetMapAward.base);
  return *internal_default_instance();
}


void AckGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckGetMapAward)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckGetMapAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckGetMapAward)
  return false;
#undef DO_
}

void AckGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckGetMapAward)
}

::google::protobuf::uint8* AckGetMapAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckGetMapAward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckGetMapAward)
  return target;
}

size_t AckGetMapAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckGetMapAward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  const AckGetMapAward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckGetMapAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckGetMapAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckGetMapAward)
    MergeFrom(*source);
  }
}

void AckGetMapAward::MergeFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckGetMapAward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetMapAward::CopyFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetMapAward::IsInitialized() const {
  return true;
}

void AckGetMapAward::Swap(AckGetMapAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckGetMapAward::InternalSwap(AckGetMapAward* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckGetMapAward::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqMapHunting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMapHunting::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMapHunting::ReqMapHunting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqMapHunting.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqMapHunting)
}
ReqMapHunting::ReqMapHunting(const ReqMapHunting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_title_id()) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqMapHunting)
}

void ReqMapHunting::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqMapHunting::~ReqMapHunting() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqMapHunting)
  SharedDtor();
}

void ReqMapHunting::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqMapHunting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqMapHunting::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqMapHunting& ReqMapHunting::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqMapHunting.base);
  return *internal_default_instance();
}


void ReqMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_title_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqMapHunting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqMapHunting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqMapHunting)
  return false;
#undef DO_
}

void ReqMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqMapHunting)
}

::google::protobuf::uint8* ReqMapHunting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqMapHunting)
  return target;
}

size_t ReqMapHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqMapHunting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMapHunting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMapHunting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqMapHunting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqMapHunting)
    MergeFrom(*source);
  }
}

void ReqMapHunting::MergeFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_title_id()) {
    set_has_map_title_id();
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapHunting::CopyFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapHunting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqMapHunting::Swap(ReqMapHunting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMapHunting::InternalSwap(ReqMapHunting* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqMapHunting::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckMapHunting::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMapHunting::AckMapHunting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckMapHunting.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckMapHunting)
}
AckMapHunting::AckMapHunting(const AckMapHunting& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckMapHunting)
}

void AckMapHunting::SharedCtor() {
}

AckMapHunting::~AckMapHunting() {
  // @@protoc_insertion_point(destructor:NFMsg.AckMapHunting)
  SharedDtor();
}

void AckMapHunting::SharedDtor() {
}

void AckMapHunting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckMapHunting::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckMapHunting& AckMapHunting::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckMapHunting.base);
  return *internal_default_instance();
}


void AckMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckMapHunting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckMapHunting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckMapHunting)
  return false;
#undef DO_
}

void AckMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckMapHunting)
}

::google::protobuf::uint8* AckMapHunting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckMapHunting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckMapHunting)
  return target;
}

size_t AckMapHunting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckMapHunting)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMapHunting* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMapHunting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckMapHunting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckMapHunting)
    MergeFrom(*source);
  }
}

void AckMapHunting::MergeFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckMapHunting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapHunting::CopyFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapHunting::IsInitialized() const {
  return true;
}

void AckMapHunting::Swap(AckMapHunting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMapHunting::InternalSwap(AckMapHunting* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckMapHunting::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqMapKingWar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMapKingWar::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMapKingWar::ReqMapKingWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqMapKingWar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqMapKingWar)
}
ReqMapKingWar::ReqMapKingWar(const ReqMapKingWar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_title_id()) {
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqMapKingWar)
}

void ReqMapKingWar::SharedCtor() {
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqMapKingWar::~ReqMapKingWar() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqMapKingWar)
  SharedDtor();
}

void ReqMapKingWar::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqMapKingWar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqMapKingWar::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqMapKingWar& ReqMapKingWar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqMapKingWar.base);
  return *internal_default_instance();
}


void ReqMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_title_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqMapKingWar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqMapKingWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqMapKingWar)
  return false;
#undef DO_
}

void ReqMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqMapKingWar)
}

::google::protobuf::uint8* ReqMapKingWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes map_title_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqMapKingWar)
  return target;
}

size_t ReqMapKingWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqMapKingWar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqMapKingWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMapKingWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqMapKingWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqMapKingWar)
    MergeFrom(*source);
  }
}

void ReqMapKingWar::MergeFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_map_title_id()) {
    set_has_map_title_id();
    map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
  }
}

void ReqMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapKingWar::CopyFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapKingWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqMapKingWar::Swap(ReqMapKingWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMapKingWar::InternalSwap(ReqMapKingWar* other) {
  using std::swap;
  map_title_id_.Swap(&other->map_title_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqMapKingWar::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckMapKingWar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMapKingWar::AckMapKingWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckMapKingWar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckMapKingWar)
}
AckMapKingWar::AckMapKingWar(const AckMapKingWar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckMapKingWar)
}

void AckMapKingWar::SharedCtor() {
}

AckMapKingWar::~AckMapKingWar() {
  // @@protoc_insertion_point(destructor:NFMsg.AckMapKingWar)
  SharedDtor();
}

void AckMapKingWar::SharedDtor() {
}

void AckMapKingWar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckMapKingWar::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckMapKingWar& AckMapKingWar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckMapKingWar.base);
  return *internal_default_instance();
}


void AckMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckMapKingWar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckMapKingWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckMapKingWar)
  return false;
#undef DO_
}

void AckMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckMapKingWar)
}

::google::protobuf::uint8* AckMapKingWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckMapKingWar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckMapKingWar)
  return target;
}

size_t AckMapKingWar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckMapKingWar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMapKingWar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMapKingWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckMapKingWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckMapKingWar)
    MergeFrom(*source);
  }
}

void AckMapKingWar::MergeFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckMapKingWar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapKingWar::CopyFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapKingWar::IsInitialized() const {
  return true;
}

void AckMapKingWar::Swap(AckMapKingWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMapKingWar::InternalSwap(AckMapKingWar* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckMapKingWar::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PVPRoomInfo::InitAsDefaultInstance() {
  ::NFMsg::_PVPRoomInfo_default_instance_._instance.get_mutable()->roomid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void PVPRoomInfo::clear_roomid() {
  if (roomid_ != NULL) roomid_->Clear();
  clear_has_roomid();
}
void PVPRoomInfo::clear_xredplayer() {
  xredplayer_.Clear();
}
void PVPRoomInfo::clear_xblueplayer() {
  xblueplayer_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRoomInfo::kNCellStatusFieldNumber;
const int PVPRoomInfo::kRoomIDFieldNumber;
const int PVPRoomInfo::kNPVPModeFieldNumber;
const int PVPRoomInfo::kNPVPGradeFieldNumber;
const int PVPRoomInfo::kMaxPalyerFieldNumber;
const int PVPRoomInfo::kXRedPlayerFieldNumber;
const int PVPRoomInfo::kXBluePlayerFieldNumber;
const int PVPRoomInfo::kServeridFieldNumber;
const int PVPRoomInfo::kSceneIDFieldNumber;
const int PVPRoomInfo::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRoomInfo::PVPRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_PVPRoomInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PVPRoomInfo)
}
PVPRoomInfo::PVPRoomInfo(const PVPRoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      xredplayer_(from.xredplayer_),
      xblueplayer_(from.xblueplayer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roomid()) {
    roomid_ = new ::NFMsg::Ident(*from.roomid_);
  } else {
    roomid_ = NULL;
  }
  ::memcpy(&ncellstatus_, &from.ncellstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&groupid_) -
    reinterpret_cast<char*>(&ncellstatus_)) + sizeof(groupid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PVPRoomInfo)
}

void PVPRoomInfo::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groupid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(groupid_));
}

PVPRoomInfo::~PVPRoomInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PVPRoomInfo)
  SharedDtor();
}

void PVPRoomInfo::SharedDtor() {
  if (this != internal_default_instance()) delete roomid_;
}

void PVPRoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PVPRoomInfo::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVPRoomInfo& PVPRoomInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_PVPRoomInfo.base);
  return *internal_default_instance();
}


void PVPRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PVPRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xredplayer_.Clear();
  xblueplayer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(roomid_ != NULL);
    roomid_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&ncellstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupid_) -
        reinterpret_cast<char*>(&ncellstatus_)) + sizeof(groupid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PVPRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PVPRoomInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nCellStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ncellstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncellstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident RoomID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nPVPMode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_npvpmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nPVPGrade = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_npvpgrade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 MaxPalyer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_maxpalyer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpalyer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident xRedPlayer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xredplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident xBluePlayer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_xblueplayer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 serverid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_serverid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 SceneID = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_sceneid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 groupID = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_groupid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PVPRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PVPRoomInfo)
  return false;
#undef DO_
}

void PVPRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PVPRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nCellStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncellstatus(), output);
  }

  // required .NFMsg.Ident RoomID = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_roomid(), output);
  }

  // required int32 nPVPMode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npvpmode(), output);
  }

  // required int32 nPVPGrade = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npvpgrade(), output);
  }

  // required int32 MaxPalyer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpalyer(), output);
  }

  // repeated .NFMsg.Ident xRedPlayer = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xredplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->xredplayer(static_cast<int>(i)),
      output);
  }

  // repeated .NFMsg.Ident xBluePlayer = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xblueplayer_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->xblueplayer(static_cast<int>(i)),
      output);
  }

  // optional int64 serverid = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->serverid(), output);
  }

  // optional int64 SceneID = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sceneid(), output);
  }

  // optional int64 groupID = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PVPRoomInfo)
}

::google::protobuf::uint8* PVPRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PVPRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 nCellStatus = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncellstatus(), target);
  }

  // required .NFMsg.Ident RoomID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_roomid(), deterministic, target);
  }

  // required int32 nPVPMode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npvpmode(), target);
  }

  // required int32 nPVPGrade = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npvpgrade(), target);
  }

  // required int32 MaxPalyer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpalyer(), target);
  }

  // repeated .NFMsg.Ident xRedPlayer = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xredplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->xredplayer(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.Ident xBluePlayer = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->xblueplayer_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->xblueplayer(static_cast<int>(i)), deterministic, target);
  }

  // optional int64 serverid = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->serverid(), target);
  }

  // optional int64 SceneID = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sceneid(), target);
  }

  // optional int64 groupID = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PVPRoomInfo)
  return target;
}

size_t PVPRoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PVPRoomInfo)
  size_t total_size = 0;

  if (has_roomid()) {
    // required .NFMsg.Ident RoomID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roomid_);
  }

  if (has_ncellstatus()) {
    // required int32 nCellStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncellstatus());
  }

  if (has_npvpmode()) {
    // required int32 nPVPMode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());
  }

  if (has_npvpgrade()) {
    // required int32 nPVPGrade = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpgrade());
  }

  if (has_maxpalyer()) {
    // required int32 MaxPalyer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxpalyer());
  }

  return total_size;
}
size_t PVPRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PVPRoomInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .NFMsg.Ident RoomID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *roomid_);

    // required int32 nCellStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncellstatus());

    // required int32 nPVPMode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());

    // required int32 nPVPGrade = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpgrade());

    // required int32 MaxPalyer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxpalyer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.Ident xRedPlayer = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->xredplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xredplayer(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.Ident xBluePlayer = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->xblueplayer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->xblueplayer(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 224u) {
    // optional int64 serverid = 8;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->serverid());
    }

    // optional int64 SceneID = 9;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

    // optional int64 groupID = 10;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PVPRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PVPRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PVPRoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PVPRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PVPRoomInfo)
    MergeFrom(*source);
  }
}

void PVPRoomInfo::MergeFrom(const PVPRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PVPRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xredplayer_.MergeFrom(from.xredplayer_);
  xblueplayer_.MergeFrom(from.xblueplayer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_roomid()->::NFMsg::Ident::MergeFrom(from.roomid());
    }
    if (cached_has_bits & 0x00000002u) {
      ncellstatus_ = from.ncellstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      npvpmode_ = from.npvpmode_;
    }
    if (cached_has_bits & 0x00000008u) {
      npvpgrade_ = from.npvpgrade_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxpalyer_ = from.maxpalyer_;
    }
    if (cached_has_bits & 0x00000020u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000040u) {
      sceneid_ = from.sceneid_;
    }
    if (cached_has_bits & 0x00000080u) {
      groupid_ = from.groupid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PVPRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PVPRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRoomInfo::CopyFrom(const PVPRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PVPRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xredplayer())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xblueplayer())) return false;
  if (has_roomid()) {
    if (!this->roomid_->IsInitialized()) return false;
  }
  return true;
}

void PVPRoomInfo::Swap(PVPRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PVPRoomInfo::InternalSwap(PVPRoomInfo* other) {
  using std::swap;
  CastToBase(&xredplayer_)->InternalSwap(CastToBase(&other->xredplayer_));
  CastToBase(&xblueplayer_)->InternalSwap(CastToBase(&other->xblueplayer_));
  swap(roomid_, other->roomid_);
  swap(ncellstatus_, other->ncellstatus_);
  swap(npvpmode_, other->npvpmode_);
  swap(npvpgrade_, other->npvpgrade_);
  swap(maxpalyer_, other->maxpalyer_);
  swap(serverid_, other->serverid_);
  swap(sceneid_, other->sceneid_);
  swap(groupid_, other->groupid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PVPRoomInfo::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqPVPApplyMatch::InitAsDefaultInstance() {
  ::NFMsg::_ReqPVPApplyMatch_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqPVPApplyMatch_default_instance_._instance.get_mutable()->team_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
void ReqPVPApplyMatch::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
void ReqPVPApplyMatch::clear_team_id() {
  if (team_id_ != NULL) team_id_->Clear();
  clear_has_team_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPVPApplyMatch::kSelfIdFieldNumber;
const int ReqPVPApplyMatch::kNPVPModeFieldNumber;
const int ReqPVPApplyMatch::kScoreFieldNumber;
const int ReqPVPApplyMatch::kApplyTypeFieldNumber;
const int ReqPVPApplyMatch::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPVPApplyMatch::ReqPVPApplyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqPVPApplyMatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqPVPApplyMatch)
}
ReqPVPApplyMatch::ReqPVPApplyMatch(const ReqPVPApplyMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_team_id()) {
    team_id_ = new ::NFMsg::Ident(*from.team_id_);
  } else {
    team_id_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&applytype_) -
    reinterpret_cast<char*>(&score_)) + sizeof(applytype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqPVPApplyMatch)
}

void ReqPVPApplyMatch::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytype_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(applytype_));
}

ReqPVPApplyMatch::~ReqPVPApplyMatch() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqPVPApplyMatch)
  SharedDtor();
}

void ReqPVPApplyMatch::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete team_id_;
}

void ReqPVPApplyMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqPVPApplyMatch::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqPVPApplyMatch& ReqPVPApplyMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqPVPApplyMatch.base);
  return *internal_default_instance();
}


void ReqPVPApplyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_id_ != NULL);
      team_id_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&applytype_) -
        reinterpret_cast<char*>(&score_)) + sizeof(applytype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqPVPApplyMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nPVPMode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_npvpmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ApplyType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_applytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.Ident team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqPVPApplyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqPVPApplyMatch)
  return false;
#undef DO_
}

void ReqPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_self_id(), output);
  }

  // required int32 nPVPMode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npvpmode(), output);
  }

  // optional int64 score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // required int32 ApplyType = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->applytype(), output);
  }

  // optional .NFMsg.Ident team_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqPVPApplyMatch)
}

::google::protobuf::uint8* ReqPVPApplyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_self_id(), deterministic, target);
  }

  // required int32 nPVPMode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npvpmode(), target);
  }

  // optional int64 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // required int32 ApplyType = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->applytype(), target);
  }

  // optional .NFMsg.Ident team_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_team_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqPVPApplyMatch)
  return target;
}

size_t ReqPVPApplyMatch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqPVPApplyMatch)
  size_t total_size = 0;

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  if (has_npvpmode()) {
    // required int32 nPVPMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());
  }

  if (has_applytype()) {
    // required int32 ApplyType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  return total_size;
}
size_t ReqPVPApplyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqPVPApplyMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

    // required int32 nPVPMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());

    // required int32 ApplyType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .NFMsg.Ident team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_id_);
    }

    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqPVPApplyMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPVPApplyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqPVPApplyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqPVPApplyMatch)
    MergeFrom(*source);
  }
}

void ReqPVPApplyMatch::MergeFrom(const ReqPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_team_id()->::NFMsg::Ident::MergeFrom(from.team_id());
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      npvpmode_ = from.npvpmode_;
    }
    if (cached_has_bits & 0x00000010u) {
      applytype_ = from.applytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReqPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPVPApplyMatch::CopyFrom(const ReqPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPVPApplyMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqPVPApplyMatch::Swap(ReqPVPApplyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPVPApplyMatch::InternalSwap(ReqPVPApplyMatch* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(team_id_, other->team_id_);
  swap(score_, other->score_);
  swap(npvpmode_, other->npvpmode_);
  swap(applytype_, other->applytype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqPVPApplyMatch::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckPVPApplyMatch::InitAsDefaultInstance() {
  ::NFMsg::_AckPVPApplyMatch_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckPVPApplyMatch_default_instance_._instance.get_mutable()->xroominfo_ = const_cast< ::NFMsg::PVPRoomInfo*>(
      ::NFMsg::PVPRoomInfo::internal_default_instance());
}
void AckPVPApplyMatch::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPVPApplyMatch::kSelfIdFieldNumber;
const int AckPVPApplyMatch::kXRoomInfoFieldNumber;
const int AckPVPApplyMatch::kApplyTypeFieldNumber;
const int AckPVPApplyMatch::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPVPApplyMatch::AckPVPApplyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckPVPApplyMatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPVPApplyMatch)
}
AckPVPApplyMatch::AckPVPApplyMatch(const AckPVPApplyMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_xroominfo()) {
    xroominfo_ = new ::NFMsg::PVPRoomInfo(*from.xroominfo_);
  } else {
    xroominfo_ = NULL;
  }
  ::memcpy(&applytype_, &from.applytype_,
    static_cast<size_t>(reinterpret_cast<char*>(&nresult_) -
    reinterpret_cast<char*>(&applytype_)) + sizeof(nresult_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPVPApplyMatch)
}

void AckPVPApplyMatch::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nresult_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(nresult_));
}

AckPVPApplyMatch::~AckPVPApplyMatch() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPVPApplyMatch)
  SharedDtor();
}

void AckPVPApplyMatch::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete xroominfo_;
}

void AckPVPApplyMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckPVPApplyMatch::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckPVPApplyMatch& AckPVPApplyMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckPVPApplyMatch.base);
  return *internal_default_instance();
}


void AckPVPApplyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xroominfo_ != NULL);
      xroominfo_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&applytype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nresult_) -
        reinterpret_cast<char*>(&applytype_)) + sizeof(nresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckPVPApplyMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ApplyType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_applytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nResult = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_nresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckPVPApplyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckPVPApplyMatch)
  return false;
#undef DO_
}

void AckPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_self_id(), output);
  }

  // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xroominfo(), output);
  }

  // required int32 ApplyType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  // required int32 nResult = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckPVPApplyMatch)
}

::google::protobuf::uint8* AckPVPApplyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPVPApplyMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_self_id(), deterministic, target);
  }

  // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xroominfo(), deterministic, target);
  }

  // required int32 ApplyType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  // required int32 nResult = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPVPApplyMatch)
  return target;
}

size_t AckPVPApplyMatch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckPVPApplyMatch)
  size_t total_size = 0;

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  if (has_applytype()) {
    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  if (has_nresult()) {
    // required int32 nResult = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  return total_size;
}
size_t AckPVPApplyMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPVPApplyMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());

    // required int32 nResult = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPVPApplyMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPVPApplyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPVPApplyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPVPApplyMatch)
    MergeFrom(*source);
  }
}

void AckPVPApplyMatch::MergeFrom(const AckPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPVPApplyMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xroominfo()->::NFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
    if (cached_has_bits & 0x00000004u) {
      applytype_ = from.applytype_;
    }
    if (cached_has_bits & 0x00000008u) {
      nresult_ = from.nresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPVPApplyMatch::CopyFrom(const AckPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPVPApplyMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo_->IsInitialized()) return false;
  }
  return true;
}

void AckPVPApplyMatch::Swap(AckPVPApplyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPVPApplyMatch::InternalSwap(AckPVPApplyMatch* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(xroominfo_, other->xroominfo_);
  swap(applytype_, other->applytype_);
  swap(nresult_, other->nresult_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckPVPApplyMatch::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReqCreatePVPEctype::InitAsDefaultInstance() {
  ::NFMsg::_ReqCreatePVPEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ReqCreatePVPEctype_default_instance_._instance.get_mutable()->xroominfo_ = const_cast< ::NFMsg::PVPRoomInfo*>(
      ::NFMsg::PVPRoomInfo::internal_default_instance());
}
void ReqCreatePVPEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreatePVPEctype::kSelfIdFieldNumber;
const int ReqCreatePVPEctype::kXRoomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreatePVPEctype::ReqCreatePVPEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_ReqCreatePVPEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqCreatePVPEctype)
}
ReqCreatePVPEctype::ReqCreatePVPEctype(const ReqCreatePVPEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_xroominfo()) {
    xroominfo_ = new ::NFMsg::PVPRoomInfo(*from.xroominfo_);
  } else {
    xroominfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCreatePVPEctype)
}

void ReqCreatePVPEctype::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xroominfo_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(xroominfo_));
}

ReqCreatePVPEctype::~ReqCreatePVPEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCreatePVPEctype)
  SharedDtor();
}

void ReqCreatePVPEctype::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete xroominfo_;
}

void ReqCreatePVPEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReqCreatePVPEctype::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCreatePVPEctype& ReqCreatePVPEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_ReqCreatePVPEctype.base);
  return *internal_default_instance();
}


void ReqCreatePVPEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xroominfo_ != NULL);
      xroominfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqCreatePVPEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqCreatePVPEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqCreatePVPEctype)
  return false;
#undef DO_
}

void ReqCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_self_id(), output);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xroominfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqCreatePVPEctype)
}

::google::protobuf::uint8* ReqCreatePVPEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_self_id(), deterministic, target);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xroominfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCreatePVPEctype)
  return target;
}

size_t ReqCreatePVPEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqCreatePVPEctype)
  size_t total_size = 0;

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  if (has_xroominfo()) {
    // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);
  }

  return total_size;
}
size_t ReqCreatePVPEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCreatePVPEctype)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

    // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreatePVPEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreatePVPEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCreatePVPEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCreatePVPEctype)
    MergeFrom(*source);
  }
}

void ReqCreatePVPEctype::MergeFrom(const ReqCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xroominfo()->::NFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
  }
}

void ReqCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreatePVPEctype::CopyFrom(const ReqCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreatePVPEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqCreatePVPEctype::Swap(ReqCreatePVPEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreatePVPEctype::InternalSwap(ReqCreatePVPEctype* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(xroominfo_, other->xroominfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReqCreatePVPEctype::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AckCreatePVPEctype::InitAsDefaultInstance() {
  ::NFMsg::_AckCreatePVPEctype_default_instance_._instance.get_mutable()->self_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_AckCreatePVPEctype_default_instance_._instance.get_mutable()->xroominfo_ = const_cast< ::NFMsg::PVPRoomInfo*>(
      ::NFMsg::PVPRoomInfo::internal_default_instance());
}
void AckCreatePVPEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->Clear();
  clear_has_self_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckCreatePVPEctype::kSelfIdFieldNumber;
const int AckCreatePVPEctype::kXRoomInfoFieldNumber;
const int AckCreatePVPEctype::kApplyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckCreatePVPEctype::AckCreatePVPEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgShare_2eproto::scc_info_AckCreatePVPEctype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckCreatePVPEctype)
}
AckCreatePVPEctype::AckCreatePVPEctype(const AckCreatePVPEctype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_self_id()) {
    self_id_ = new ::NFMsg::Ident(*from.self_id_);
  } else {
    self_id_ = NULL;
  }
  if (from.has_xroominfo()) {
    xroominfo_ = new ::NFMsg::PVPRoomInfo(*from.xroominfo_);
  } else {
    xroominfo_ = NULL;
  }
  applytype_ = from.applytype_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckCreatePVPEctype)
}

void AckCreatePVPEctype::SharedCtor() {
  ::memset(&self_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytype_) -
      reinterpret_cast<char*>(&self_id_)) + sizeof(applytype_));
}

AckCreatePVPEctype::~AckCreatePVPEctype() {
  // @@protoc_insertion_point(destructor:NFMsg.AckCreatePVPEctype)
  SharedDtor();
}

void AckCreatePVPEctype::SharedDtor() {
  if (this != internal_default_instance()) delete self_id_;
  if (this != internal_default_instance()) delete xroominfo_;
}

void AckCreatePVPEctype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AckCreatePVPEctype::descriptor() {
  ::protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AckCreatePVPEctype& AckCreatePVPEctype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgShare_2eproto::scc_info_AckCreatePVPEctype.base);
  return *internal_default_instance();
}


void AckCreatePVPEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(self_id_ != NULL);
      self_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xroominfo_ != NULL);
      xroominfo_->Clear();
    }
  }
  applytype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AckCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.AckCreatePVPEctype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident self_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 ApplyType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_applytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.AckCreatePVPEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.AckCreatePVPEctype)
  return false;
#undef DO_
}

void AckCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.AckCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_self_id(), output);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xroominfo(), output);
  }

  // required int32 ApplyType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.AckCreatePVPEctype)
}

::google::protobuf::uint8* AckCreatePVPEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckCreatePVPEctype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident self_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_self_id(), deterministic, target);
  }

  // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xroominfo(), deterministic, target);
  }

  // required int32 ApplyType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckCreatePVPEctype)
  return target;
}

size_t AckCreatePVPEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.AckCreatePVPEctype)
  size_t total_size = 0;

  if (has_self_id()) {
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);
  }

  if (has_xroominfo()) {
    // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);
  }

  if (has_applytype()) {
    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  return total_size;
}
size_t AckCreatePVPEctype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckCreatePVPEctype)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *self_id_);

    // required .NFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xroominfo_);

    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreatePVPEctype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AckCreatePVPEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckCreatePVPEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckCreatePVPEctype)
    MergeFrom(*source);
  }
}

void AckCreatePVPEctype::MergeFrom(const AckCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckCreatePVPEctype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_self_id()->::NFMsg::Ident::MergeFrom(from.self_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xroominfo()->::NFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
    if (cached_has_bits & 0x00000004u) {
      applytype_ = from.applytype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AckCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreatePVPEctype::CopyFrom(const AckCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreatePVPEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo_->IsInitialized()) return false;
  }
  return true;
}

void AckCreatePVPEctype::Swap(AckCreatePVPEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckCreatePVPEctype::InternalSwap(AckCreatePVPEctype* other) {
  using std::swap;
  swap(self_id_, other->self_id_);
  swap(xroominfo_, other->xroominfo_);
  swap(applytype_, other->applytype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckCreatePVPEctype::GetMetadata() const {
  protobuf_NFMsgShare_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgShare_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterGameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage< ::NFMsg::ReqAckEnterGameSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckEnterGameSuccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage< ::NFMsg::ReqHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHeartBeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqLeaveGameServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage< ::NFMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PlayerEntryInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerEntryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerLeaveList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckSynData* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSynData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSynData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerMove* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerMove >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerMove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerChat_ChatContainer* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerChat_ChatContainer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerChat_ChatContainer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerChat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::EffectData* Arena::CreateMaybeMessage< ::NFMsg::EffectData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::EffectData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseSkill >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckUseItem* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSwapScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSwapScene >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckHomeScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckHomeScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckHomeScene >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ItemStruct* Arena::CreateMaybeMessage< ::NFMsg::ItemStruct >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ItemStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::CurrencyStruct* Arena::CreateMaybeMessage< ::NFMsg::CurrencyStruct >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::CurrencyStruct >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckStartBattle* Arena::CreateMaybeMessage< ::NFMsg::ReqAckStartBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckStartBattle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqEndBattle* Arena::CreateMaybeMessage< ::NFMsg::ReqEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEndBattle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckEndBattle* Arena::CreateMaybeMessage< ::NFMsg::AckEndBattle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckEndBattle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqPickDropItem* Arena::CreateMaybeMessage< ::NFMsg::ReqPickDropItem >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqPickDropItem >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAcceptTask* Arena::CreateMaybeMessage< ::NFMsg::ReqAcceptTask >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAcceptTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqCompeleteTask* Arena::CreateMaybeMessage< ::NFMsg::ReqCompeleteTask >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqCompeleteTask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqWearEquip* Arena::CreateMaybeMessage< ::NFMsg::ReqWearEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqWearEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::TakeOffEquip* Arena::CreateMaybeMessage< ::NFMsg::TakeOffEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TakeOffEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckJoinActivity* Arena::CreateMaybeMessage< ::NFMsg::ReqAckJoinActivity >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckJoinActivity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckCreateGuild* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCreateGuild >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCreateGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSearchGuild* Arena::CreateMaybeMessage< ::NFMsg::ReqSearchGuild >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSearchGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSearchGuild_SearchGuildObject* Arena::CreateMaybeMessage< ::NFMsg::AckSearchGuild_SearchGuildObject >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchGuild_SearchGuildObject >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSearchGuild* Arena::CreateMaybeMessage< ::NFMsg::AckSearchGuild >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckJoinGuild* Arena::CreateMaybeMessage< ::NFMsg::ReqAckJoinGuild >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckJoinGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckLeaveGuild* Arena::CreateMaybeMessage< ::NFMsg::ReqAckLeaveGuild >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckLeaveGuild >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckOprGuildMember* Arena::CreateMaybeMessage< ::NFMsg::ReqAckOprGuildMember >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckOprGuildMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqEnterGuildEctype* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterGuildEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterGuildEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqIntensifylevelToEquip* Arena::CreateMaybeMessage< ::NFMsg::ReqIntensifylevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqIntensifylevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckIntensifylevelToEquip* Arena::CreateMaybeMessage< ::NFMsg::AckIntensifylevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckIntensifylevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqHoleToEquip* Arena::CreateMaybeMessage< ::NFMsg::ReqHoleToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHoleToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckHoleToEquip* Arena::CreateMaybeMessage< ::NFMsg::AckHoleToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckHoleToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqInlaystoneToEquip* Arena::CreateMaybeMessage< ::NFMsg::ReqInlaystoneToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqInlaystoneToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckInlaystoneToEquip* Arena::CreateMaybeMessage< ::NFMsg::AckInlaystoneToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckInlaystoneToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqElementlevelToEquip* Arena::CreateMaybeMessage< ::NFMsg::ReqElementlevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqElementlevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckElementlevelToEquip* Arena::CreateMaybeMessage< ::NFMsg::AckElementlevelToEquip >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckElementlevelToEquip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSetFightHero* Arena::CreateMaybeMessage< ::NFMsg::ReqSetFightHero >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSetFightHero >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqMiningTitle* Arena::CreateMaybeMessage< ::NFMsg::ReqMiningTitle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqMiningTitle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::TileState* Arena::CreateMaybeMessage< ::NFMsg::TileState >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TileState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckMiningTitle* Arena::CreateMaybeMessage< ::NFMsg::AckMiningTitle >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckMiningTitle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSearchOppnent* Arena::CreateMaybeMessage< ::NFMsg::ReqSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSearchOppnent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSearchOppnent* Arena::CreateMaybeMessage< ::NFMsg::AckSearchOppnent >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSearchOppnent >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSendMail* Arena::CreateMaybeMessage< ::NFMsg::ReqSendMail >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSendMail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqSwitchServer* Arena::CreateMaybeMessage< ::NFMsg::ReqSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqSwitchServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckSwitchServer* Arena::CreateMaybeMessage< ::NFMsg::AckSwitchServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckSwitchServer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::TeamInfo* Arena::CreateMaybeMessage< ::NFMsg::TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TeamInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::TeammemberInfo* Arena::CreateMaybeMessage< ::NFMsg::TeammemberInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::TeammemberInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckCreateTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckCreateTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckCreateTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckJoinTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckJoinTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckJoinTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckLeaveTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckLeaveTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckLeaveTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckOprTeamMember* Arena::CreateMaybeMessage< ::NFMsg::ReqAckOprTeamMember >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckOprTeamMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqAckInviteTeam* Arena::CreateMaybeMessage< ::NFMsg::ReqAckInviteTeam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckInviteTeam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqTeamEnterEctype* Arena::CreateMaybeMessage< ::NFMsg::ReqTeamEnterEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqTeamEnterEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckTeamEnterEctype* Arena::CreateMaybeMessage< ::NFMsg::AckTeamEnterEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckTeamEnterEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::GridGuildBaseInfo* Arena::CreateMaybeMessage< ::NFMsg::GridGuildBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::GridGuildBaseInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqBigMapGridInfo* Arena::CreateMaybeMessage< ::NFMsg::ReqBigMapGridInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqBigMapGridInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::BigMapGridBaseInfo* Arena::CreateMaybeMessage< ::NFMsg::BigMapGridBaseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapGridBaseInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::BigMapLeaveMsg* Arena::CreateMaybeMessage< ::NFMsg::BigMapLeaveMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapLeaveMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::BigMapWarHistory* Arena::CreateMaybeMessage< ::NFMsg::BigMapWarHistory >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapWarHistory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::BigMapGridDetailInfo* Arena::CreateMaybeMessage< ::NFMsg::BigMapGridDetailInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::BigMapGridDetailInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckBigMapGridInfo* Arena::CreateMaybeMessage< ::NFMsg::AckBigMapGridInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckBigMapGridInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqBigMapInfo* Arena::CreateMaybeMessage< ::NFMsg::ReqBigMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqBigMapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckBigMapInfo* Arena::CreateMaybeMessage< ::NFMsg::AckBigMapInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckBigMapInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqHoldMapGrid* Arena::CreateMaybeMessage< ::NFMsg::ReqHoldMapGrid >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHoldMapGrid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckHoldMapGrid* Arena::CreateMaybeMessage< ::NFMsg::AckHoldMapGrid >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckHoldMapGrid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqLeaveMapMsg* Arena::CreateMaybeMessage< ::NFMsg::ReqLeaveMapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqLeaveMapMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckLeaveMapMsg* Arena::CreateMaybeMessage< ::NFMsg::AckLeaveMapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckLeaveMapMsg >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqGetMapAward* Arena::CreateMaybeMessage< ::NFMsg::ReqGetMapAward >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqGetMapAward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckGetMapAward* Arena::CreateMaybeMessage< ::NFMsg::AckGetMapAward >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckGetMapAward >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqMapHunting* Arena::CreateMaybeMessage< ::NFMsg::ReqMapHunting >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqMapHunting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckMapHunting* Arena::CreateMaybeMessage< ::NFMsg::AckMapHunting >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckMapHunting >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqMapKingWar* Arena::CreateMaybeMessage< ::NFMsg::ReqMapKingWar >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqMapKingWar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckMapKingWar* Arena::CreateMaybeMessage< ::NFMsg::AckMapKingWar >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckMapKingWar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::PVPRoomInfo* Arena::CreateMaybeMessage< ::NFMsg::PVPRoomInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PVPRoomInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqPVPApplyMatch* Arena::CreateMaybeMessage< ::NFMsg::ReqPVPApplyMatch >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqPVPApplyMatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckPVPApplyMatch* Arena::CreateMaybeMessage< ::NFMsg::AckPVPApplyMatch >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPVPApplyMatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::ReqCreatePVPEctype* Arena::CreateMaybeMessage< ::NFMsg::ReqCreatePVPEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqCreatePVPEctype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::AckCreatePVPEctype* Arena::CreateMaybeMessage< ::NFMsg::AckCreatePVPEctype >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckCreatePVPEctype >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
