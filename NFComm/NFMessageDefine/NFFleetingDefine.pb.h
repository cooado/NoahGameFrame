// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFFleetingDefine.proto

#ifndef PROTOBUF_INCLUDED_NFFleetingDefine_2eproto
#define PROTOBUF_INCLUDED_NFFleetingDefine_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NFFleetingDefine_2eproto 

namespace protobuf_NFFleetingDefine_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[22];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_NFFleetingDefine_2eproto
namespace NFFS {
class AnimatorFlys;
class AnimatorFlysDefaultTypeInternal;
extern AnimatorFlysDefaultTypeInternal _AnimatorFlys_default_instance_;
class AnimatorFlys_Fly;
class AnimatorFlys_FlyDefaultTypeInternal;
extern AnimatorFlys_FlyDefaultTypeInternal _AnimatorFlys_Fly_default_instance_;
class AnimatorMoves;
class AnimatorMovesDefaultTypeInternal;
extern AnimatorMovesDefaultTypeInternal _AnimatorMoves_default_instance_;
class AnimatorMoves_Move;
class AnimatorMoves_MoveDefaultTypeInternal;
extern AnimatorMoves_MoveDefaultTypeInternal _AnimatorMoves_Move_default_instance_;
class AudioEvents;
class AudioEventsDefaultTypeInternal;
extern AudioEventsDefaultTypeInternal _AudioEvents_default_instance_;
class AudioEvents_Audio;
class AudioEvents_AudioDefaultTypeInternal;
extern AudioEvents_AudioDefaultTypeInternal _AudioEvents_Audio_default_instance_;
class BulletEvents;
class BulletEventsDefaultTypeInternal;
extern BulletEventsDefaultTypeInternal _BulletEvents_default_instance_;
class BulletEvents_Bullet;
class BulletEvents_BulletDefaultTypeInternal;
extern BulletEvents_BulletDefaultTypeInternal _BulletEvents_Bullet_default_instance_;
class BulletEvents_TacheBomp;
class BulletEvents_TacheBompDefaultTypeInternal;
extern BulletEvents_TacheBompDefaultTypeInternal _BulletEvents_TacheBomp_default_instance_;
class CameraControlEvents;
class CameraControlEventsDefaultTypeInternal;
extern CameraControlEventsDefaultTypeInternal _CameraControlEvents_default_instance_;
class CameraControlEvents_Camera;
class CameraControlEvents_CameraDefaultTypeInternal;
extern CameraControlEvents_CameraDefaultTypeInternal _CameraControlEvents_Camera_default_instance_;
class EnableEvents;
class EnableEventsDefaultTypeInternal;
extern EnableEventsDefaultTypeInternal _EnableEvents_default_instance_;
class EnableEvents_Enable;
class EnableEvents_EnableDefaultTypeInternal;
extern EnableEvents_EnableDefaultTypeInternal _EnableEvents_Enable_default_instance_;
class FSVector3;
class FSVector3DefaultTypeInternal;
extern FSVector3DefaultTypeInternal _FSVector3_default_instance_;
class GlobalSpeeds;
class GlobalSpeedsDefaultTypeInternal;
extern GlobalSpeedsDefaultTypeInternal _GlobalSpeeds_default_instance_;
class GlobalSpeeds_Speed;
class GlobalSpeeds_SpeedDefaultTypeInternal;
extern GlobalSpeeds_SpeedDefaultTypeInternal _GlobalSpeeds_Speed_default_instance_;
class ParticleEvents;
class ParticleEventsDefaultTypeInternal;
extern ParticleEventsDefaultTypeInternal _ParticleEvents_default_instance_;
class ParticleEvents_Particle;
class ParticleEvents_ParticleDefaultTypeInternal;
extern ParticleEvents_ParticleDefaultTypeInternal _ParticleEvents_Particle_default_instance_;
class SuwayyahEvents;
class SuwayyahEventsDefaultTypeInternal;
extern SuwayyahEventsDefaultTypeInternal _SuwayyahEvents_default_instance_;
class SuwayyahEvents_Suwayyah;
class SuwayyahEvents_SuwayyahDefaultTypeInternal;
extern SuwayyahEvents_SuwayyahDefaultTypeInternal _SuwayyahEvents_Suwayyah_default_instance_;
class TrailEvents;
class TrailEventsDefaultTypeInternal;
extern TrailEventsDefaultTypeInternal _TrailEvents_default_instance_;
class TrailEvents_Trail;
class TrailEvents_TrailDefaultTypeInternal;
extern TrailEvents_TrailDefaultTypeInternal _TrailEvents_Trail_default_instance_;
}  // namespace NFFS
namespace google {
namespace protobuf {
template<> ::NFFS::AnimatorFlys* Arena::CreateMaybeMessage<::NFFS::AnimatorFlys>(Arena*);
template<> ::NFFS::AnimatorFlys_Fly* Arena::CreateMaybeMessage<::NFFS::AnimatorFlys_Fly>(Arena*);
template<> ::NFFS::AnimatorMoves* Arena::CreateMaybeMessage<::NFFS::AnimatorMoves>(Arena*);
template<> ::NFFS::AnimatorMoves_Move* Arena::CreateMaybeMessage<::NFFS::AnimatorMoves_Move>(Arena*);
template<> ::NFFS::AudioEvents* Arena::CreateMaybeMessage<::NFFS::AudioEvents>(Arena*);
template<> ::NFFS::AudioEvents_Audio* Arena::CreateMaybeMessage<::NFFS::AudioEvents_Audio>(Arena*);
template<> ::NFFS::BulletEvents* Arena::CreateMaybeMessage<::NFFS::BulletEvents>(Arena*);
template<> ::NFFS::BulletEvents_Bullet* Arena::CreateMaybeMessage<::NFFS::BulletEvents_Bullet>(Arena*);
template<> ::NFFS::BulletEvents_TacheBomp* Arena::CreateMaybeMessage<::NFFS::BulletEvents_TacheBomp>(Arena*);
template<> ::NFFS::CameraControlEvents* Arena::CreateMaybeMessage<::NFFS::CameraControlEvents>(Arena*);
template<> ::NFFS::CameraControlEvents_Camera* Arena::CreateMaybeMessage<::NFFS::CameraControlEvents_Camera>(Arena*);
template<> ::NFFS::EnableEvents* Arena::CreateMaybeMessage<::NFFS::EnableEvents>(Arena*);
template<> ::NFFS::EnableEvents_Enable* Arena::CreateMaybeMessage<::NFFS::EnableEvents_Enable>(Arena*);
template<> ::NFFS::FSVector3* Arena::CreateMaybeMessage<::NFFS::FSVector3>(Arena*);
template<> ::NFFS::GlobalSpeeds* Arena::CreateMaybeMessage<::NFFS::GlobalSpeeds>(Arena*);
template<> ::NFFS::GlobalSpeeds_Speed* Arena::CreateMaybeMessage<::NFFS::GlobalSpeeds_Speed>(Arena*);
template<> ::NFFS::ParticleEvents* Arena::CreateMaybeMessage<::NFFS::ParticleEvents>(Arena*);
template<> ::NFFS::ParticleEvents_Particle* Arena::CreateMaybeMessage<::NFFS::ParticleEvents_Particle>(Arena*);
template<> ::NFFS::SuwayyahEvents* Arena::CreateMaybeMessage<::NFFS::SuwayyahEvents>(Arena*);
template<> ::NFFS::SuwayyahEvents_Suwayyah* Arena::CreateMaybeMessage<::NFFS::SuwayyahEvents_Suwayyah>(Arena*);
template<> ::NFFS::TrailEvents* Arena::CreateMaybeMessage<::NFFS::TrailEvents>(Arena*);
template<> ::NFFS::TrailEvents_Trail* Arena::CreateMaybeMessage<::NFFS::TrailEvents_Trail>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace NFFS {

enum SuwayyahEvents_ESEType {
  SuwayyahEvents_ESEType_ESET_SINGLE = 0,
  SuwayyahEvents_ESEType_ESET_SINGLE_AREA = 1,
  SuwayyahEvents_ESEType_ESET_LEFT_AREA = 2,
  SuwayyahEvents_ESEType_ESET_RIGHT_AREA = 3
};
bool SuwayyahEvents_ESEType_IsValid(int value);
const SuwayyahEvents_ESEType SuwayyahEvents_ESEType_ESEType_MIN = SuwayyahEvents_ESEType_ESET_SINGLE;
const SuwayyahEvents_ESEType SuwayyahEvents_ESEType_ESEType_MAX = SuwayyahEvents_ESEType_ESET_RIGHT_AREA;
const int SuwayyahEvents_ESEType_ESEType_ARRAYSIZE = SuwayyahEvents_ESEType_ESEType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SuwayyahEvents_ESEType_descriptor();
inline const ::std::string& SuwayyahEvents_ESEType_Name(SuwayyahEvents_ESEType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SuwayyahEvents_ESEType_descriptor(), value);
}
inline bool SuwayyahEvents_ESEType_Parse(
    const ::std::string& name, SuwayyahEvents_ESEType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SuwayyahEvents_ESEType>(
    SuwayyahEvents_ESEType_descriptor(), name, value);
}
enum BulletEvents_EBEType {
  BulletEvents_EBEType_ESET_TARGET = 0,
  BulletEvents_EBEType_ESET_POSITION = 1
};
bool BulletEvents_EBEType_IsValid(int value);
const BulletEvents_EBEType BulletEvents_EBEType_EBEType_MIN = BulletEvents_EBEType_ESET_TARGET;
const BulletEvents_EBEType BulletEvents_EBEType_EBEType_MAX = BulletEvents_EBEType_ESET_POSITION;
const int BulletEvents_EBEType_EBEType_ARRAYSIZE = BulletEvents_EBEType_EBEType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BulletEvents_EBEType_descriptor();
inline const ::std::string& BulletEvents_EBEType_Name(BulletEvents_EBEType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BulletEvents_EBEType_descriptor(), value);
}
inline bool BulletEvents_EBEType_Parse(
    const ::std::string& name, BulletEvents_EBEType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BulletEvents_EBEType>(
    BulletEvents_EBEType_descriptor(), name, value);
}
enum BulletEvents_EBE_BACKType {
  BulletEvents_EBE_BACKType_EBEBT_BACK = 0,
  BulletEvents_EBE_BACKType_EBEBT_SIDE = 1
};
bool BulletEvents_EBE_BACKType_IsValid(int value);
const BulletEvents_EBE_BACKType BulletEvents_EBE_BACKType_EBE_BACKType_MIN = BulletEvents_EBE_BACKType_EBEBT_BACK;
const BulletEvents_EBE_BACKType BulletEvents_EBE_BACKType_EBE_BACKType_MAX = BulletEvents_EBE_BACKType_EBEBT_SIDE;
const int BulletEvents_EBE_BACKType_EBE_BACKType_ARRAYSIZE = BulletEvents_EBE_BACKType_EBE_BACKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BulletEvents_EBE_BACKType_descriptor();
inline const ::std::string& BulletEvents_EBE_BACKType_Name(BulletEvents_EBE_BACKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BulletEvents_EBE_BACKType_descriptor(), value);
}
inline bool BulletEvents_EBE_BACKType_Parse(
    const ::std::string& name, BulletEvents_EBE_BACKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BulletEvents_EBE_BACKType>(
    BulletEvents_EBE_BACKType_descriptor(), name, value);
}
enum AnimatorMoves_EAMType {
  AnimatorMoves_EAMType_EAMT_FORWARD = 0,
  AnimatorMoves_EAMType_EAMT_BACK = 1,
  AnimatorMoves_EAMType_EAMT_LEFT = 2,
  AnimatorMoves_EAMType_EAMT_RIGHT = 3
};
bool AnimatorMoves_EAMType_IsValid(int value);
const AnimatorMoves_EAMType AnimatorMoves_EAMType_EAMType_MIN = AnimatorMoves_EAMType_EAMT_FORWARD;
const AnimatorMoves_EAMType AnimatorMoves_EAMType_EAMType_MAX = AnimatorMoves_EAMType_EAMT_RIGHT;
const int AnimatorMoves_EAMType_EAMType_ARRAYSIZE = AnimatorMoves_EAMType_EAMType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnimatorMoves_EAMType_descriptor();
inline const ::std::string& AnimatorMoves_EAMType_Name(AnimatorMoves_EAMType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnimatorMoves_EAMType_descriptor(), value);
}
inline bool AnimatorMoves_EAMType_Parse(
    const ::std::string& name, AnimatorMoves_EAMType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnimatorMoves_EAMType>(
    AnimatorMoves_EAMType_descriptor(), name, value);
}
enum CameraControlEvents_ECEType {
  CameraControlEvents_ECEType_Earthquake = 0,
  CameraControlEvents_ECEType_Explosion = 1,
  CameraControlEvents_ECEType_No = 2,
  CameraControlEvents_ECEType_FireKick = 3,
  CameraControlEvents_ECEType_Stomp = 4,
  CameraControlEvents_ECEType_Yes = 5,
  CameraControlEvents_ECEType_SprintShake = 6,
  CameraControlEvents_ECEType_FreeMode = 7,
  CameraControlEvents_ECEType_MainRPGMode = 8
};
bool CameraControlEvents_ECEType_IsValid(int value);
const CameraControlEvents_ECEType CameraControlEvents_ECEType_ECEType_MIN = CameraControlEvents_ECEType_Earthquake;
const CameraControlEvents_ECEType CameraControlEvents_ECEType_ECEType_MAX = CameraControlEvents_ECEType_MainRPGMode;
const int CameraControlEvents_ECEType_ECEType_ARRAYSIZE = CameraControlEvents_ECEType_ECEType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraControlEvents_ECEType_descriptor();
inline const ::std::string& CameraControlEvents_ECEType_Name(CameraControlEvents_ECEType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraControlEvents_ECEType_descriptor(), value);
}
inline bool CameraControlEvents_ECEType_Parse(
    const ::std::string& name, CameraControlEvents_ECEType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraControlEvents_ECEType>(
    CameraControlEvents_ECEType_descriptor(), name, value);
}
enum ParticleEvents_EPERTYPE {
  ParticleEvents_EPERTYPE_NONE = 0,
  ParticleEvents_EPERTYPE_MatchTarget = 1,
  ParticleEvents_EPERTYPE_Random_X = 2,
  ParticleEvents_EPERTYPE_Random_Y = 3,
  ParticleEvents_EPERTYPE_Random_Z = 4,
  ParticleEvents_EPERTYPE_Random_XY = 5,
  ParticleEvents_EPERTYPE_Random_XZ = 6,
  ParticleEvents_EPERTYPE_Random_YZ = 7,
  ParticleEvents_EPERTYPE_Random_XYZ = 8
};
bool ParticleEvents_EPERTYPE_IsValid(int value);
const ParticleEvents_EPERTYPE ParticleEvents_EPERTYPE_EPERTYPE_MIN = ParticleEvents_EPERTYPE_NONE;
const ParticleEvents_EPERTYPE ParticleEvents_EPERTYPE_EPERTYPE_MAX = ParticleEvents_EPERTYPE_Random_XYZ;
const int ParticleEvents_EPERTYPE_EPERTYPE_ARRAYSIZE = ParticleEvents_EPERTYPE_EPERTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParticleEvents_EPERTYPE_descriptor();
inline const ::std::string& ParticleEvents_EPERTYPE_Name(ParticleEvents_EPERTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParticleEvents_EPERTYPE_descriptor(), value);
}
inline bool ParticleEvents_EPERTYPE_Parse(
    const ::std::string& name, ParticleEvents_EPERTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParticleEvents_EPERTYPE>(
    ParticleEvents_EPERTYPE_descriptor(), name, value);
}
enum EnableEvents_EEETYPE {
  EnableEvents_EEETYPE_INIT = 0,
  EnableEvents_EEETYPE_FINAL = 1
};
bool EnableEvents_EEETYPE_IsValid(int value);
const EnableEvents_EEETYPE EnableEvents_EEETYPE_EEETYPE_MIN = EnableEvents_EEETYPE_INIT;
const EnableEvents_EEETYPE EnableEvents_EEETYPE_EEETYPE_MAX = EnableEvents_EEETYPE_FINAL;
const int EnableEvents_EEETYPE_EEETYPE_ARRAYSIZE = EnableEvents_EEETYPE_EEETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnableEvents_EEETYPE_descriptor();
inline const ::std::string& EnableEvents_EEETYPE_Name(EnableEvents_EEETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnableEvents_EEETYPE_descriptor(), value);
}
inline bool EnableEvents_EEETYPE_Parse(
    const ::std::string& name, EnableEvents_EEETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnableEvents_EEETYPE>(
    EnableEvents_EEETYPE_descriptor(), name, value);
}
enum TrailEvents_TEETYPE {
  TrailEvents_TEETYPE_INIT = 0,
  TrailEvents_TEETYPE_FINAL = 1
};
bool TrailEvents_TEETYPE_IsValid(int value);
const TrailEvents_TEETYPE TrailEvents_TEETYPE_TEETYPE_MIN = TrailEvents_TEETYPE_INIT;
const TrailEvents_TEETYPE TrailEvents_TEETYPE_TEETYPE_MAX = TrailEvents_TEETYPE_FINAL;
const int TrailEvents_TEETYPE_TEETYPE_ARRAYSIZE = TrailEvents_TEETYPE_TEETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* TrailEvents_TEETYPE_descriptor();
inline const ::std::string& TrailEvents_TEETYPE_Name(TrailEvents_TEETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    TrailEvents_TEETYPE_descriptor(), value);
}
inline bool TrailEvents_TEETYPE_Parse(
    const ::std::string& name, TrailEvents_TEETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TrailEvents_TEETYPE>(
    TrailEvents_TEETYPE_descriptor(), name, value);
}
enum AudioEvents_AEETYPE {
  AudioEvents_AEETYPE_INIT = 0,
  AudioEvents_AEETYPE_FINAL = 1
};
bool AudioEvents_AEETYPE_IsValid(int value);
const AudioEvents_AEETYPE AudioEvents_AEETYPE_AEETYPE_MIN = AudioEvents_AEETYPE_INIT;
const AudioEvents_AEETYPE AudioEvents_AEETYPE_AEETYPE_MAX = AudioEvents_AEETYPE_FINAL;
const int AudioEvents_AEETYPE_AEETYPE_ARRAYSIZE = AudioEvents_AEETYPE_AEETYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioEvents_AEETYPE_descriptor();
inline const ::std::string& AudioEvents_AEETYPE_Name(AudioEvents_AEETYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioEvents_AEETYPE_descriptor(), value);
}
inline bool AudioEvents_AEETYPE_Parse(
    const ::std::string& name, AudioEvents_AEETYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioEvents_AEETYPE>(
    AudioEvents_AEETYPE_descriptor(), name, value);
}
enum GlobalSpeeds_EGSTYPE {
  GlobalSpeeds_EGSTYPE_INIT = 0,
  GlobalSpeeds_EGSTYPE_FINAL = 1
};
bool GlobalSpeeds_EGSTYPE_IsValid(int value);
const GlobalSpeeds_EGSTYPE GlobalSpeeds_EGSTYPE_EGSTYPE_MIN = GlobalSpeeds_EGSTYPE_INIT;
const GlobalSpeeds_EGSTYPE GlobalSpeeds_EGSTYPE_EGSTYPE_MAX = GlobalSpeeds_EGSTYPE_FINAL;
const int GlobalSpeeds_EGSTYPE_EGSTYPE_ARRAYSIZE = GlobalSpeeds_EGSTYPE_EGSTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GlobalSpeeds_EGSTYPE_descriptor();
inline const ::std::string& GlobalSpeeds_EGSTYPE_Name(GlobalSpeeds_EGSTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GlobalSpeeds_EGSTYPE_descriptor(), value);
}
inline bool GlobalSpeeds_EGSTYPE_Parse(
    const ::std::string& name, GlobalSpeeds_EGSTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GlobalSpeeds_EGSTYPE>(
    GlobalSpeeds_EGSTYPE_descriptor(), name, value);
}
enum AnimatorFlys_EAFType {
  AnimatorFlys_EAFType_EAFT_FORWARD = 0,
  AnimatorFlys_EAFType_EAFT_BACK = 1,
  AnimatorFlys_EAFType_EAFT_LEFT = 2,
  AnimatorFlys_EAFType_EAFT_RIGHT = 3,
  AnimatorFlys_EAFType_EAFT_TOP = 4
};
bool AnimatorFlys_EAFType_IsValid(int value);
const AnimatorFlys_EAFType AnimatorFlys_EAFType_EAFType_MIN = AnimatorFlys_EAFType_EAFT_FORWARD;
const AnimatorFlys_EAFType AnimatorFlys_EAFType_EAFType_MAX = AnimatorFlys_EAFType_EAFT_TOP;
const int AnimatorFlys_EAFType_EAFType_ARRAYSIZE = AnimatorFlys_EAFType_EAFType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnimatorFlys_EAFType_descriptor();
inline const ::std::string& AnimatorFlys_EAFType_Name(AnimatorFlys_EAFType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnimatorFlys_EAFType_descriptor(), value);
}
inline bool AnimatorFlys_EAFType_Parse(
    const ::std::string& name, AnimatorFlys_EAFType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnimatorFlys_EAFType>(
    AnimatorFlys_EAFType_descriptor(), name, value);
}
// ===================================================================

class FSVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.FSVector3) */ {
 public:
  FSVector3();
  virtual ~FSVector3();

  FSVector3(const FSVector3& from);

  inline FSVector3& operator=(const FSVector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FSVector3(FSVector3&& from) noexcept
    : FSVector3() {
    *this = ::std::move(from);
  }

  inline FSVector3& operator=(FSVector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FSVector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FSVector3* internal_default_instance() {
    return reinterpret_cast<const FSVector3*>(
               &_FSVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FSVector3* other);
  friend void swap(FSVector3& a, FSVector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FSVector3* New() const final {
    return CreateMaybeMessage<FSVector3>(NULL);
  }

  FSVector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FSVector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FSVector3& from);
  void MergeFrom(const FSVector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FSVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:NFFS.FSVector3)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuwayyahEvents_Suwayyah : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.SuwayyahEvents.Suwayyah) */ {
 public:
  SuwayyahEvents_Suwayyah();
  virtual ~SuwayyahEvents_Suwayyah();

  SuwayyahEvents_Suwayyah(const SuwayyahEvents_Suwayyah& from);

  inline SuwayyahEvents_Suwayyah& operator=(const SuwayyahEvents_Suwayyah& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuwayyahEvents_Suwayyah(SuwayyahEvents_Suwayyah&& from) noexcept
    : SuwayyahEvents_Suwayyah() {
    *this = ::std::move(from);
  }

  inline SuwayyahEvents_Suwayyah& operator=(SuwayyahEvents_Suwayyah&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuwayyahEvents_Suwayyah& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuwayyahEvents_Suwayyah* internal_default_instance() {
    return reinterpret_cast<const SuwayyahEvents_Suwayyah*>(
               &_SuwayyahEvents_Suwayyah_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SuwayyahEvents_Suwayyah* other);
  friend void swap(SuwayyahEvents_Suwayyah& a, SuwayyahEvents_Suwayyah& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuwayyahEvents_Suwayyah* New() const final {
    return CreateMaybeMessage<SuwayyahEvents_Suwayyah>(NULL);
  }

  SuwayyahEvents_Suwayyah* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SuwayyahEvents_Suwayyah>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SuwayyahEvents_Suwayyah& from);
  void MergeFrom(const SuwayyahEvents_Suwayyah& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuwayyahEvents_Suwayyah* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BeAttackParticle = 7;
  bool has_beattackparticle() const;
  void clear_beattackparticle();
  static const int kBeAttackParticleFieldNumber = 7;
  const ::std::string& beattackparticle() const;
  void set_beattackparticle(const ::std::string& value);
  #if LANG_CXX11
  void set_beattackparticle(::std::string&& value);
  #endif
  void set_beattackparticle(const char* value);
  void set_beattackparticle(const char* value, size_t size);
  ::std::string* mutable_beattackparticle();
  ::std::string* release_beattackparticle();
  void set_allocated_beattackparticle(::std::string* beattackparticle);

  // required string MethodCall = 8;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 8;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 9;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 9;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required string TargetMethodCall = 10;
  bool has_targetmethodcall() const;
  void clear_targetmethodcall();
  static const int kTargetMethodCallFieldNumber = 10;
  const ::std::string& targetmethodcall() const;
  void set_targetmethodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_targetmethodcall(::std::string&& value);
  #endif
  void set_targetmethodcall(const char* value);
  void set_targetmethodcall(const char* value, size_t size);
  ::std::string* mutable_targetmethodcall();
  ::std::string* release_targetmethodcall();
  void set_allocated_targetmethodcall(::std::string* targetmethodcall);

  // required string TargetMethodParam = 11;
  bool has_targetmethodparam() const;
  void clear_targetmethodparam();
  static const int kTargetMethodParamFieldNumber = 11;
  const ::std::string& targetmethodparam() const;
  void set_targetmethodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_targetmethodparam(::std::string&& value);
  #endif
  void set_targetmethodparam(const char* value);
  void set_targetmethodparam(const char* value, size_t size);
  ::std::string* mutable_targetmethodparam();
  ::std::string* release_targetmethodparam();
  void set_allocated_targetmethodparam(::std::string* targetmethodparam);

  // required .NFFS.SuwayyahEvents.ESEType EventType = 1;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  ::NFFS::SuwayyahEvents_ESEType eventtype() const;
  void set_eventtype(::NFFS::SuwayyahEvents_ESEType value);

  // required float EventTime = 2;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 2;
  float eventtime() const;
  void set_eventtime(float value);

  // required float EndTime = 3;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  float endtime() const;
  void set_endtime(float value);

  // required float DamageRang = 4;
  bool has_damagerang() const;
  void clear_damagerang();
  static const int kDamageRangFieldNumber = 4;
  float damagerang() const;
  void set_damagerang(float value);

  // required float BackHeroDis = 5;
  bool has_backherodis() const;
  void clear_backherodis();
  static const int kBackHeroDisFieldNumber = 5;
  float backherodis() const;
  void set_backherodis(float value);

  // required float BackNpcDis = 6;
  bool has_backnpcdis() const;
  void clear_backnpcdis();
  static const int kBackNpcDisFieldNumber = 6;
  float backnpcdis() const;
  void set_backnpcdis(float value);

  // @@protoc_insertion_point(class_scope:NFFS.SuwayyahEvents.Suwayyah)
 private:
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_endtime();
  void clear_has_endtime();
  void set_has_damagerang();
  void clear_has_damagerang();
  void set_has_backherodis();
  void clear_has_backherodis();
  void set_has_backnpcdis();
  void clear_has_backnpcdis();
  void set_has_beattackparticle();
  void clear_has_beattackparticle();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();
  void set_has_targetmethodcall();
  void clear_has_targetmethodcall();
  void set_has_targetmethodparam();
  void clear_has_targetmethodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr beattackparticle_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  ::google::protobuf::internal::ArenaStringPtr targetmethodcall_;
  ::google::protobuf::internal::ArenaStringPtr targetmethodparam_;
  int eventtype_;
  float eventtime_;
  float endtime_;
  float damagerang_;
  float backherodis_;
  float backnpcdis_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SuwayyahEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.SuwayyahEvents) */ {
 public:
  SuwayyahEvents();
  virtual ~SuwayyahEvents();

  SuwayyahEvents(const SuwayyahEvents& from);

  inline SuwayyahEvents& operator=(const SuwayyahEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SuwayyahEvents(SuwayyahEvents&& from) noexcept
    : SuwayyahEvents() {
    *this = ::std::move(from);
  }

  inline SuwayyahEvents& operator=(SuwayyahEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuwayyahEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuwayyahEvents* internal_default_instance() {
    return reinterpret_cast<const SuwayyahEvents*>(
               &_SuwayyahEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SuwayyahEvents* other);
  friend void swap(SuwayyahEvents& a, SuwayyahEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SuwayyahEvents* New() const final {
    return CreateMaybeMessage<SuwayyahEvents>(NULL);
  }

  SuwayyahEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SuwayyahEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SuwayyahEvents& from);
  void MergeFrom(const SuwayyahEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuwayyahEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SuwayyahEvents_Suwayyah Suwayyah;

  typedef SuwayyahEvents_ESEType ESEType;
  static const ESEType ESET_SINGLE =
    SuwayyahEvents_ESEType_ESET_SINGLE;
  static const ESEType ESET_SINGLE_AREA =
    SuwayyahEvents_ESEType_ESET_SINGLE_AREA;
  static const ESEType ESET_LEFT_AREA =
    SuwayyahEvents_ESEType_ESET_LEFT_AREA;
  static const ESEType ESET_RIGHT_AREA =
    SuwayyahEvents_ESEType_ESET_RIGHT_AREA;
  static inline bool ESEType_IsValid(int value) {
    return SuwayyahEvents_ESEType_IsValid(value);
  }
  static const ESEType ESEType_MIN =
    SuwayyahEvents_ESEType_ESEType_MIN;
  static const ESEType ESEType_MAX =
    SuwayyahEvents_ESEType_ESEType_MAX;
  static const int ESEType_ARRAYSIZE =
    SuwayyahEvents_ESEType_ESEType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ESEType_descriptor() {
    return SuwayyahEvents_ESEType_descriptor();
  }
  static inline const ::std::string& ESEType_Name(ESEType value) {
    return SuwayyahEvents_ESEType_Name(value);
  }
  static inline bool ESEType_Parse(const ::std::string& name,
      ESEType* value) {
    return SuwayyahEvents_ESEType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.SuwayyahEvents.Suwayyah xSuwayyahList = 1;
  int xsuwayyahlist_size() const;
  void clear_xsuwayyahlist();
  static const int kXSuwayyahListFieldNumber = 1;
  ::NFFS::SuwayyahEvents_Suwayyah* mutable_xsuwayyahlist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::SuwayyahEvents_Suwayyah >*
      mutable_xsuwayyahlist();
  const ::NFFS::SuwayyahEvents_Suwayyah& xsuwayyahlist(int index) const;
  ::NFFS::SuwayyahEvents_Suwayyah* add_xsuwayyahlist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::SuwayyahEvents_Suwayyah >&
      xsuwayyahlist() const;

  // @@protoc_insertion_point(class_scope:NFFS.SuwayyahEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::SuwayyahEvents_Suwayyah > xsuwayyahlist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulletEvents_TacheBomp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.BulletEvents.TacheBomp) */ {
 public:
  BulletEvents_TacheBomp();
  virtual ~BulletEvents_TacheBomp();

  BulletEvents_TacheBomp(const BulletEvents_TacheBomp& from);

  inline BulletEvents_TacheBomp& operator=(const BulletEvents_TacheBomp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulletEvents_TacheBomp(BulletEvents_TacheBomp&& from) noexcept
    : BulletEvents_TacheBomp() {
    *this = ::std::move(from);
  }

  inline BulletEvents_TacheBomp& operator=(BulletEvents_TacheBomp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BulletEvents_TacheBomp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulletEvents_TacheBomp* internal_default_instance() {
    return reinterpret_cast<const BulletEvents_TacheBomp*>(
               &_BulletEvents_TacheBomp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BulletEvents_TacheBomp* other);
  friend void swap(BulletEvents_TacheBomp& a, BulletEvents_TacheBomp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulletEvents_TacheBomp* New() const final {
    return CreateMaybeMessage<BulletEvents_TacheBomp>(NULL);
  }

  BulletEvents_TacheBomp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulletEvents_TacheBomp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulletEvents_TacheBomp& from);
  void MergeFrom(const BulletEvents_TacheBomp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletEvents_TacheBomp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string BompPrefabPath = 3;
  bool has_bompprefabpath() const;
  void clear_bompprefabpath();
  static const int kBompPrefabPathFieldNumber = 3;
  const ::std::string& bompprefabpath() const;
  void set_bompprefabpath(const ::std::string& value);
  #if LANG_CXX11
  void set_bompprefabpath(::std::string&& value);
  #endif
  void set_bompprefabpath(const char* value);
  void set_bompprefabpath(const char* value, size_t size);
  ::std::string* mutable_bompprefabpath();
  ::std::string* release_bompprefabpath();
  void set_allocated_bompprefabpath(::std::string* bompprefabpath);

  // required string BeAttackParticle = 4;
  bool has_beattackparticle() const;
  void clear_beattackparticle();
  static const int kBeAttackParticleFieldNumber = 4;
  const ::std::string& beattackparticle() const;
  void set_beattackparticle(const ::std::string& value);
  #if LANG_CXX11
  void set_beattackparticle(::std::string&& value);
  #endif
  void set_beattackparticle(const char* value);
  void set_beattackparticle(const char* value, size_t size);
  ::std::string* mutable_beattackparticle();
  ::std::string* release_beattackparticle();
  void set_allocated_beattackparticle(::std::string* beattackparticle);

  // required string MethodCall = 7;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 7;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 8;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 8;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required string TargetMethodCall = 9;
  bool has_targetmethodcall() const;
  void clear_targetmethodcall();
  static const int kTargetMethodCallFieldNumber = 9;
  const ::std::string& targetmethodcall() const;
  void set_targetmethodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_targetmethodcall(::std::string&& value);
  #endif
  void set_targetmethodcall(const char* value);
  void set_targetmethodcall(const char* value, size_t size);
  ::std::string* mutable_targetmethodcall();
  ::std::string* release_targetmethodcall();
  void set_allocated_targetmethodcall(::std::string* targetmethodcall);

  // required string TargetMethodParam = 10;
  bool has_targetmethodparam() const;
  void clear_targetmethodparam();
  static const int kTargetMethodParamFieldNumber = 10;
  const ::std::string& targetmethodparam() const;
  void set_targetmethodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_targetmethodparam(::std::string&& value);
  #endif
  void set_targetmethodparam(const char* value);
  void set_targetmethodparam(const char* value, size_t size);
  ::std::string* mutable_targetmethodparam();
  ::std::string* release_targetmethodparam();
  void set_allocated_targetmethodparam(::std::string* targetmethodparam);

  // required float BompTime = 1;
  bool has_bomptime() const;
  void clear_bomptime();
  static const int kBompTimeFieldNumber = 1;
  float bomptime() const;
  void set_bomptime(float value);

  // required float BompRang = 2;
  bool has_bomprang() const;
  void clear_bomprang();
  static const int kBompRangFieldNumber = 2;
  float bomprang() const;
  void set_bomprang(float value);

  // required float BackNpcDis = 5;
  bool has_backnpcdis() const;
  void clear_backnpcdis();
  static const int kBackNpcDisFieldNumber = 5;
  float backnpcdis() const;
  void set_backnpcdis(float value);

  // required float BackHeroDis = 6;
  bool has_backherodis() const;
  void clear_backherodis();
  static const int kBackHeroDisFieldNumber = 6;
  float backherodis() const;
  void set_backherodis(float value);

  // @@protoc_insertion_point(class_scope:NFFS.BulletEvents.TacheBomp)
 private:
  void set_has_bomptime();
  void clear_has_bomptime();
  void set_has_bomprang();
  void clear_has_bomprang();
  void set_has_bompprefabpath();
  void clear_has_bompprefabpath();
  void set_has_beattackparticle();
  void clear_has_beattackparticle();
  void set_has_backnpcdis();
  void clear_has_backnpcdis();
  void set_has_backherodis();
  void clear_has_backherodis();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();
  void set_has_targetmethodcall();
  void clear_has_targetmethodcall();
  void set_has_targetmethodparam();
  void clear_has_targetmethodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bompprefabpath_;
  ::google::protobuf::internal::ArenaStringPtr beattackparticle_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  ::google::protobuf::internal::ArenaStringPtr targetmethodcall_;
  ::google::protobuf::internal::ArenaStringPtr targetmethodparam_;
  float bomptime_;
  float bomprang_;
  float backnpcdis_;
  float backherodis_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulletEvents_Bullet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.BulletEvents.Bullet) */ {
 public:
  BulletEvents_Bullet();
  virtual ~BulletEvents_Bullet();

  BulletEvents_Bullet(const BulletEvents_Bullet& from);

  inline BulletEvents_Bullet& operator=(const BulletEvents_Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulletEvents_Bullet(BulletEvents_Bullet&& from) noexcept
    : BulletEvents_Bullet() {
    *this = ::std::move(from);
  }

  inline BulletEvents_Bullet& operator=(BulletEvents_Bullet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BulletEvents_Bullet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulletEvents_Bullet* internal_default_instance() {
    return reinterpret_cast<const BulletEvents_Bullet*>(
               &_BulletEvents_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BulletEvents_Bullet* other);
  friend void swap(BulletEvents_Bullet& a, BulletEvents_Bullet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulletEvents_Bullet* New() const final {
    return CreateMaybeMessage<BulletEvents_Bullet>(NULL);
  }

  BulletEvents_Bullet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulletEvents_Bullet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulletEvents_Bullet& from);
  void MergeFrom(const BulletEvents_Bullet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletEvents_Bullet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NFFS.BulletEvents.TacheBomp Bomp = 18;
  int bomp_size() const;
  void clear_bomp();
  static const int kBompFieldNumber = 18;
  ::NFFS::BulletEvents_TacheBomp* mutable_bomp(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_TacheBomp >*
      mutable_bomp();
  const ::NFFS::BulletEvents_TacheBomp& bomp(int index) const;
  ::NFFS::BulletEvents_TacheBomp* add_bomp();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_TacheBomp >&
      bomp() const;

  // required string BeAttackParticle = 10;
  bool has_beattackparticle() const;
  void clear_beattackparticle();
  static const int kBeAttackParticleFieldNumber = 10;
  const ::std::string& beattackparticle() const;
  void set_beattackparticle(const ::std::string& value);
  #if LANG_CXX11
  void set_beattackparticle(::std::string&& value);
  #endif
  void set_beattackparticle(const char* value);
  void set_beattackparticle(const char* value, size_t size);
  ::std::string* mutable_beattackparticle();
  ::std::string* release_beattackparticle();
  void set_allocated_beattackparticle(::std::string* beattackparticle);

  // required string FireTacheName = 11;
  bool has_firetachename() const;
  void clear_firetachename();
  static const int kFireTacheNameFieldNumber = 11;
  const ::std::string& firetachename() const;
  void set_firetachename(const ::std::string& value);
  #if LANG_CXX11
  void set_firetachename(::std::string&& value);
  #endif
  void set_firetachename(const char* value);
  void set_firetachename(const char* value, size_t size);
  ::std::string* mutable_firetachename();
  ::std::string* release_firetachename();
  void set_allocated_firetachename(::std::string* firetachename);

  // required string BulletPrefabPath = 13;
  bool has_bulletprefabpath() const;
  void clear_bulletprefabpath();
  static const int kBulletPrefabPathFieldNumber = 13;
  const ::std::string& bulletprefabpath() const;
  void set_bulletprefabpath(const ::std::string& value);
  #if LANG_CXX11
  void set_bulletprefabpath(::std::string&& value);
  #endif
  void set_bulletprefabpath(const char* value);
  void set_bulletprefabpath(const char* value, size_t size);
  ::std::string* mutable_bulletprefabpath();
  ::std::string* release_bulletprefabpath();
  void set_allocated_bulletprefabpath(::std::string* bulletprefabpath);

  // required string MethodCall = 14;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 14;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 15;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 15;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required string TargetMethodCall = 16;
  bool has_targetmethodcall() const;
  void clear_targetmethodcall();
  static const int kTargetMethodCallFieldNumber = 16;
  const ::std::string& targetmethodcall() const;
  void set_targetmethodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_targetmethodcall(::std::string&& value);
  #endif
  void set_targetmethodcall(const char* value);
  void set_targetmethodcall(const char* value, size_t size);
  ::std::string* mutable_targetmethodcall();
  ::std::string* release_targetmethodcall();
  void set_allocated_targetmethodcall(::std::string* targetmethodcall);

  // required string TargetMethodParam = 17;
  bool has_targetmethodparam() const;
  void clear_targetmethodparam();
  static const int kTargetMethodParamFieldNumber = 17;
  const ::std::string& targetmethodparam() const;
  void set_targetmethodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_targetmethodparam(::std::string&& value);
  #endif
  void set_targetmethodparam(const char* value);
  void set_targetmethodparam(const char* value, size_t size);
  ::std::string* mutable_targetmethodparam();
  ::std::string* release_targetmethodparam();
  void set_allocated_targetmethodparam(::std::string* targetmethodparam);

  // required .NFFS.FSVector3 FireTacheOffest = 12;
  bool has_firetacheoffest() const;
  void clear_firetacheoffest();
  static const int kFireTacheOffestFieldNumber = 12;
  private:
  const ::NFFS::FSVector3& _internal_firetacheoffest() const;
  public:
  const ::NFFS::FSVector3& firetacheoffest() const;
  ::NFFS::FSVector3* release_firetacheoffest();
  ::NFFS::FSVector3* mutable_firetacheoffest();
  void set_allocated_firetacheoffest(::NFFS::FSVector3* firetacheoffest);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.BulletEvents.EBEType EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::BulletEvents_EBEType eventtype() const;
  void set_eventtype(::NFFS::BulletEvents_EBEType value);

  // required float Speed = 3;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  float speed() const;
  void set_speed(float value);

  // required float MaxDis = 4;
  bool has_maxdis() const;
  void clear_maxdis();
  static const int kMaxDisFieldNumber = 4;
  float maxdis() const;
  void set_maxdis(float value);

  // required float BulletRang = 5;
  bool has_bulletrang() const;
  void clear_bulletrang();
  static const int kBulletRangFieldNumber = 5;
  float bulletrang() const;
  void set_bulletrang(float value);

  // required .NFFS.BulletEvents.EBE_BACKType BulletBackType = 6;
  bool has_bulletbacktype() const;
  void clear_bulletbacktype();
  static const int kBulletBackTypeFieldNumber = 6;
  ::NFFS::BulletEvents_EBE_BACKType bulletbacktype() const;
  void set_bulletbacktype(::NFFS::BulletEvents_EBE_BACKType value);

  // required float BackHeroDis = 7;
  bool has_backherodis() const;
  void clear_backherodis();
  static const int kBackHeroDisFieldNumber = 7;
  float backherodis() const;
  void set_backherodis(float value);

  // required float BackNpcDis = 8;
  bool has_backnpcdis() const;
  void clear_backnpcdis();
  static const int kBackNpcDisFieldNumber = 8;
  float backnpcdis() const;
  void set_backnpcdis(float value);

  // required int32 TacheDetroy = 9;
  bool has_tachedetroy() const;
  void clear_tachedetroy();
  static const int kTacheDetroyFieldNumber = 9;
  ::google::protobuf::int32 tachedetroy() const;
  void set_tachedetroy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NFFS.BulletEvents.Bullet)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_speed();
  void clear_has_speed();
  void set_has_maxdis();
  void clear_has_maxdis();
  void set_has_bulletrang();
  void clear_has_bulletrang();
  void set_has_bulletbacktype();
  void clear_has_bulletbacktype();
  void set_has_backherodis();
  void clear_has_backherodis();
  void set_has_backnpcdis();
  void clear_has_backnpcdis();
  void set_has_tachedetroy();
  void clear_has_tachedetroy();
  void set_has_beattackparticle();
  void clear_has_beattackparticle();
  void set_has_firetachename();
  void clear_has_firetachename();
  void set_has_firetacheoffest();
  void clear_has_firetacheoffest();
  void set_has_bulletprefabpath();
  void clear_has_bulletprefabpath();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();
  void set_has_targetmethodcall();
  void clear_has_targetmethodcall();
  void set_has_targetmethodparam();
  void clear_has_targetmethodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_TacheBomp > bomp_;
  ::google::protobuf::internal::ArenaStringPtr beattackparticle_;
  ::google::protobuf::internal::ArenaStringPtr firetachename_;
  ::google::protobuf::internal::ArenaStringPtr bulletprefabpath_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  ::google::protobuf::internal::ArenaStringPtr targetmethodcall_;
  ::google::protobuf::internal::ArenaStringPtr targetmethodparam_;
  ::NFFS::FSVector3* firetacheoffest_;
  float eventtime_;
  int eventtype_;
  float speed_;
  float maxdis_;
  float bulletrang_;
  int bulletbacktype_;
  float backherodis_;
  float backnpcdis_;
  ::google::protobuf::int32 tachedetroy_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulletEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.BulletEvents) */ {
 public:
  BulletEvents();
  virtual ~BulletEvents();

  BulletEvents(const BulletEvents& from);

  inline BulletEvents& operator=(const BulletEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulletEvents(BulletEvents&& from) noexcept
    : BulletEvents() {
    *this = ::std::move(from);
  }

  inline BulletEvents& operator=(BulletEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BulletEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulletEvents* internal_default_instance() {
    return reinterpret_cast<const BulletEvents*>(
               &_BulletEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BulletEvents* other);
  friend void swap(BulletEvents& a, BulletEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulletEvents* New() const final {
    return CreateMaybeMessage<BulletEvents>(NULL);
  }

  BulletEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulletEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulletEvents& from);
  void MergeFrom(const BulletEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BulletEvents_TacheBomp TacheBomp;
  typedef BulletEvents_Bullet Bullet;

  typedef BulletEvents_EBEType EBEType;
  static const EBEType ESET_TARGET =
    BulletEvents_EBEType_ESET_TARGET;
  static const EBEType ESET_POSITION =
    BulletEvents_EBEType_ESET_POSITION;
  static inline bool EBEType_IsValid(int value) {
    return BulletEvents_EBEType_IsValid(value);
  }
  static const EBEType EBEType_MIN =
    BulletEvents_EBEType_EBEType_MIN;
  static const EBEType EBEType_MAX =
    BulletEvents_EBEType_EBEType_MAX;
  static const int EBEType_ARRAYSIZE =
    BulletEvents_EBEType_EBEType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EBEType_descriptor() {
    return BulletEvents_EBEType_descriptor();
  }
  static inline const ::std::string& EBEType_Name(EBEType value) {
    return BulletEvents_EBEType_Name(value);
  }
  static inline bool EBEType_Parse(const ::std::string& name,
      EBEType* value) {
    return BulletEvents_EBEType_Parse(name, value);
  }

  typedef BulletEvents_EBE_BACKType EBE_BACKType;
  static const EBE_BACKType EBEBT_BACK =
    BulletEvents_EBE_BACKType_EBEBT_BACK;
  static const EBE_BACKType EBEBT_SIDE =
    BulletEvents_EBE_BACKType_EBEBT_SIDE;
  static inline bool EBE_BACKType_IsValid(int value) {
    return BulletEvents_EBE_BACKType_IsValid(value);
  }
  static const EBE_BACKType EBE_BACKType_MIN =
    BulletEvents_EBE_BACKType_EBE_BACKType_MIN;
  static const EBE_BACKType EBE_BACKType_MAX =
    BulletEvents_EBE_BACKType_EBE_BACKType_MAX;
  static const int EBE_BACKType_ARRAYSIZE =
    BulletEvents_EBE_BACKType_EBE_BACKType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EBE_BACKType_descriptor() {
    return BulletEvents_EBE_BACKType_descriptor();
  }
  static inline const ::std::string& EBE_BACKType_Name(EBE_BACKType value) {
    return BulletEvents_EBE_BACKType_Name(value);
  }
  static inline bool EBE_BACKType_Parse(const ::std::string& name,
      EBE_BACKType* value) {
    return BulletEvents_EBE_BACKType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.BulletEvents.Bullet xBulletList = 1;
  int xbulletlist_size() const;
  void clear_xbulletlist();
  static const int kXBulletListFieldNumber = 1;
  ::NFFS::BulletEvents_Bullet* mutable_xbulletlist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_Bullet >*
      mutable_xbulletlist();
  const ::NFFS::BulletEvents_Bullet& xbulletlist(int index) const;
  ::NFFS::BulletEvents_Bullet* add_xbulletlist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_Bullet >&
      xbulletlist() const;

  // @@protoc_insertion_point(class_scope:NFFS.BulletEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_Bullet > xbulletlist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimatorMoves_Move : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.AnimatorMoves.Move) */ {
 public:
  AnimatorMoves_Move();
  virtual ~AnimatorMoves_Move();

  AnimatorMoves_Move(const AnimatorMoves_Move& from);

  inline AnimatorMoves_Move& operator=(const AnimatorMoves_Move& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimatorMoves_Move(AnimatorMoves_Move&& from) noexcept
    : AnimatorMoves_Move() {
    *this = ::std::move(from);
  }

  inline AnimatorMoves_Move& operator=(AnimatorMoves_Move&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimatorMoves_Move& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimatorMoves_Move* internal_default_instance() {
    return reinterpret_cast<const AnimatorMoves_Move*>(
               &_AnimatorMoves_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AnimatorMoves_Move* other);
  friend void swap(AnimatorMoves_Move& a, AnimatorMoves_Move& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimatorMoves_Move* New() const final {
    return CreateMaybeMessage<AnimatorMoves_Move>(NULL);
  }

  AnimatorMoves_Move* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimatorMoves_Move>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimatorMoves_Move& from);
  void MergeFrom(const AnimatorMoves_Move& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimatorMoves_Move* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string MethodCall = 5;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 5;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 6;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 6;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.AnimatorMoves.EAMType EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::AnimatorMoves_EAMType eventtype() const;
  void set_eventtype(::NFFS::AnimatorMoves_EAMType value);

  // required float MoveDis = 3;
  bool has_movedis() const;
  void clear_movedis();
  static const int kMoveDisFieldNumber = 3;
  float movedis() const;
  void set_movedis(float value);

  // required float MoveTime = 4;
  bool has_movetime() const;
  void clear_movetime();
  static const int kMoveTimeFieldNumber = 4;
  float movetime() const;
  void set_movetime(float value);

  // @@protoc_insertion_point(class_scope:NFFS.AnimatorMoves.Move)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_movedis();
  void clear_has_movedis();
  void set_has_movetime();
  void clear_has_movetime();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  float eventtime_;
  int eventtype_;
  float movedis_;
  float movetime_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimatorMoves : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.AnimatorMoves) */ {
 public:
  AnimatorMoves();
  virtual ~AnimatorMoves();

  AnimatorMoves(const AnimatorMoves& from);

  inline AnimatorMoves& operator=(const AnimatorMoves& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimatorMoves(AnimatorMoves&& from) noexcept
    : AnimatorMoves() {
    *this = ::std::move(from);
  }

  inline AnimatorMoves& operator=(AnimatorMoves&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimatorMoves& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimatorMoves* internal_default_instance() {
    return reinterpret_cast<const AnimatorMoves*>(
               &_AnimatorMoves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AnimatorMoves* other);
  friend void swap(AnimatorMoves& a, AnimatorMoves& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimatorMoves* New() const final {
    return CreateMaybeMessage<AnimatorMoves>(NULL);
  }

  AnimatorMoves* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimatorMoves>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimatorMoves& from);
  void MergeFrom(const AnimatorMoves& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimatorMoves* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnimatorMoves_Move Move;

  typedef AnimatorMoves_EAMType EAMType;
  static const EAMType EAMT_FORWARD =
    AnimatorMoves_EAMType_EAMT_FORWARD;
  static const EAMType EAMT_BACK =
    AnimatorMoves_EAMType_EAMT_BACK;
  static const EAMType EAMT_LEFT =
    AnimatorMoves_EAMType_EAMT_LEFT;
  static const EAMType EAMT_RIGHT =
    AnimatorMoves_EAMType_EAMT_RIGHT;
  static inline bool EAMType_IsValid(int value) {
    return AnimatorMoves_EAMType_IsValid(value);
  }
  static const EAMType EAMType_MIN =
    AnimatorMoves_EAMType_EAMType_MIN;
  static const EAMType EAMType_MAX =
    AnimatorMoves_EAMType_EAMType_MAX;
  static const int EAMType_ARRAYSIZE =
    AnimatorMoves_EAMType_EAMType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EAMType_descriptor() {
    return AnimatorMoves_EAMType_descriptor();
  }
  static inline const ::std::string& EAMType_Name(EAMType value) {
    return AnimatorMoves_EAMType_Name(value);
  }
  static inline bool EAMType_Parse(const ::std::string& name,
      EAMType* value) {
    return AnimatorMoves_EAMType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.AnimatorMoves.Move xMoveList = 1;
  int xmovelist_size() const;
  void clear_xmovelist();
  static const int kXMoveListFieldNumber = 1;
  ::NFFS::AnimatorMoves_Move* mutable_xmovelist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorMoves_Move >*
      mutable_xmovelist();
  const ::NFFS::AnimatorMoves_Move& xmovelist(int index) const;
  ::NFFS::AnimatorMoves_Move* add_xmovelist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorMoves_Move >&
      xmovelist() const;

  // @@protoc_insertion_point(class_scope:NFFS.AnimatorMoves)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorMoves_Move > xmovelist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraControlEvents_Camera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.CameraControlEvents.Camera) */ {
 public:
  CameraControlEvents_Camera();
  virtual ~CameraControlEvents_Camera();

  CameraControlEvents_Camera(const CameraControlEvents_Camera& from);

  inline CameraControlEvents_Camera& operator=(const CameraControlEvents_Camera& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraControlEvents_Camera(CameraControlEvents_Camera&& from) noexcept
    : CameraControlEvents_Camera() {
    *this = ::std::move(from);
  }

  inline CameraControlEvents_Camera& operator=(CameraControlEvents_Camera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraControlEvents_Camera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraControlEvents_Camera* internal_default_instance() {
    return reinterpret_cast<const CameraControlEvents_Camera*>(
               &_CameraControlEvents_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CameraControlEvents_Camera* other);
  friend void swap(CameraControlEvents_Camera& a, CameraControlEvents_Camera& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraControlEvents_Camera* New() const final {
    return CreateMaybeMessage<CameraControlEvents_Camera>(NULL);
  }

  CameraControlEvents_Camera* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraControlEvents_Camera>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraControlEvents_Camera& from);
  void MergeFrom(const CameraControlEvents_Camera& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraControlEvents_Camera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string MethodCall = 5;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 5;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 6;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 6;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required .NFFS.FSVector3 AmountParam = 3;
  bool has_amountparam() const;
  void clear_amountparam();
  static const int kAmountParamFieldNumber = 3;
  private:
  const ::NFFS::FSVector3& _internal_amountparam() const;
  public:
  const ::NFFS::FSVector3& amountparam() const;
  ::NFFS::FSVector3* release_amountparam();
  ::NFFS::FSVector3* mutable_amountparam();
  void set_allocated_amountparam(::NFFS::FSVector3* amountparam);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.CameraControlEvents.ECEType EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::CameraControlEvents_ECEType eventtype() const;
  void set_eventtype(::NFFS::CameraControlEvents_ECEType value);

  // required float ShakeTime = 4;
  bool has_shaketime() const;
  void clear_shaketime();
  static const int kShakeTimeFieldNumber = 4;
  float shaketime() const;
  void set_shaketime(float value);

  // @@protoc_insertion_point(class_scope:NFFS.CameraControlEvents.Camera)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_amountparam();
  void clear_has_amountparam();
  void set_has_shaketime();
  void clear_has_shaketime();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  ::NFFS::FSVector3* amountparam_;
  float eventtime_;
  int eventtype_;
  float shaketime_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraControlEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.CameraControlEvents) */ {
 public:
  CameraControlEvents();
  virtual ~CameraControlEvents();

  CameraControlEvents(const CameraControlEvents& from);

  inline CameraControlEvents& operator=(const CameraControlEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraControlEvents(CameraControlEvents&& from) noexcept
    : CameraControlEvents() {
    *this = ::std::move(from);
  }

  inline CameraControlEvents& operator=(CameraControlEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraControlEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraControlEvents* internal_default_instance() {
    return reinterpret_cast<const CameraControlEvents*>(
               &_CameraControlEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CameraControlEvents* other);
  friend void swap(CameraControlEvents& a, CameraControlEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraControlEvents* New() const final {
    return CreateMaybeMessage<CameraControlEvents>(NULL);
  }

  CameraControlEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraControlEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraControlEvents& from);
  void MergeFrom(const CameraControlEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraControlEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraControlEvents_Camera Camera;

  typedef CameraControlEvents_ECEType ECEType;
  static const ECEType Earthquake =
    CameraControlEvents_ECEType_Earthquake;
  static const ECEType Explosion =
    CameraControlEvents_ECEType_Explosion;
  static const ECEType No =
    CameraControlEvents_ECEType_No;
  static const ECEType FireKick =
    CameraControlEvents_ECEType_FireKick;
  static const ECEType Stomp =
    CameraControlEvents_ECEType_Stomp;
  static const ECEType Yes =
    CameraControlEvents_ECEType_Yes;
  static const ECEType SprintShake =
    CameraControlEvents_ECEType_SprintShake;
  static const ECEType FreeMode =
    CameraControlEvents_ECEType_FreeMode;
  static const ECEType MainRPGMode =
    CameraControlEvents_ECEType_MainRPGMode;
  static inline bool ECEType_IsValid(int value) {
    return CameraControlEvents_ECEType_IsValid(value);
  }
  static const ECEType ECEType_MIN =
    CameraControlEvents_ECEType_ECEType_MIN;
  static const ECEType ECEType_MAX =
    CameraControlEvents_ECEType_ECEType_MAX;
  static const int ECEType_ARRAYSIZE =
    CameraControlEvents_ECEType_ECEType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ECEType_descriptor() {
    return CameraControlEvents_ECEType_descriptor();
  }
  static inline const ::std::string& ECEType_Name(ECEType value) {
    return CameraControlEvents_ECEType_Name(value);
  }
  static inline bool ECEType_Parse(const ::std::string& name,
      ECEType* value) {
    return CameraControlEvents_ECEType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.CameraControlEvents.Camera xCameraList = 1;
  int xcameralist_size() const;
  void clear_xcameralist();
  static const int kXCameraListFieldNumber = 1;
  ::NFFS::CameraControlEvents_Camera* mutable_xcameralist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::CameraControlEvents_Camera >*
      mutable_xcameralist();
  const ::NFFS::CameraControlEvents_Camera& xcameralist(int index) const;
  ::NFFS::CameraControlEvents_Camera* add_xcameralist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::CameraControlEvents_Camera >&
      xcameralist() const;

  // @@protoc_insertion_point(class_scope:NFFS.CameraControlEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::CameraControlEvents_Camera > xcameralist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParticleEvents_Particle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.ParticleEvents.Particle) */ {
 public:
  ParticleEvents_Particle();
  virtual ~ParticleEvents_Particle();

  ParticleEvents_Particle(const ParticleEvents_Particle& from);

  inline ParticleEvents_Particle& operator=(const ParticleEvents_Particle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParticleEvents_Particle(ParticleEvents_Particle&& from) noexcept
    : ParticleEvents_Particle() {
    *this = ::std::move(from);
  }

  inline ParticleEvents_Particle& operator=(ParticleEvents_Particle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticleEvents_Particle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParticleEvents_Particle* internal_default_instance() {
    return reinterpret_cast<const ParticleEvents_Particle*>(
               &_ParticleEvents_Particle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ParticleEvents_Particle* other);
  friend void swap(ParticleEvents_Particle& a, ParticleEvents_Particle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParticleEvents_Particle* New() const final {
    return CreateMaybeMessage<ParticleEvents_Particle>(NULL);
  }

  ParticleEvents_Particle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParticleEvents_Particle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParticleEvents_Particle& from);
  void MergeFrom(const ParticleEvents_Particle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticleEvents_Particle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ParticlePath = 4;
  bool has_particlepath() const;
  void clear_particlepath();
  static const int kParticlePathFieldNumber = 4;
  const ::std::string& particlepath() const;
  void set_particlepath(const ::std::string& value);
  #if LANG_CXX11
  void set_particlepath(::std::string&& value);
  #endif
  void set_particlepath(const char* value);
  void set_particlepath(const char* value, size_t size);
  ::std::string* mutable_particlepath();
  ::std::string* release_particlepath();
  void set_allocated_particlepath(::std::string* particlepath);

  // required string TargetTacheName = 5;
  bool has_targettachename() const;
  void clear_targettachename();
  static const int kTargetTacheNameFieldNumber = 5;
  const ::std::string& targettachename() const;
  void set_targettachename(const ::std::string& value);
  #if LANG_CXX11
  void set_targettachename(::std::string&& value);
  #endif
  void set_targettachename(const char* value);
  void set_targettachename(const char* value, size_t size);
  ::std::string* mutable_targettachename();
  ::std::string* release_targettachename();
  void set_allocated_targettachename(::std::string* targettachename);

  // required string MethodCall = 10;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 10;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 11;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 11;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required .NFFS.FSVector3 TargetTacheOffest = 6;
  bool has_targettacheoffest() const;
  void clear_targettacheoffest();
  static const int kTargetTacheOffestFieldNumber = 6;
  private:
  const ::NFFS::FSVector3& _internal_targettacheoffest() const;
  public:
  const ::NFFS::FSVector3& targettacheoffest() const;
  ::NFFS::FSVector3* release_targettacheoffest();
  ::NFFS::FSVector3* mutable_targettacheoffest();
  void set_allocated_targettacheoffest(::NFFS::FSVector3* targettacheoffest);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.ParticleEvents.EPERTYPE Rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  ::NFFS::ParticleEvents_EPERTYPE rotation() const;
  void set_rotation(::NFFS::ParticleEvents_EPERTYPE value);

  // required int32 CastToSurface = 7;
  bool has_casttosurface() const;
  void clear_casttosurface();
  static const int kCastToSurfaceFieldNumber = 7;
  ::google::protobuf::int32 casttosurface() const;
  void set_casttosurface(::google::protobuf::int32 value);

  // required int32 BindTarget = 8;
  bool has_bindtarget() const;
  void clear_bindtarget();
  static const int kBindTargetFieldNumber = 8;
  ::google::protobuf::int32 bindtarget() const;
  void set_bindtarget(::google::protobuf::int32 value);

  // required float DestroyTime = 9;
  bool has_destroytime() const;
  void clear_destroytime();
  static const int kDestroyTimeFieldNumber = 9;
  float destroytime() const;
  void set_destroytime(float value);

  // @@protoc_insertion_point(class_scope:NFFS.ParticleEvents.Particle)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_rotation();
  void clear_has_rotation();
  void set_has_particlepath();
  void clear_has_particlepath();
  void set_has_targettachename();
  void clear_has_targettachename();
  void set_has_targettacheoffest();
  void clear_has_targettacheoffest();
  void set_has_casttosurface();
  void clear_has_casttosurface();
  void set_has_bindtarget();
  void clear_has_bindtarget();
  void set_has_destroytime();
  void clear_has_destroytime();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr particlepath_;
  ::google::protobuf::internal::ArenaStringPtr targettachename_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  ::NFFS::FSVector3* targettacheoffest_;
  float eventtime_;
  int rotation_;
  ::google::protobuf::int32 casttosurface_;
  ::google::protobuf::int32 bindtarget_;
  float destroytime_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParticleEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.ParticleEvents) */ {
 public:
  ParticleEvents();
  virtual ~ParticleEvents();

  ParticleEvents(const ParticleEvents& from);

  inline ParticleEvents& operator=(const ParticleEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParticleEvents(ParticleEvents&& from) noexcept
    : ParticleEvents() {
    *this = ::std::move(from);
  }

  inline ParticleEvents& operator=(ParticleEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticleEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParticleEvents* internal_default_instance() {
    return reinterpret_cast<const ParticleEvents*>(
               &_ParticleEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ParticleEvents* other);
  friend void swap(ParticleEvents& a, ParticleEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParticleEvents* New() const final {
    return CreateMaybeMessage<ParticleEvents>(NULL);
  }

  ParticleEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParticleEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParticleEvents& from);
  void MergeFrom(const ParticleEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParticleEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParticleEvents_Particle Particle;

  typedef ParticleEvents_EPERTYPE EPERTYPE;
  static const EPERTYPE NONE =
    ParticleEvents_EPERTYPE_NONE;
  static const EPERTYPE MatchTarget =
    ParticleEvents_EPERTYPE_MatchTarget;
  static const EPERTYPE Random_X =
    ParticleEvents_EPERTYPE_Random_X;
  static const EPERTYPE Random_Y =
    ParticleEvents_EPERTYPE_Random_Y;
  static const EPERTYPE Random_Z =
    ParticleEvents_EPERTYPE_Random_Z;
  static const EPERTYPE Random_XY =
    ParticleEvents_EPERTYPE_Random_XY;
  static const EPERTYPE Random_XZ =
    ParticleEvents_EPERTYPE_Random_XZ;
  static const EPERTYPE Random_YZ =
    ParticleEvents_EPERTYPE_Random_YZ;
  static const EPERTYPE Random_XYZ =
    ParticleEvents_EPERTYPE_Random_XYZ;
  static inline bool EPERTYPE_IsValid(int value) {
    return ParticleEvents_EPERTYPE_IsValid(value);
  }
  static const EPERTYPE EPERTYPE_MIN =
    ParticleEvents_EPERTYPE_EPERTYPE_MIN;
  static const EPERTYPE EPERTYPE_MAX =
    ParticleEvents_EPERTYPE_EPERTYPE_MAX;
  static const int EPERTYPE_ARRAYSIZE =
    ParticleEvents_EPERTYPE_EPERTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EPERTYPE_descriptor() {
    return ParticleEvents_EPERTYPE_descriptor();
  }
  static inline const ::std::string& EPERTYPE_Name(EPERTYPE value) {
    return ParticleEvents_EPERTYPE_Name(value);
  }
  static inline bool EPERTYPE_Parse(const ::std::string& name,
      EPERTYPE* value) {
    return ParticleEvents_EPERTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.ParticleEvents.Particle xParticleList = 1;
  int xparticlelist_size() const;
  void clear_xparticlelist();
  static const int kXParticleListFieldNumber = 1;
  ::NFFS::ParticleEvents_Particle* mutable_xparticlelist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::ParticleEvents_Particle >*
      mutable_xparticlelist();
  const ::NFFS::ParticleEvents_Particle& xparticlelist(int index) const;
  ::NFFS::ParticleEvents_Particle* add_xparticlelist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::ParticleEvents_Particle >&
      xparticlelist() const;

  // @@protoc_insertion_point(class_scope:NFFS.ParticleEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::ParticleEvents_Particle > xparticlelist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnableEvents_Enable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.EnableEvents.Enable) */ {
 public:
  EnableEvents_Enable();
  virtual ~EnableEvents_Enable();

  EnableEvents_Enable(const EnableEvents_Enable& from);

  inline EnableEvents_Enable& operator=(const EnableEvents_Enable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableEvents_Enable(EnableEvents_Enable&& from) noexcept
    : EnableEvents_Enable() {
    *this = ::std::move(from);
  }

  inline EnableEvents_Enable& operator=(EnableEvents_Enable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableEvents_Enable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableEvents_Enable* internal_default_instance() {
    return reinterpret_cast<const EnableEvents_Enable*>(
               &_EnableEvents_Enable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(EnableEvents_Enable* other);
  friend void swap(EnableEvents_Enable& a, EnableEvents_Enable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableEvents_Enable* New() const final {
    return CreateMaybeMessage<EnableEvents_Enable>(NULL);
  }

  EnableEvents_Enable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnableEvents_Enable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnableEvents_Enable& from);
  void MergeFrom(const EnableEvents_Enable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableEvents_Enable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TargetName = 3;
  bool has_targetname() const;
  void clear_targetname();
  static const int kTargetNameFieldNumber = 3;
  const ::std::string& targetname() const;
  void set_targetname(const ::std::string& value);
  #if LANG_CXX11
  void set_targetname(::std::string&& value);
  #endif
  void set_targetname(const char* value);
  void set_targetname(const char* value, size_t size);
  ::std::string* mutable_targetname();
  ::std::string* release_targetname();
  void set_allocated_targetname(::std::string* targetname);

  // required string MethodCall = 4;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 4;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 5;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 5;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.EnableEvents.EEETYPE EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::EnableEvents_EEETYPE eventtype() const;
  void set_eventtype(::NFFS::EnableEvents_EEETYPE value);

  // @@protoc_insertion_point(class_scope:NFFS.EnableEvents.Enable)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_targetname();
  void clear_has_targetname();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr targetname_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  float eventtime_;
  int eventtype_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnableEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.EnableEvents) */ {
 public:
  EnableEvents();
  virtual ~EnableEvents();

  EnableEvents(const EnableEvents& from);

  inline EnableEvents& operator=(const EnableEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnableEvents(EnableEvents&& from) noexcept
    : EnableEvents() {
    *this = ::std::move(from);
  }

  inline EnableEvents& operator=(EnableEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnableEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableEvents* internal_default_instance() {
    return reinterpret_cast<const EnableEvents*>(
               &_EnableEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(EnableEvents* other);
  friend void swap(EnableEvents& a, EnableEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnableEvents* New() const final {
    return CreateMaybeMessage<EnableEvents>(NULL);
  }

  EnableEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnableEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnableEvents& from);
  void MergeFrom(const EnableEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EnableEvents_Enable Enable;

  typedef EnableEvents_EEETYPE EEETYPE;
  static const EEETYPE INIT =
    EnableEvents_EEETYPE_INIT;
  static const EEETYPE FINAL =
    EnableEvents_EEETYPE_FINAL;
  static inline bool EEETYPE_IsValid(int value) {
    return EnableEvents_EEETYPE_IsValid(value);
  }
  static const EEETYPE EEETYPE_MIN =
    EnableEvents_EEETYPE_EEETYPE_MIN;
  static const EEETYPE EEETYPE_MAX =
    EnableEvents_EEETYPE_EEETYPE_MAX;
  static const int EEETYPE_ARRAYSIZE =
    EnableEvents_EEETYPE_EEETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EEETYPE_descriptor() {
    return EnableEvents_EEETYPE_descriptor();
  }
  static inline const ::std::string& EEETYPE_Name(EEETYPE value) {
    return EnableEvents_EEETYPE_Name(value);
  }
  static inline bool EEETYPE_Parse(const ::std::string& name,
      EEETYPE* value) {
    return EnableEvents_EEETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.EnableEvents.Enable xEnableList = 1;
  int xenablelist_size() const;
  void clear_xenablelist();
  static const int kXEnableListFieldNumber = 1;
  ::NFFS::EnableEvents_Enable* mutable_xenablelist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::EnableEvents_Enable >*
      mutable_xenablelist();
  const ::NFFS::EnableEvents_Enable& xenablelist(int index) const;
  ::NFFS::EnableEvents_Enable* add_xenablelist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::EnableEvents_Enable >&
      xenablelist() const;

  // @@protoc_insertion_point(class_scope:NFFS.EnableEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::EnableEvents_Enable > xenablelist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrailEvents_Trail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.TrailEvents.Trail) */ {
 public:
  TrailEvents_Trail();
  virtual ~TrailEvents_Trail();

  TrailEvents_Trail(const TrailEvents_Trail& from);

  inline TrailEvents_Trail& operator=(const TrailEvents_Trail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrailEvents_Trail(TrailEvents_Trail&& from) noexcept
    : TrailEvents_Trail() {
    *this = ::std::move(from);
  }

  inline TrailEvents_Trail& operator=(TrailEvents_Trail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrailEvents_Trail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrailEvents_Trail* internal_default_instance() {
    return reinterpret_cast<const TrailEvents_Trail*>(
               &_TrailEvents_Trail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(TrailEvents_Trail* other);
  friend void swap(TrailEvents_Trail& a, TrailEvents_Trail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrailEvents_Trail* New() const final {
    return CreateMaybeMessage<TrailEvents_Trail>(NULL);
  }

  TrailEvents_Trail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrailEvents_Trail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrailEvents_Trail& from);
  void MergeFrom(const TrailEvents_Trail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrailEvents_Trail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string TargetName = 3;
  bool has_targetname() const;
  void clear_targetname();
  static const int kTargetNameFieldNumber = 3;
  const ::std::string& targetname() const;
  void set_targetname(const ::std::string& value);
  #if LANG_CXX11
  void set_targetname(::std::string&& value);
  #endif
  void set_targetname(const char* value);
  void set_targetname(const char* value, size_t size);
  ::std::string* mutable_targetname();
  ::std::string* release_targetname();
  void set_allocated_targetname(::std::string* targetname);

  // required string MethodCall = 4;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 4;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 5;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 5;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.TrailEvents.TEETYPE EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::TrailEvents_TEETYPE eventtype() const;
  void set_eventtype(::NFFS::TrailEvents_TEETYPE value);

  // @@protoc_insertion_point(class_scope:NFFS.TrailEvents.Trail)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_targetname();
  void clear_has_targetname();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr targetname_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  float eventtime_;
  int eventtype_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrailEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.TrailEvents) */ {
 public:
  TrailEvents();
  virtual ~TrailEvents();

  TrailEvents(const TrailEvents& from);

  inline TrailEvents& operator=(const TrailEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrailEvents(TrailEvents&& from) noexcept
    : TrailEvents() {
    *this = ::std::move(from);
  }

  inline TrailEvents& operator=(TrailEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrailEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrailEvents* internal_default_instance() {
    return reinterpret_cast<const TrailEvents*>(
               &_TrailEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(TrailEvents* other);
  friend void swap(TrailEvents& a, TrailEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrailEvents* New() const final {
    return CreateMaybeMessage<TrailEvents>(NULL);
  }

  TrailEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrailEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrailEvents& from);
  void MergeFrom(const TrailEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrailEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TrailEvents_Trail Trail;

  typedef TrailEvents_TEETYPE TEETYPE;
  static const TEETYPE INIT =
    TrailEvents_TEETYPE_INIT;
  static const TEETYPE FINAL =
    TrailEvents_TEETYPE_FINAL;
  static inline bool TEETYPE_IsValid(int value) {
    return TrailEvents_TEETYPE_IsValid(value);
  }
  static const TEETYPE TEETYPE_MIN =
    TrailEvents_TEETYPE_TEETYPE_MIN;
  static const TEETYPE TEETYPE_MAX =
    TrailEvents_TEETYPE_TEETYPE_MAX;
  static const int TEETYPE_ARRAYSIZE =
    TrailEvents_TEETYPE_TEETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TEETYPE_descriptor() {
    return TrailEvents_TEETYPE_descriptor();
  }
  static inline const ::std::string& TEETYPE_Name(TEETYPE value) {
    return TrailEvents_TEETYPE_Name(value);
  }
  static inline bool TEETYPE_Parse(const ::std::string& name,
      TEETYPE* value) {
    return TrailEvents_TEETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.TrailEvents.Trail xTrailList = 1;
  int xtraillist_size() const;
  void clear_xtraillist();
  static const int kXTrailListFieldNumber = 1;
  ::NFFS::TrailEvents_Trail* mutable_xtraillist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::TrailEvents_Trail >*
      mutable_xtraillist();
  const ::NFFS::TrailEvents_Trail& xtraillist(int index) const;
  ::NFFS::TrailEvents_Trail* add_xtraillist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::TrailEvents_Trail >&
      xtraillist() const;

  // @@protoc_insertion_point(class_scope:NFFS.TrailEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::TrailEvents_Trail > xtraillist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioEvents_Audio : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.AudioEvents.Audio) */ {
 public:
  AudioEvents_Audio();
  virtual ~AudioEvents_Audio();

  AudioEvents_Audio(const AudioEvents_Audio& from);

  inline AudioEvents_Audio& operator=(const AudioEvents_Audio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioEvents_Audio(AudioEvents_Audio&& from) noexcept
    : AudioEvents_Audio() {
    *this = ::std::move(from);
  }

  inline AudioEvents_Audio& operator=(AudioEvents_Audio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioEvents_Audio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioEvents_Audio* internal_default_instance() {
    return reinterpret_cast<const AudioEvents_Audio*>(
               &_AudioEvents_Audio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AudioEvents_Audio* other);
  friend void swap(AudioEvents_Audio& a, AudioEvents_Audio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioEvents_Audio* New() const final {
    return CreateMaybeMessage<AudioEvents_Audio>(NULL);
  }

  AudioEvents_Audio* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioEvents_Audio>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioEvents_Audio& from);
  void MergeFrom(const AudioEvents_Audio& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioEvents_Audio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string AudioName = 3;
  bool has_audioname() const;
  void clear_audioname();
  static const int kAudioNameFieldNumber = 3;
  const ::std::string& audioname() const;
  void set_audioname(const ::std::string& value);
  #if LANG_CXX11
  void set_audioname(::std::string&& value);
  #endif
  void set_audioname(const char* value);
  void set_audioname(const char* value, size_t size);
  ::std::string* mutable_audioname();
  ::std::string* release_audioname();
  void set_allocated_audioname(::std::string* audioname);

  // required string MethodCall = 4;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 4;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 5;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 5;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.AudioEvents.AEETYPE EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::AudioEvents_AEETYPE eventtype() const;
  void set_eventtype(::NFFS::AudioEvents_AEETYPE value);

  // @@protoc_insertion_point(class_scope:NFFS.AudioEvents.Audio)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_audioname();
  void clear_has_audioname();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr audioname_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  float eventtime_;
  int eventtype_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioEvents : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.AudioEvents) */ {
 public:
  AudioEvents();
  virtual ~AudioEvents();

  AudioEvents(const AudioEvents& from);

  inline AudioEvents& operator=(const AudioEvents& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioEvents(AudioEvents&& from) noexcept
    : AudioEvents() {
    *this = ::std::move(from);
  }

  inline AudioEvents& operator=(AudioEvents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioEvents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioEvents* internal_default_instance() {
    return reinterpret_cast<const AudioEvents*>(
               &_AudioEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AudioEvents* other);
  friend void swap(AudioEvents& a, AudioEvents& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioEvents* New() const final {
    return CreateMaybeMessage<AudioEvents>(NULL);
  }

  AudioEvents* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AudioEvents>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AudioEvents& from);
  void MergeFrom(const AudioEvents& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioEvents* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AudioEvents_Audio Audio;

  typedef AudioEvents_AEETYPE AEETYPE;
  static const AEETYPE INIT =
    AudioEvents_AEETYPE_INIT;
  static const AEETYPE FINAL =
    AudioEvents_AEETYPE_FINAL;
  static inline bool AEETYPE_IsValid(int value) {
    return AudioEvents_AEETYPE_IsValid(value);
  }
  static const AEETYPE AEETYPE_MIN =
    AudioEvents_AEETYPE_AEETYPE_MIN;
  static const AEETYPE AEETYPE_MAX =
    AudioEvents_AEETYPE_AEETYPE_MAX;
  static const int AEETYPE_ARRAYSIZE =
    AudioEvents_AEETYPE_AEETYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AEETYPE_descriptor() {
    return AudioEvents_AEETYPE_descriptor();
  }
  static inline const ::std::string& AEETYPE_Name(AEETYPE value) {
    return AudioEvents_AEETYPE_Name(value);
  }
  static inline bool AEETYPE_Parse(const ::std::string& name,
      AEETYPE* value) {
    return AudioEvents_AEETYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.AudioEvents.Audio xAudioList = 1;
  int xaudiolist_size() const;
  void clear_xaudiolist();
  static const int kXAudioListFieldNumber = 1;
  ::NFFS::AudioEvents_Audio* mutable_xaudiolist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::AudioEvents_Audio >*
      mutable_xaudiolist();
  const ::NFFS::AudioEvents_Audio& xaudiolist(int index) const;
  ::NFFS::AudioEvents_Audio* add_xaudiolist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::AudioEvents_Audio >&
      xaudiolist() const;

  // @@protoc_insertion_point(class_scope:NFFS.AudioEvents)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::AudioEvents_Audio > xaudiolist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalSpeeds_Speed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.GlobalSpeeds.Speed) */ {
 public:
  GlobalSpeeds_Speed();
  virtual ~GlobalSpeeds_Speed();

  GlobalSpeeds_Speed(const GlobalSpeeds_Speed& from);

  inline GlobalSpeeds_Speed& operator=(const GlobalSpeeds_Speed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalSpeeds_Speed(GlobalSpeeds_Speed&& from) noexcept
    : GlobalSpeeds_Speed() {
    *this = ::std::move(from);
  }

  inline GlobalSpeeds_Speed& operator=(GlobalSpeeds_Speed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalSpeeds_Speed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSpeeds_Speed* internal_default_instance() {
    return reinterpret_cast<const GlobalSpeeds_Speed*>(
               &_GlobalSpeeds_Speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(GlobalSpeeds_Speed* other);
  friend void swap(GlobalSpeeds_Speed& a, GlobalSpeeds_Speed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSpeeds_Speed* New() const final {
    return CreateMaybeMessage<GlobalSpeeds_Speed>(NULL);
  }

  GlobalSpeeds_Speed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSpeeds_Speed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalSpeeds_Speed& from);
  void MergeFrom(const GlobalSpeeds_Speed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSpeeds_Speed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.GlobalSpeeds.EGSTYPE EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::GlobalSpeeds_EGSTYPE eventtype() const;
  void set_eventtype(::NFFS::GlobalSpeeds_EGSTYPE value);

  // required float SpeedValue = 3;
  bool has_speedvalue() const;
  void clear_speedvalue();
  static const int kSpeedValueFieldNumber = 3;
  float speedvalue() const;
  void set_speedvalue(float value);

  // @@protoc_insertion_point(class_scope:NFFS.GlobalSpeeds.Speed)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_speedvalue();
  void clear_has_speedvalue();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float eventtime_;
  int eventtype_;
  float speedvalue_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalSpeeds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.GlobalSpeeds) */ {
 public:
  GlobalSpeeds();
  virtual ~GlobalSpeeds();

  GlobalSpeeds(const GlobalSpeeds& from);

  inline GlobalSpeeds& operator=(const GlobalSpeeds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalSpeeds(GlobalSpeeds&& from) noexcept
    : GlobalSpeeds() {
    *this = ::std::move(from);
  }

  inline GlobalSpeeds& operator=(GlobalSpeeds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalSpeeds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalSpeeds* internal_default_instance() {
    return reinterpret_cast<const GlobalSpeeds*>(
               &_GlobalSpeeds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(GlobalSpeeds* other);
  friend void swap(GlobalSpeeds& a, GlobalSpeeds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalSpeeds* New() const final {
    return CreateMaybeMessage<GlobalSpeeds>(NULL);
  }

  GlobalSpeeds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalSpeeds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalSpeeds& from);
  void MergeFrom(const GlobalSpeeds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalSpeeds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GlobalSpeeds_Speed Speed;

  typedef GlobalSpeeds_EGSTYPE EGSTYPE;
  static const EGSTYPE INIT =
    GlobalSpeeds_EGSTYPE_INIT;
  static const EGSTYPE FINAL =
    GlobalSpeeds_EGSTYPE_FINAL;
  static inline bool EGSTYPE_IsValid(int value) {
    return GlobalSpeeds_EGSTYPE_IsValid(value);
  }
  static const EGSTYPE EGSTYPE_MIN =
    GlobalSpeeds_EGSTYPE_EGSTYPE_MIN;
  static const EGSTYPE EGSTYPE_MAX =
    GlobalSpeeds_EGSTYPE_EGSTYPE_MAX;
  static const int EGSTYPE_ARRAYSIZE =
    GlobalSpeeds_EGSTYPE_EGSTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGSTYPE_descriptor() {
    return GlobalSpeeds_EGSTYPE_descriptor();
  }
  static inline const ::std::string& EGSTYPE_Name(EGSTYPE value) {
    return GlobalSpeeds_EGSTYPE_Name(value);
  }
  static inline bool EGSTYPE_Parse(const ::std::string& name,
      EGSTYPE* value) {
    return GlobalSpeeds_EGSTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.GlobalSpeeds.Speed xSpeedList = 1;
  int xspeedlist_size() const;
  void clear_xspeedlist();
  static const int kXSpeedListFieldNumber = 1;
  ::NFFS::GlobalSpeeds_Speed* mutable_xspeedlist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::GlobalSpeeds_Speed >*
      mutable_xspeedlist();
  const ::NFFS::GlobalSpeeds_Speed& xspeedlist(int index) const;
  ::NFFS::GlobalSpeeds_Speed* add_xspeedlist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::GlobalSpeeds_Speed >&
      xspeedlist() const;

  // @@protoc_insertion_point(class_scope:NFFS.GlobalSpeeds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::GlobalSpeeds_Speed > xspeedlist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimatorFlys_Fly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.AnimatorFlys.Fly) */ {
 public:
  AnimatorFlys_Fly();
  virtual ~AnimatorFlys_Fly();

  AnimatorFlys_Fly(const AnimatorFlys_Fly& from);

  inline AnimatorFlys_Fly& operator=(const AnimatorFlys_Fly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimatorFlys_Fly(AnimatorFlys_Fly&& from) noexcept
    : AnimatorFlys_Fly() {
    *this = ::std::move(from);
  }

  inline AnimatorFlys_Fly& operator=(AnimatorFlys_Fly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimatorFlys_Fly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimatorFlys_Fly* internal_default_instance() {
    return reinterpret_cast<const AnimatorFlys_Fly*>(
               &_AnimatorFlys_Fly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(AnimatorFlys_Fly* other);
  friend void swap(AnimatorFlys_Fly& a, AnimatorFlys_Fly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimatorFlys_Fly* New() const final {
    return CreateMaybeMessage<AnimatorFlys_Fly>(NULL);
  }

  AnimatorFlys_Fly* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimatorFlys_Fly>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimatorFlys_Fly& from);
  void MergeFrom(const AnimatorFlys_Fly& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimatorFlys_Fly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string MethodCall = 6;
  bool has_methodcall() const;
  void clear_methodcall();
  static const int kMethodCallFieldNumber = 6;
  const ::std::string& methodcall() const;
  void set_methodcall(const ::std::string& value);
  #if LANG_CXX11
  void set_methodcall(::std::string&& value);
  #endif
  void set_methodcall(const char* value);
  void set_methodcall(const char* value, size_t size);
  ::std::string* mutable_methodcall();
  ::std::string* release_methodcall();
  void set_allocated_methodcall(::std::string* methodcall);

  // required string MethodParam = 7;
  bool has_methodparam() const;
  void clear_methodparam();
  static const int kMethodParamFieldNumber = 7;
  const ::std::string& methodparam() const;
  void set_methodparam(const ::std::string& value);
  #if LANG_CXX11
  void set_methodparam(::std::string&& value);
  #endif
  void set_methodparam(const char* value);
  void set_methodparam(const char* value, size_t size);
  ::std::string* mutable_methodparam();
  ::std::string* release_methodparam();
  void set_allocated_methodparam(::std::string* methodparam);

  // required float EventTime = 1;
  bool has_eventtime() const;
  void clear_eventtime();
  static const int kEventTimeFieldNumber = 1;
  float eventtime() const;
  void set_eventtime(float value);

  // required .NFFS.AnimatorFlys.EAFType EventType = 2;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  ::NFFS::AnimatorFlys_EAFType eventtype() const;
  void set_eventtype(::NFFS::AnimatorFlys_EAFType value);

  // required float MoveDis = 3;
  bool has_movedis() const;
  void clear_movedis();
  static const int kMoveDisFieldNumber = 3;
  float movedis() const;
  void set_movedis(float value);

  // required float MoveTime = 4;
  bool has_movetime() const;
  void clear_movetime();
  static const int kMoveTimeFieldNumber = 4;
  float movetime() const;
  void set_movetime(float value);

  // required float MoveTopDis = 5;
  bool has_movetopdis() const;
  void clear_movetopdis();
  static const int kMoveTopDisFieldNumber = 5;
  float movetopdis() const;
  void set_movetopdis(float value);

  // @@protoc_insertion_point(class_scope:NFFS.AnimatorFlys.Fly)
 private:
  void set_has_eventtime();
  void clear_has_eventtime();
  void set_has_eventtype();
  void clear_has_eventtype();
  void set_has_movedis();
  void clear_has_movedis();
  void set_has_movetime();
  void clear_has_movetime();
  void set_has_movetopdis();
  void clear_has_movetopdis();
  void set_has_methodcall();
  void clear_has_methodcall();
  void set_has_methodparam();
  void clear_has_methodparam();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr methodcall_;
  ::google::protobuf::internal::ArenaStringPtr methodparam_;
  float eventtime_;
  int eventtype_;
  float movedis_;
  float movetime_;
  float movetopdis_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimatorFlys : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NFFS.AnimatorFlys) */ {
 public:
  AnimatorFlys();
  virtual ~AnimatorFlys();

  AnimatorFlys(const AnimatorFlys& from);

  inline AnimatorFlys& operator=(const AnimatorFlys& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimatorFlys(AnimatorFlys&& from) noexcept
    : AnimatorFlys() {
    *this = ::std::move(from);
  }

  inline AnimatorFlys& operator=(AnimatorFlys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimatorFlys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimatorFlys* internal_default_instance() {
    return reinterpret_cast<const AnimatorFlys*>(
               &_AnimatorFlys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(AnimatorFlys* other);
  friend void swap(AnimatorFlys& a, AnimatorFlys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimatorFlys* New() const final {
    return CreateMaybeMessage<AnimatorFlys>(NULL);
  }

  AnimatorFlys* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimatorFlys>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimatorFlys& from);
  void MergeFrom(const AnimatorFlys& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimatorFlys* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AnimatorFlys_Fly Fly;

  typedef AnimatorFlys_EAFType EAFType;
  static const EAFType EAFT_FORWARD =
    AnimatorFlys_EAFType_EAFT_FORWARD;
  static const EAFType EAFT_BACK =
    AnimatorFlys_EAFType_EAFT_BACK;
  static const EAFType EAFT_LEFT =
    AnimatorFlys_EAFType_EAFT_LEFT;
  static const EAFType EAFT_RIGHT =
    AnimatorFlys_EAFType_EAFT_RIGHT;
  static const EAFType EAFT_TOP =
    AnimatorFlys_EAFType_EAFT_TOP;
  static inline bool EAFType_IsValid(int value) {
    return AnimatorFlys_EAFType_IsValid(value);
  }
  static const EAFType EAFType_MIN =
    AnimatorFlys_EAFType_EAFType_MIN;
  static const EAFType EAFType_MAX =
    AnimatorFlys_EAFType_EAFType_MAX;
  static const int EAFType_ARRAYSIZE =
    AnimatorFlys_EAFType_EAFType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EAFType_descriptor() {
    return AnimatorFlys_EAFType_descriptor();
  }
  static inline const ::std::string& EAFType_Name(EAFType value) {
    return AnimatorFlys_EAFType_Name(value);
  }
  static inline bool EAFType_Parse(const ::std::string& name,
      EAFType* value) {
    return AnimatorFlys_EAFType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .NFFS.AnimatorFlys.Fly xFlyList = 1;
  int xflylist_size() const;
  void clear_xflylist();
  static const int kXFlyListFieldNumber = 1;
  ::NFFS::AnimatorFlys_Fly* mutable_xflylist(int index);
  ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorFlys_Fly >*
      mutable_xflylist();
  const ::NFFS::AnimatorFlys_Fly& xflylist(int index) const;
  ::NFFS::AnimatorFlys_Fly* add_xflylist();
  const ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorFlys_Fly >&
      xflylist() const;

  // @@protoc_insertion_point(class_scope:NFFS.AnimatorFlys)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorFlys_Fly > xflylist_;
  friend struct ::protobuf_NFFleetingDefine_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FSVector3

// required float x = 1;
inline bool FSVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FSVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FSVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FSVector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float FSVector3::x() const {
  // @@protoc_insertion_point(field_get:NFFS.FSVector3.x)
  return x_;
}
inline void FSVector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:NFFS.FSVector3.x)
}

// required float y = 2;
inline bool FSVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FSVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FSVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FSVector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float FSVector3::y() const {
  // @@protoc_insertion_point(field_get:NFFS.FSVector3.y)
  return y_;
}
inline void FSVector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:NFFS.FSVector3.y)
}

// required float z = 3;
inline bool FSVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FSVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FSVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FSVector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float FSVector3::z() const {
  // @@protoc_insertion_point(field_get:NFFS.FSVector3.z)
  return z_;
}
inline void FSVector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:NFFS.FSVector3.z)
}

// -------------------------------------------------------------------

// SuwayyahEvents_Suwayyah

// required .NFFS.SuwayyahEvents.ESEType EventType = 1;
inline bool SuwayyahEvents_Suwayyah::has_eventtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_eventtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SuwayyahEvents_Suwayyah::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::SuwayyahEvents_ESEType SuwayyahEvents_Suwayyah::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.EventType)
  return static_cast< ::NFFS::SuwayyahEvents_ESEType >(eventtype_);
}
inline void SuwayyahEvents_Suwayyah::set_eventtype(::NFFS::SuwayyahEvents_ESEType value) {
  assert(::NFFS::SuwayyahEvents_ESEType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.EventType)
}

// required float EventTime = 2;
inline bool SuwayyahEvents_Suwayyah::has_eventtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_eventtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SuwayyahEvents_Suwayyah::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float SuwayyahEvents_Suwayyah::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.EventTime)
  return eventtime_;
}
inline void SuwayyahEvents_Suwayyah::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.EventTime)
}

// required float EndTime = 3;
inline bool SuwayyahEvents_Suwayyah::has_endtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_endtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SuwayyahEvents_Suwayyah::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline float SuwayyahEvents_Suwayyah::endtime() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.EndTime)
  return endtime_;
}
inline void SuwayyahEvents_Suwayyah::set_endtime(float value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.EndTime)
}

// required float DamageRang = 4;
inline bool SuwayyahEvents_Suwayyah::has_damagerang() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_damagerang() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_damagerang() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SuwayyahEvents_Suwayyah::clear_damagerang() {
  damagerang_ = 0;
  clear_has_damagerang();
}
inline float SuwayyahEvents_Suwayyah::damagerang() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.DamageRang)
  return damagerang_;
}
inline void SuwayyahEvents_Suwayyah::set_damagerang(float value) {
  set_has_damagerang();
  damagerang_ = value;
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.DamageRang)
}

// required float BackHeroDis = 5;
inline bool SuwayyahEvents_Suwayyah::has_backherodis() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_backherodis() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_backherodis() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SuwayyahEvents_Suwayyah::clear_backherodis() {
  backherodis_ = 0;
  clear_has_backherodis();
}
inline float SuwayyahEvents_Suwayyah::backherodis() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.BackHeroDis)
  return backherodis_;
}
inline void SuwayyahEvents_Suwayyah::set_backherodis(float value) {
  set_has_backherodis();
  backherodis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.BackHeroDis)
}

// required float BackNpcDis = 6;
inline bool SuwayyahEvents_Suwayyah::has_backnpcdis() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_backnpcdis() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_backnpcdis() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SuwayyahEvents_Suwayyah::clear_backnpcdis() {
  backnpcdis_ = 0;
  clear_has_backnpcdis();
}
inline float SuwayyahEvents_Suwayyah::backnpcdis() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.BackNpcDis)
  return backnpcdis_;
}
inline void SuwayyahEvents_Suwayyah::set_backnpcdis(float value) {
  set_has_backnpcdis();
  backnpcdis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.BackNpcDis)
}

// required string BeAttackParticle = 7;
inline bool SuwayyahEvents_Suwayyah::has_beattackparticle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_beattackparticle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_beattackparticle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuwayyahEvents_Suwayyah::clear_beattackparticle() {
  beattackparticle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beattackparticle();
}
inline const ::std::string& SuwayyahEvents_Suwayyah::beattackparticle() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
  return beattackparticle_.GetNoArena();
}
inline void SuwayyahEvents_Suwayyah::set_beattackparticle(const ::std::string& value) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
}
#if LANG_CXX11
inline void SuwayyahEvents_Suwayyah::set_beattackparticle(::std::string&& value) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
}
#endif
inline void SuwayyahEvents_Suwayyah::set_beattackparticle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
}
inline void SuwayyahEvents_Suwayyah::set_beattackparticle(const char* value, size_t size) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
}
inline ::std::string* SuwayyahEvents_Suwayyah::mutable_beattackparticle() {
  set_has_beattackparticle();
  // @@protoc_insertion_point(field_mutable:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
  return beattackparticle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuwayyahEvents_Suwayyah::release_beattackparticle() {
  // @@protoc_insertion_point(field_release:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
  if (!has_beattackparticle()) {
    return NULL;
  }
  clear_has_beattackparticle();
  return beattackparticle_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuwayyahEvents_Suwayyah::set_allocated_beattackparticle(::std::string* beattackparticle) {
  if (beattackparticle != NULL) {
    set_has_beattackparticle();
  } else {
    clear_has_beattackparticle();
  }
  beattackparticle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beattackparticle);
  // @@protoc_insertion_point(field_set_allocated:NFFS.SuwayyahEvents.Suwayyah.BeAttackParticle)
}

// required string MethodCall = 8;
inline bool SuwayyahEvents_Suwayyah::has_methodcall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_methodcall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuwayyahEvents_Suwayyah::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& SuwayyahEvents_Suwayyah::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
  return methodcall_.GetNoArena();
}
inline void SuwayyahEvents_Suwayyah::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
}
#if LANG_CXX11
inline void SuwayyahEvents_Suwayyah::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
}
#endif
inline void SuwayyahEvents_Suwayyah::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
}
inline void SuwayyahEvents_Suwayyah::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
}
inline ::std::string* SuwayyahEvents_Suwayyah::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuwayyahEvents_Suwayyah::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuwayyahEvents_Suwayyah::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.SuwayyahEvents.Suwayyah.MethodCall)
}

// required string MethodParam = 9;
inline bool SuwayyahEvents_Suwayyah::has_methodparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_methodparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuwayyahEvents_Suwayyah::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& SuwayyahEvents_Suwayyah::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
  return methodparam_.GetNoArena();
}
inline void SuwayyahEvents_Suwayyah::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
}
#if LANG_CXX11
inline void SuwayyahEvents_Suwayyah::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
}
#endif
inline void SuwayyahEvents_Suwayyah::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
}
inline void SuwayyahEvents_Suwayyah::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
}
inline ::std::string* SuwayyahEvents_Suwayyah::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuwayyahEvents_Suwayyah::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuwayyahEvents_Suwayyah::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.SuwayyahEvents.Suwayyah.MethodParam)
}

// required string TargetMethodCall = 10;
inline bool SuwayyahEvents_Suwayyah::has_targetmethodcall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_targetmethodcall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_targetmethodcall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuwayyahEvents_Suwayyah::clear_targetmethodcall() {
  targetmethodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetmethodcall();
}
inline const ::std::string& SuwayyahEvents_Suwayyah::targetmethodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
  return targetmethodcall_.GetNoArena();
}
inline void SuwayyahEvents_Suwayyah::set_targetmethodcall(const ::std::string& value) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
}
#if LANG_CXX11
inline void SuwayyahEvents_Suwayyah::set_targetmethodcall(::std::string&& value) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
}
#endif
inline void SuwayyahEvents_Suwayyah::set_targetmethodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
}
inline void SuwayyahEvents_Suwayyah::set_targetmethodcall(const char* value, size_t size) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
}
inline ::std::string* SuwayyahEvents_Suwayyah::mutable_targetmethodcall() {
  set_has_targetmethodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
  return targetmethodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuwayyahEvents_Suwayyah::release_targetmethodcall() {
  // @@protoc_insertion_point(field_release:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
  if (!has_targetmethodcall()) {
    return NULL;
  }
  clear_has_targetmethodcall();
  return targetmethodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuwayyahEvents_Suwayyah::set_allocated_targetmethodcall(::std::string* targetmethodcall) {
  if (targetmethodcall != NULL) {
    set_has_targetmethodcall();
  } else {
    clear_has_targetmethodcall();
  }
  targetmethodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmethodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.SuwayyahEvents.Suwayyah.TargetMethodCall)
}

// required string TargetMethodParam = 11;
inline bool SuwayyahEvents_Suwayyah::has_targetmethodparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuwayyahEvents_Suwayyah::set_has_targetmethodparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuwayyahEvents_Suwayyah::clear_has_targetmethodparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuwayyahEvents_Suwayyah::clear_targetmethodparam() {
  targetmethodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetmethodparam();
}
inline const ::std::string& SuwayyahEvents_Suwayyah::targetmethodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
  return targetmethodparam_.GetNoArena();
}
inline void SuwayyahEvents_Suwayyah::set_targetmethodparam(const ::std::string& value) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
}
#if LANG_CXX11
inline void SuwayyahEvents_Suwayyah::set_targetmethodparam(::std::string&& value) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
}
#endif
inline void SuwayyahEvents_Suwayyah::set_targetmethodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
}
inline void SuwayyahEvents_Suwayyah::set_targetmethodparam(const char* value, size_t size) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
}
inline ::std::string* SuwayyahEvents_Suwayyah::mutable_targetmethodparam() {
  set_has_targetmethodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
  return targetmethodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SuwayyahEvents_Suwayyah::release_targetmethodparam() {
  // @@protoc_insertion_point(field_release:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
  if (!has_targetmethodparam()) {
    return NULL;
  }
  clear_has_targetmethodparam();
  return targetmethodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SuwayyahEvents_Suwayyah::set_allocated_targetmethodparam(::std::string* targetmethodparam) {
  if (targetmethodparam != NULL) {
    set_has_targetmethodparam();
  } else {
    clear_has_targetmethodparam();
  }
  targetmethodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmethodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.SuwayyahEvents.Suwayyah.TargetMethodParam)
}

// -------------------------------------------------------------------

// SuwayyahEvents

// repeated .NFFS.SuwayyahEvents.Suwayyah xSuwayyahList = 1;
inline int SuwayyahEvents::xsuwayyahlist_size() const {
  return xsuwayyahlist_.size();
}
inline void SuwayyahEvents::clear_xsuwayyahlist() {
  xsuwayyahlist_.Clear();
}
inline ::NFFS::SuwayyahEvents_Suwayyah* SuwayyahEvents::mutable_xsuwayyahlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.SuwayyahEvents.xSuwayyahList)
  return xsuwayyahlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::SuwayyahEvents_Suwayyah >*
SuwayyahEvents::mutable_xsuwayyahlist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.SuwayyahEvents.xSuwayyahList)
  return &xsuwayyahlist_;
}
inline const ::NFFS::SuwayyahEvents_Suwayyah& SuwayyahEvents::xsuwayyahlist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.SuwayyahEvents.xSuwayyahList)
  return xsuwayyahlist_.Get(index);
}
inline ::NFFS::SuwayyahEvents_Suwayyah* SuwayyahEvents::add_xsuwayyahlist() {
  // @@protoc_insertion_point(field_add:NFFS.SuwayyahEvents.xSuwayyahList)
  return xsuwayyahlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::SuwayyahEvents_Suwayyah >&
SuwayyahEvents::xsuwayyahlist() const {
  // @@protoc_insertion_point(field_list:NFFS.SuwayyahEvents.xSuwayyahList)
  return xsuwayyahlist_;
}

// -------------------------------------------------------------------

// BulletEvents_TacheBomp

// required float BompTime = 1;
inline bool BulletEvents_TacheBomp::has_bomptime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_bomptime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BulletEvents_TacheBomp::clear_has_bomptime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BulletEvents_TacheBomp::clear_bomptime() {
  bomptime_ = 0;
  clear_has_bomptime();
}
inline float BulletEvents_TacheBomp::bomptime() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.BompTime)
  return bomptime_;
}
inline void BulletEvents_TacheBomp::set_bomptime(float value) {
  set_has_bomptime();
  bomptime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.BompTime)
}

// required float BompRang = 2;
inline bool BulletEvents_TacheBomp::has_bomprang() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_bomprang() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BulletEvents_TacheBomp::clear_has_bomprang() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BulletEvents_TacheBomp::clear_bomprang() {
  bomprang_ = 0;
  clear_has_bomprang();
}
inline float BulletEvents_TacheBomp::bomprang() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.BompRang)
  return bomprang_;
}
inline void BulletEvents_TacheBomp::set_bomprang(float value) {
  set_has_bomprang();
  bomprang_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.BompRang)
}

// required string BompPrefabPath = 3;
inline bool BulletEvents_TacheBomp::has_bompprefabpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_bompprefabpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulletEvents_TacheBomp::clear_has_bompprefabpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulletEvents_TacheBomp::clear_bompprefabpath() {
  bompprefabpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bompprefabpath();
}
inline const ::std::string& BulletEvents_TacheBomp::bompprefabpath() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
  return bompprefabpath_.GetNoArena();
}
inline void BulletEvents_TacheBomp::set_bompprefabpath(const ::std::string& value) {
  set_has_bompprefabpath();
  bompprefabpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
}
#if LANG_CXX11
inline void BulletEvents_TacheBomp::set_bompprefabpath(::std::string&& value) {
  set_has_bompprefabpath();
  bompprefabpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
}
#endif
inline void BulletEvents_TacheBomp::set_bompprefabpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bompprefabpath();
  bompprefabpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
}
inline void BulletEvents_TacheBomp::set_bompprefabpath(const char* value, size_t size) {
  set_has_bompprefabpath();
  bompprefabpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
}
inline ::std::string* BulletEvents_TacheBomp::mutable_bompprefabpath() {
  set_has_bompprefabpath();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
  return bompprefabpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_TacheBomp::release_bompprefabpath() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
  if (!has_bompprefabpath()) {
    return NULL;
  }
  clear_has_bompprefabpath();
  return bompprefabpath_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_TacheBomp::set_allocated_bompprefabpath(::std::string* bompprefabpath) {
  if (bompprefabpath != NULL) {
    set_has_bompprefabpath();
  } else {
    clear_has_bompprefabpath();
  }
  bompprefabpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bompprefabpath);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.TacheBomp.BompPrefabPath)
}

// required string BeAttackParticle = 4;
inline bool BulletEvents_TacheBomp::has_beattackparticle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_beattackparticle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BulletEvents_TacheBomp::clear_has_beattackparticle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BulletEvents_TacheBomp::clear_beattackparticle() {
  beattackparticle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beattackparticle();
}
inline const ::std::string& BulletEvents_TacheBomp::beattackparticle() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
  return beattackparticle_.GetNoArena();
}
inline void BulletEvents_TacheBomp::set_beattackparticle(const ::std::string& value) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
}
#if LANG_CXX11
inline void BulletEvents_TacheBomp::set_beattackparticle(::std::string&& value) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
}
#endif
inline void BulletEvents_TacheBomp::set_beattackparticle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
}
inline void BulletEvents_TacheBomp::set_beattackparticle(const char* value, size_t size) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
}
inline ::std::string* BulletEvents_TacheBomp::mutable_beattackparticle() {
  set_has_beattackparticle();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
  return beattackparticle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_TacheBomp::release_beattackparticle() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
  if (!has_beattackparticle()) {
    return NULL;
  }
  clear_has_beattackparticle();
  return beattackparticle_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_TacheBomp::set_allocated_beattackparticle(::std::string* beattackparticle) {
  if (beattackparticle != NULL) {
    set_has_beattackparticle();
  } else {
    clear_has_beattackparticle();
  }
  beattackparticle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beattackparticle);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.TacheBomp.BeAttackParticle)
}

// required float BackNpcDis = 5;
inline bool BulletEvents_TacheBomp::has_backnpcdis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_backnpcdis() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BulletEvents_TacheBomp::clear_has_backnpcdis() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BulletEvents_TacheBomp::clear_backnpcdis() {
  backnpcdis_ = 0;
  clear_has_backnpcdis();
}
inline float BulletEvents_TacheBomp::backnpcdis() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.BackNpcDis)
  return backnpcdis_;
}
inline void BulletEvents_TacheBomp::set_backnpcdis(float value) {
  set_has_backnpcdis();
  backnpcdis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.BackNpcDis)
}

// required float BackHeroDis = 6;
inline bool BulletEvents_TacheBomp::has_backherodis() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_backherodis() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BulletEvents_TacheBomp::clear_has_backherodis() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BulletEvents_TacheBomp::clear_backherodis() {
  backherodis_ = 0;
  clear_has_backherodis();
}
inline float BulletEvents_TacheBomp::backherodis() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.BackHeroDis)
  return backherodis_;
}
inline void BulletEvents_TacheBomp::set_backherodis(float value) {
  set_has_backherodis();
  backherodis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.BackHeroDis)
}

// required string MethodCall = 7;
inline bool BulletEvents_TacheBomp::has_methodcall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_methodcall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BulletEvents_TacheBomp::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BulletEvents_TacheBomp::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& BulletEvents_TacheBomp::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.MethodCall)
  return methodcall_.GetNoArena();
}
inline void BulletEvents_TacheBomp::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.MethodCall)
}
#if LANG_CXX11
inline void BulletEvents_TacheBomp::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.TacheBomp.MethodCall)
}
#endif
inline void BulletEvents_TacheBomp::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.TacheBomp.MethodCall)
}
inline void BulletEvents_TacheBomp::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.TacheBomp.MethodCall)
}
inline ::std::string* BulletEvents_TacheBomp::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.TacheBomp.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_TacheBomp::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.TacheBomp.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_TacheBomp::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.TacheBomp.MethodCall)
}

// required string MethodParam = 8;
inline bool BulletEvents_TacheBomp::has_methodparam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_methodparam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BulletEvents_TacheBomp::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BulletEvents_TacheBomp::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& BulletEvents_TacheBomp::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.MethodParam)
  return methodparam_.GetNoArena();
}
inline void BulletEvents_TacheBomp::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.MethodParam)
}
#if LANG_CXX11
inline void BulletEvents_TacheBomp::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.TacheBomp.MethodParam)
}
#endif
inline void BulletEvents_TacheBomp::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.TacheBomp.MethodParam)
}
inline void BulletEvents_TacheBomp::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.TacheBomp.MethodParam)
}
inline ::std::string* BulletEvents_TacheBomp::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.TacheBomp.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_TacheBomp::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.TacheBomp.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_TacheBomp::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.TacheBomp.MethodParam)
}

// required string TargetMethodCall = 9;
inline bool BulletEvents_TacheBomp::has_targetmethodcall() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_targetmethodcall() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BulletEvents_TacheBomp::clear_has_targetmethodcall() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BulletEvents_TacheBomp::clear_targetmethodcall() {
  targetmethodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetmethodcall();
}
inline const ::std::string& BulletEvents_TacheBomp::targetmethodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
  return targetmethodcall_.GetNoArena();
}
inline void BulletEvents_TacheBomp::set_targetmethodcall(const ::std::string& value) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
}
#if LANG_CXX11
inline void BulletEvents_TacheBomp::set_targetmethodcall(::std::string&& value) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
}
#endif
inline void BulletEvents_TacheBomp::set_targetmethodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
}
inline void BulletEvents_TacheBomp::set_targetmethodcall(const char* value, size_t size) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
}
inline ::std::string* BulletEvents_TacheBomp::mutable_targetmethodcall() {
  set_has_targetmethodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
  return targetmethodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_TacheBomp::release_targetmethodcall() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
  if (!has_targetmethodcall()) {
    return NULL;
  }
  clear_has_targetmethodcall();
  return targetmethodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_TacheBomp::set_allocated_targetmethodcall(::std::string* targetmethodcall) {
  if (targetmethodcall != NULL) {
    set_has_targetmethodcall();
  } else {
    clear_has_targetmethodcall();
  }
  targetmethodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmethodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.TacheBomp.TargetMethodCall)
}

// required string TargetMethodParam = 10;
inline bool BulletEvents_TacheBomp::has_targetmethodparam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BulletEvents_TacheBomp::set_has_targetmethodparam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BulletEvents_TacheBomp::clear_has_targetmethodparam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BulletEvents_TacheBomp::clear_targetmethodparam() {
  targetmethodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetmethodparam();
}
inline const ::std::string& BulletEvents_TacheBomp::targetmethodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
  return targetmethodparam_.GetNoArena();
}
inline void BulletEvents_TacheBomp::set_targetmethodparam(const ::std::string& value) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
}
#if LANG_CXX11
inline void BulletEvents_TacheBomp::set_targetmethodparam(::std::string&& value) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
}
#endif
inline void BulletEvents_TacheBomp::set_targetmethodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
}
inline void BulletEvents_TacheBomp::set_targetmethodparam(const char* value, size_t size) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
}
inline ::std::string* BulletEvents_TacheBomp::mutable_targetmethodparam() {
  set_has_targetmethodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
  return targetmethodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_TacheBomp::release_targetmethodparam() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
  if (!has_targetmethodparam()) {
    return NULL;
  }
  clear_has_targetmethodparam();
  return targetmethodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_TacheBomp::set_allocated_targetmethodparam(::std::string* targetmethodparam) {
  if (targetmethodparam != NULL) {
    set_has_targetmethodparam();
  } else {
    clear_has_targetmethodparam();
  }
  targetmethodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmethodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.TacheBomp.TargetMethodParam)
}

// -------------------------------------------------------------------

// BulletEvents_Bullet

// required float EventTime = 1;
inline bool BulletEvents_Bullet::has_eventtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BulletEvents_Bullet::set_has_eventtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BulletEvents_Bullet::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BulletEvents_Bullet::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float BulletEvents_Bullet::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.EventTime)
  return eventtime_;
}
inline void BulletEvents_Bullet::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.EventTime)
}

// required .NFFS.BulletEvents.EBEType EventType = 2;
inline bool BulletEvents_Bullet::has_eventtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BulletEvents_Bullet::set_has_eventtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BulletEvents_Bullet::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BulletEvents_Bullet::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::BulletEvents_EBEType BulletEvents_Bullet::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.EventType)
  return static_cast< ::NFFS::BulletEvents_EBEType >(eventtype_);
}
inline void BulletEvents_Bullet::set_eventtype(::NFFS::BulletEvents_EBEType value) {
  assert(::NFFS::BulletEvents_EBEType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.EventType)
}

// required float Speed = 3;
inline bool BulletEvents_Bullet::has_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BulletEvents_Bullet::set_has_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BulletEvents_Bullet::clear_has_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BulletEvents_Bullet::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float BulletEvents_Bullet::speed() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.Speed)
  return speed_;
}
inline void BulletEvents_Bullet::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.Speed)
}

// required float MaxDis = 4;
inline bool BulletEvents_Bullet::has_maxdis() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BulletEvents_Bullet::set_has_maxdis() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BulletEvents_Bullet::clear_has_maxdis() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BulletEvents_Bullet::clear_maxdis() {
  maxdis_ = 0;
  clear_has_maxdis();
}
inline float BulletEvents_Bullet::maxdis() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.MaxDis)
  return maxdis_;
}
inline void BulletEvents_Bullet::set_maxdis(float value) {
  set_has_maxdis();
  maxdis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.MaxDis)
}

// required float BulletRang = 5;
inline bool BulletEvents_Bullet::has_bulletrang() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BulletEvents_Bullet::set_has_bulletrang() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BulletEvents_Bullet::clear_has_bulletrang() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BulletEvents_Bullet::clear_bulletrang() {
  bulletrang_ = 0;
  clear_has_bulletrang();
}
inline float BulletEvents_Bullet::bulletrang() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.BulletRang)
  return bulletrang_;
}
inline void BulletEvents_Bullet::set_bulletrang(float value) {
  set_has_bulletrang();
  bulletrang_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.BulletRang)
}

// required .NFFS.BulletEvents.EBE_BACKType BulletBackType = 6;
inline bool BulletEvents_Bullet::has_bulletbacktype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BulletEvents_Bullet::set_has_bulletbacktype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BulletEvents_Bullet::clear_has_bulletbacktype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BulletEvents_Bullet::clear_bulletbacktype() {
  bulletbacktype_ = 0;
  clear_has_bulletbacktype();
}
inline ::NFFS::BulletEvents_EBE_BACKType BulletEvents_Bullet::bulletbacktype() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.BulletBackType)
  return static_cast< ::NFFS::BulletEvents_EBE_BACKType >(bulletbacktype_);
}
inline void BulletEvents_Bullet::set_bulletbacktype(::NFFS::BulletEvents_EBE_BACKType value) {
  assert(::NFFS::BulletEvents_EBE_BACKType_IsValid(value));
  set_has_bulletbacktype();
  bulletbacktype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.BulletBackType)
}

// required float BackHeroDis = 7;
inline bool BulletEvents_Bullet::has_backherodis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BulletEvents_Bullet::set_has_backherodis() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BulletEvents_Bullet::clear_has_backherodis() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BulletEvents_Bullet::clear_backherodis() {
  backherodis_ = 0;
  clear_has_backherodis();
}
inline float BulletEvents_Bullet::backherodis() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.BackHeroDis)
  return backherodis_;
}
inline void BulletEvents_Bullet::set_backherodis(float value) {
  set_has_backherodis();
  backherodis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.BackHeroDis)
}

// required float BackNpcDis = 8;
inline bool BulletEvents_Bullet::has_backnpcdis() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BulletEvents_Bullet::set_has_backnpcdis() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BulletEvents_Bullet::clear_has_backnpcdis() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BulletEvents_Bullet::clear_backnpcdis() {
  backnpcdis_ = 0;
  clear_has_backnpcdis();
}
inline float BulletEvents_Bullet::backnpcdis() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.BackNpcDis)
  return backnpcdis_;
}
inline void BulletEvents_Bullet::set_backnpcdis(float value) {
  set_has_backnpcdis();
  backnpcdis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.BackNpcDis)
}

// required int32 TacheDetroy = 9;
inline bool BulletEvents_Bullet::has_tachedetroy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BulletEvents_Bullet::set_has_tachedetroy() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BulletEvents_Bullet::clear_has_tachedetroy() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BulletEvents_Bullet::clear_tachedetroy() {
  tachedetroy_ = 0;
  clear_has_tachedetroy();
}
inline ::google::protobuf::int32 BulletEvents_Bullet::tachedetroy() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.TacheDetroy)
  return tachedetroy_;
}
inline void BulletEvents_Bullet::set_tachedetroy(::google::protobuf::int32 value) {
  set_has_tachedetroy();
  tachedetroy_ = value;
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.TacheDetroy)
}

// required string BeAttackParticle = 10;
inline bool BulletEvents_Bullet::has_beattackparticle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BulletEvents_Bullet::set_has_beattackparticle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BulletEvents_Bullet::clear_has_beattackparticle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BulletEvents_Bullet::clear_beattackparticle() {
  beattackparticle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_beattackparticle();
}
inline const ::std::string& BulletEvents_Bullet::beattackparticle() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.BeAttackParticle)
  return beattackparticle_.GetNoArena();
}
inline void BulletEvents_Bullet::set_beattackparticle(const ::std::string& value) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.BeAttackParticle)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_beattackparticle(::std::string&& value) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.BeAttackParticle)
}
#endif
inline void BulletEvents_Bullet::set_beattackparticle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.BeAttackParticle)
}
inline void BulletEvents_Bullet::set_beattackparticle(const char* value, size_t size) {
  set_has_beattackparticle();
  beattackparticle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.BeAttackParticle)
}
inline ::std::string* BulletEvents_Bullet::mutable_beattackparticle() {
  set_has_beattackparticle();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.BeAttackParticle)
  return beattackparticle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_beattackparticle() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.BeAttackParticle)
  if (!has_beattackparticle()) {
    return NULL;
  }
  clear_has_beattackparticle();
  return beattackparticle_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_beattackparticle(::std::string* beattackparticle) {
  if (beattackparticle != NULL) {
    set_has_beattackparticle();
  } else {
    clear_has_beattackparticle();
  }
  beattackparticle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beattackparticle);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.BeAttackParticle)
}

// required string FireTacheName = 11;
inline bool BulletEvents_Bullet::has_firetachename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BulletEvents_Bullet::set_has_firetachename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BulletEvents_Bullet::clear_has_firetachename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BulletEvents_Bullet::clear_firetachename() {
  firetachename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_firetachename();
}
inline const ::std::string& BulletEvents_Bullet::firetachename() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.FireTacheName)
  return firetachename_.GetNoArena();
}
inline void BulletEvents_Bullet::set_firetachename(const ::std::string& value) {
  set_has_firetachename();
  firetachename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.FireTacheName)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_firetachename(::std::string&& value) {
  set_has_firetachename();
  firetachename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.FireTacheName)
}
#endif
inline void BulletEvents_Bullet::set_firetachename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_firetachename();
  firetachename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.FireTacheName)
}
inline void BulletEvents_Bullet::set_firetachename(const char* value, size_t size) {
  set_has_firetachename();
  firetachename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.FireTacheName)
}
inline ::std::string* BulletEvents_Bullet::mutable_firetachename() {
  set_has_firetachename();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.FireTacheName)
  return firetachename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_firetachename() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.FireTacheName)
  if (!has_firetachename()) {
    return NULL;
  }
  clear_has_firetachename();
  return firetachename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_firetachename(::std::string* firetachename) {
  if (firetachename != NULL) {
    set_has_firetachename();
  } else {
    clear_has_firetachename();
  }
  firetachename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), firetachename);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.FireTacheName)
}

// required .NFFS.FSVector3 FireTacheOffest = 12;
inline bool BulletEvents_Bullet::has_firetacheoffest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BulletEvents_Bullet::set_has_firetacheoffest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BulletEvents_Bullet::clear_has_firetacheoffest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BulletEvents_Bullet::clear_firetacheoffest() {
  if (firetacheoffest_ != NULL) firetacheoffest_->Clear();
  clear_has_firetacheoffest();
}
inline const ::NFFS::FSVector3& BulletEvents_Bullet::_internal_firetacheoffest() const {
  return *firetacheoffest_;
}
inline const ::NFFS::FSVector3& BulletEvents_Bullet::firetacheoffest() const {
  const ::NFFS::FSVector3* p = firetacheoffest_;
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.FireTacheOffest)
  return p != NULL ? *p : *reinterpret_cast<const ::NFFS::FSVector3*>(
      &::NFFS::_FSVector3_default_instance_);
}
inline ::NFFS::FSVector3* BulletEvents_Bullet::release_firetacheoffest() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.FireTacheOffest)
  clear_has_firetacheoffest();
  ::NFFS::FSVector3* temp = firetacheoffest_;
  firetacheoffest_ = NULL;
  return temp;
}
inline ::NFFS::FSVector3* BulletEvents_Bullet::mutable_firetacheoffest() {
  set_has_firetacheoffest();
  if (firetacheoffest_ == NULL) {
    auto* p = CreateMaybeMessage<::NFFS::FSVector3>(GetArenaNoVirtual());
    firetacheoffest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.FireTacheOffest)
  return firetacheoffest_;
}
inline void BulletEvents_Bullet::set_allocated_firetacheoffest(::NFFS::FSVector3* firetacheoffest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete firetacheoffest_;
  }
  if (firetacheoffest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      firetacheoffest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firetacheoffest, submessage_arena);
    }
    set_has_firetacheoffest();
  } else {
    clear_has_firetacheoffest();
  }
  firetacheoffest_ = firetacheoffest;
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.FireTacheOffest)
}

// required string BulletPrefabPath = 13;
inline bool BulletEvents_Bullet::has_bulletprefabpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BulletEvents_Bullet::set_has_bulletprefabpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BulletEvents_Bullet::clear_has_bulletprefabpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BulletEvents_Bullet::clear_bulletprefabpath() {
  bulletprefabpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bulletprefabpath();
}
inline const ::std::string& BulletEvents_Bullet::bulletprefabpath() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.BulletPrefabPath)
  return bulletprefabpath_.GetNoArena();
}
inline void BulletEvents_Bullet::set_bulletprefabpath(const ::std::string& value) {
  set_has_bulletprefabpath();
  bulletprefabpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.BulletPrefabPath)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_bulletprefabpath(::std::string&& value) {
  set_has_bulletprefabpath();
  bulletprefabpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.BulletPrefabPath)
}
#endif
inline void BulletEvents_Bullet::set_bulletprefabpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bulletprefabpath();
  bulletprefabpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.BulletPrefabPath)
}
inline void BulletEvents_Bullet::set_bulletprefabpath(const char* value, size_t size) {
  set_has_bulletprefabpath();
  bulletprefabpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.BulletPrefabPath)
}
inline ::std::string* BulletEvents_Bullet::mutable_bulletprefabpath() {
  set_has_bulletprefabpath();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.BulletPrefabPath)
  return bulletprefabpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_bulletprefabpath() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.BulletPrefabPath)
  if (!has_bulletprefabpath()) {
    return NULL;
  }
  clear_has_bulletprefabpath();
  return bulletprefabpath_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_bulletprefabpath(::std::string* bulletprefabpath) {
  if (bulletprefabpath != NULL) {
    set_has_bulletprefabpath();
  } else {
    clear_has_bulletprefabpath();
  }
  bulletprefabpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bulletprefabpath);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.BulletPrefabPath)
}

// required string MethodCall = 14;
inline bool BulletEvents_Bullet::has_methodcall() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BulletEvents_Bullet::set_has_methodcall() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BulletEvents_Bullet::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BulletEvents_Bullet::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& BulletEvents_Bullet::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.MethodCall)
  return methodcall_.GetNoArena();
}
inline void BulletEvents_Bullet::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.MethodCall)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.MethodCall)
}
#endif
inline void BulletEvents_Bullet::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.MethodCall)
}
inline void BulletEvents_Bullet::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.MethodCall)
}
inline ::std::string* BulletEvents_Bullet::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.MethodCall)
}

// required string MethodParam = 15;
inline bool BulletEvents_Bullet::has_methodparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BulletEvents_Bullet::set_has_methodparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BulletEvents_Bullet::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BulletEvents_Bullet::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& BulletEvents_Bullet::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.MethodParam)
  return methodparam_.GetNoArena();
}
inline void BulletEvents_Bullet::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.MethodParam)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.MethodParam)
}
#endif
inline void BulletEvents_Bullet::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.MethodParam)
}
inline void BulletEvents_Bullet::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.MethodParam)
}
inline ::std::string* BulletEvents_Bullet::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.MethodParam)
}

// required string TargetMethodCall = 16;
inline bool BulletEvents_Bullet::has_targetmethodcall() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BulletEvents_Bullet::set_has_targetmethodcall() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BulletEvents_Bullet::clear_has_targetmethodcall() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BulletEvents_Bullet::clear_targetmethodcall() {
  targetmethodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetmethodcall();
}
inline const ::std::string& BulletEvents_Bullet::targetmethodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.TargetMethodCall)
  return targetmethodcall_.GetNoArena();
}
inline void BulletEvents_Bullet::set_targetmethodcall(const ::std::string& value) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.TargetMethodCall)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_targetmethodcall(::std::string&& value) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.TargetMethodCall)
}
#endif
inline void BulletEvents_Bullet::set_targetmethodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.TargetMethodCall)
}
inline void BulletEvents_Bullet::set_targetmethodcall(const char* value, size_t size) {
  set_has_targetmethodcall();
  targetmethodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.TargetMethodCall)
}
inline ::std::string* BulletEvents_Bullet::mutable_targetmethodcall() {
  set_has_targetmethodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.TargetMethodCall)
  return targetmethodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_targetmethodcall() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.TargetMethodCall)
  if (!has_targetmethodcall()) {
    return NULL;
  }
  clear_has_targetmethodcall();
  return targetmethodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_targetmethodcall(::std::string* targetmethodcall) {
  if (targetmethodcall != NULL) {
    set_has_targetmethodcall();
  } else {
    clear_has_targetmethodcall();
  }
  targetmethodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmethodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.TargetMethodCall)
}

// required string TargetMethodParam = 17;
inline bool BulletEvents_Bullet::has_targetmethodparam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BulletEvents_Bullet::set_has_targetmethodparam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BulletEvents_Bullet::clear_has_targetmethodparam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BulletEvents_Bullet::clear_targetmethodparam() {
  targetmethodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetmethodparam();
}
inline const ::std::string& BulletEvents_Bullet::targetmethodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.TargetMethodParam)
  return targetmethodparam_.GetNoArena();
}
inline void BulletEvents_Bullet::set_targetmethodparam(const ::std::string& value) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.BulletEvents.Bullet.TargetMethodParam)
}
#if LANG_CXX11
inline void BulletEvents_Bullet::set_targetmethodparam(::std::string&& value) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.BulletEvents.Bullet.TargetMethodParam)
}
#endif
inline void BulletEvents_Bullet::set_targetmethodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.BulletEvents.Bullet.TargetMethodParam)
}
inline void BulletEvents_Bullet::set_targetmethodparam(const char* value, size_t size) {
  set_has_targetmethodparam();
  targetmethodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.BulletEvents.Bullet.TargetMethodParam)
}
inline ::std::string* BulletEvents_Bullet::mutable_targetmethodparam() {
  set_has_targetmethodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.TargetMethodParam)
  return targetmethodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BulletEvents_Bullet::release_targetmethodparam() {
  // @@protoc_insertion_point(field_release:NFFS.BulletEvents.Bullet.TargetMethodParam)
  if (!has_targetmethodparam()) {
    return NULL;
  }
  clear_has_targetmethodparam();
  return targetmethodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BulletEvents_Bullet::set_allocated_targetmethodparam(::std::string* targetmethodparam) {
  if (targetmethodparam != NULL) {
    set_has_targetmethodparam();
  } else {
    clear_has_targetmethodparam();
  }
  targetmethodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmethodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.BulletEvents.Bullet.TargetMethodParam)
}

// repeated .NFFS.BulletEvents.TacheBomp Bomp = 18;
inline int BulletEvents_Bullet::bomp_size() const {
  return bomp_.size();
}
inline void BulletEvents_Bullet::clear_bomp() {
  bomp_.Clear();
}
inline ::NFFS::BulletEvents_TacheBomp* BulletEvents_Bullet::mutable_bomp(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.Bullet.Bomp)
  return bomp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_TacheBomp >*
BulletEvents_Bullet::mutable_bomp() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.BulletEvents.Bullet.Bomp)
  return &bomp_;
}
inline const ::NFFS::BulletEvents_TacheBomp& BulletEvents_Bullet::bomp(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.Bullet.Bomp)
  return bomp_.Get(index);
}
inline ::NFFS::BulletEvents_TacheBomp* BulletEvents_Bullet::add_bomp() {
  // @@protoc_insertion_point(field_add:NFFS.BulletEvents.Bullet.Bomp)
  return bomp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_TacheBomp >&
BulletEvents_Bullet::bomp() const {
  // @@protoc_insertion_point(field_list:NFFS.BulletEvents.Bullet.Bomp)
  return bomp_;
}

// -------------------------------------------------------------------

// BulletEvents

// repeated .NFFS.BulletEvents.Bullet xBulletList = 1;
inline int BulletEvents::xbulletlist_size() const {
  return xbulletlist_.size();
}
inline void BulletEvents::clear_xbulletlist() {
  xbulletlist_.Clear();
}
inline ::NFFS::BulletEvents_Bullet* BulletEvents::mutable_xbulletlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.BulletEvents.xBulletList)
  return xbulletlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_Bullet >*
BulletEvents::mutable_xbulletlist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.BulletEvents.xBulletList)
  return &xbulletlist_;
}
inline const ::NFFS::BulletEvents_Bullet& BulletEvents::xbulletlist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.BulletEvents.xBulletList)
  return xbulletlist_.Get(index);
}
inline ::NFFS::BulletEvents_Bullet* BulletEvents::add_xbulletlist() {
  // @@protoc_insertion_point(field_add:NFFS.BulletEvents.xBulletList)
  return xbulletlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::BulletEvents_Bullet >&
BulletEvents::xbulletlist() const {
  // @@protoc_insertion_point(field_list:NFFS.BulletEvents.xBulletList)
  return xbulletlist_;
}

// -------------------------------------------------------------------

// AnimatorMoves_Move

// required float EventTime = 1;
inline bool AnimatorMoves_Move::has_eventtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnimatorMoves_Move::set_has_eventtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnimatorMoves_Move::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnimatorMoves_Move::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float AnimatorMoves_Move::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.Move.EventTime)
  return eventtime_;
}
inline void AnimatorMoves_Move::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorMoves.Move.EventTime)
}

// required .NFFS.AnimatorMoves.EAMType EventType = 2;
inline bool AnimatorMoves_Move::has_eventtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnimatorMoves_Move::set_has_eventtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnimatorMoves_Move::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnimatorMoves_Move::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::AnimatorMoves_EAMType AnimatorMoves_Move::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.Move.EventType)
  return static_cast< ::NFFS::AnimatorMoves_EAMType >(eventtype_);
}
inline void AnimatorMoves_Move::set_eventtype(::NFFS::AnimatorMoves_EAMType value) {
  assert(::NFFS::AnimatorMoves_EAMType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorMoves.Move.EventType)
}

// required float MoveDis = 3;
inline bool AnimatorMoves_Move::has_movedis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnimatorMoves_Move::set_has_movedis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnimatorMoves_Move::clear_has_movedis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnimatorMoves_Move::clear_movedis() {
  movedis_ = 0;
  clear_has_movedis();
}
inline float AnimatorMoves_Move::movedis() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.Move.MoveDis)
  return movedis_;
}
inline void AnimatorMoves_Move::set_movedis(float value) {
  set_has_movedis();
  movedis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorMoves.Move.MoveDis)
}

// required float MoveTime = 4;
inline bool AnimatorMoves_Move::has_movetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnimatorMoves_Move::set_has_movetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnimatorMoves_Move::clear_has_movetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnimatorMoves_Move::clear_movetime() {
  movetime_ = 0;
  clear_has_movetime();
}
inline float AnimatorMoves_Move::movetime() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.Move.MoveTime)
  return movetime_;
}
inline void AnimatorMoves_Move::set_movetime(float value) {
  set_has_movetime();
  movetime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorMoves.Move.MoveTime)
}

// required string MethodCall = 5;
inline bool AnimatorMoves_Move::has_methodcall() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnimatorMoves_Move::set_has_methodcall() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnimatorMoves_Move::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnimatorMoves_Move::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& AnimatorMoves_Move::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.Move.MethodCall)
  return methodcall_.GetNoArena();
}
inline void AnimatorMoves_Move::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AnimatorMoves.Move.MethodCall)
}
#if LANG_CXX11
inline void AnimatorMoves_Move::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AnimatorMoves.Move.MethodCall)
}
#endif
inline void AnimatorMoves_Move::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AnimatorMoves.Move.MethodCall)
}
inline void AnimatorMoves_Move::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AnimatorMoves.Move.MethodCall)
}
inline ::std::string* AnimatorMoves_Move::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.AnimatorMoves.Move.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnimatorMoves_Move::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.AnimatorMoves.Move.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnimatorMoves_Move::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AnimatorMoves.Move.MethodCall)
}

// required string MethodParam = 6;
inline bool AnimatorMoves_Move::has_methodparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimatorMoves_Move::set_has_methodparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnimatorMoves_Move::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnimatorMoves_Move::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& AnimatorMoves_Move::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.Move.MethodParam)
  return methodparam_.GetNoArena();
}
inline void AnimatorMoves_Move::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AnimatorMoves.Move.MethodParam)
}
#if LANG_CXX11
inline void AnimatorMoves_Move::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AnimatorMoves.Move.MethodParam)
}
#endif
inline void AnimatorMoves_Move::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AnimatorMoves.Move.MethodParam)
}
inline void AnimatorMoves_Move::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AnimatorMoves.Move.MethodParam)
}
inline ::std::string* AnimatorMoves_Move::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.AnimatorMoves.Move.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnimatorMoves_Move::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.AnimatorMoves.Move.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnimatorMoves_Move::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AnimatorMoves.Move.MethodParam)
}

// -------------------------------------------------------------------

// AnimatorMoves

// repeated .NFFS.AnimatorMoves.Move xMoveList = 1;
inline int AnimatorMoves::xmovelist_size() const {
  return xmovelist_.size();
}
inline void AnimatorMoves::clear_xmovelist() {
  xmovelist_.Clear();
}
inline ::NFFS::AnimatorMoves_Move* AnimatorMoves::mutable_xmovelist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.AnimatorMoves.xMoveList)
  return xmovelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorMoves_Move >*
AnimatorMoves::mutable_xmovelist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.AnimatorMoves.xMoveList)
  return &xmovelist_;
}
inline const ::NFFS::AnimatorMoves_Move& AnimatorMoves::xmovelist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorMoves.xMoveList)
  return xmovelist_.Get(index);
}
inline ::NFFS::AnimatorMoves_Move* AnimatorMoves::add_xmovelist() {
  // @@protoc_insertion_point(field_add:NFFS.AnimatorMoves.xMoveList)
  return xmovelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorMoves_Move >&
AnimatorMoves::xmovelist() const {
  // @@protoc_insertion_point(field_list:NFFS.AnimatorMoves.xMoveList)
  return xmovelist_;
}

// -------------------------------------------------------------------

// CameraControlEvents_Camera

// required float EventTime = 1;
inline bool CameraControlEvents_Camera::has_eventtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraControlEvents_Camera::set_has_eventtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraControlEvents_Camera::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraControlEvents_Camera::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float CameraControlEvents_Camera::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.Camera.EventTime)
  return eventtime_;
}
inline void CameraControlEvents_Camera::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.CameraControlEvents.Camera.EventTime)
}

// required .NFFS.CameraControlEvents.ECEType EventType = 2;
inline bool CameraControlEvents_Camera::has_eventtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraControlEvents_Camera::set_has_eventtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraControlEvents_Camera::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraControlEvents_Camera::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::CameraControlEvents_ECEType CameraControlEvents_Camera::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.Camera.EventType)
  return static_cast< ::NFFS::CameraControlEvents_ECEType >(eventtype_);
}
inline void CameraControlEvents_Camera::set_eventtype(::NFFS::CameraControlEvents_ECEType value) {
  assert(::NFFS::CameraControlEvents_ECEType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.CameraControlEvents.Camera.EventType)
}

// required .NFFS.FSVector3 AmountParam = 3;
inline bool CameraControlEvents_Camera::has_amountparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraControlEvents_Camera::set_has_amountparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraControlEvents_Camera::clear_has_amountparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraControlEvents_Camera::clear_amountparam() {
  if (amountparam_ != NULL) amountparam_->Clear();
  clear_has_amountparam();
}
inline const ::NFFS::FSVector3& CameraControlEvents_Camera::_internal_amountparam() const {
  return *amountparam_;
}
inline const ::NFFS::FSVector3& CameraControlEvents_Camera::amountparam() const {
  const ::NFFS::FSVector3* p = amountparam_;
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.Camera.AmountParam)
  return p != NULL ? *p : *reinterpret_cast<const ::NFFS::FSVector3*>(
      &::NFFS::_FSVector3_default_instance_);
}
inline ::NFFS::FSVector3* CameraControlEvents_Camera::release_amountparam() {
  // @@protoc_insertion_point(field_release:NFFS.CameraControlEvents.Camera.AmountParam)
  clear_has_amountparam();
  ::NFFS::FSVector3* temp = amountparam_;
  amountparam_ = NULL;
  return temp;
}
inline ::NFFS::FSVector3* CameraControlEvents_Camera::mutable_amountparam() {
  set_has_amountparam();
  if (amountparam_ == NULL) {
    auto* p = CreateMaybeMessage<::NFFS::FSVector3>(GetArenaNoVirtual());
    amountparam_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFFS.CameraControlEvents.Camera.AmountParam)
  return amountparam_;
}
inline void CameraControlEvents_Camera::set_allocated_amountparam(::NFFS::FSVector3* amountparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete amountparam_;
  }
  if (amountparam) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      amountparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, amountparam, submessage_arena);
    }
    set_has_amountparam();
  } else {
    clear_has_amountparam();
  }
  amountparam_ = amountparam;
  // @@protoc_insertion_point(field_set_allocated:NFFS.CameraControlEvents.Camera.AmountParam)
}

// required float ShakeTime = 4;
inline bool CameraControlEvents_Camera::has_shaketime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraControlEvents_Camera::set_has_shaketime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraControlEvents_Camera::clear_has_shaketime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraControlEvents_Camera::clear_shaketime() {
  shaketime_ = 0;
  clear_has_shaketime();
}
inline float CameraControlEvents_Camera::shaketime() const {
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.Camera.ShakeTime)
  return shaketime_;
}
inline void CameraControlEvents_Camera::set_shaketime(float value) {
  set_has_shaketime();
  shaketime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.CameraControlEvents.Camera.ShakeTime)
}

// required string MethodCall = 5;
inline bool CameraControlEvents_Camera::has_methodcall() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraControlEvents_Camera::set_has_methodcall() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraControlEvents_Camera::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraControlEvents_Camera::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& CameraControlEvents_Camera::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.Camera.MethodCall)
  return methodcall_.GetNoArena();
}
inline void CameraControlEvents_Camera::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.CameraControlEvents.Camera.MethodCall)
}
#if LANG_CXX11
inline void CameraControlEvents_Camera::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.CameraControlEvents.Camera.MethodCall)
}
#endif
inline void CameraControlEvents_Camera::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.CameraControlEvents.Camera.MethodCall)
}
inline void CameraControlEvents_Camera::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.CameraControlEvents.Camera.MethodCall)
}
inline ::std::string* CameraControlEvents_Camera::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.CameraControlEvents.Camera.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraControlEvents_Camera::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.CameraControlEvents.Camera.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraControlEvents_Camera::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.CameraControlEvents.Camera.MethodCall)
}

// required string MethodParam = 6;
inline bool CameraControlEvents_Camera::has_methodparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraControlEvents_Camera::set_has_methodparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraControlEvents_Camera::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraControlEvents_Camera::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& CameraControlEvents_Camera::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.Camera.MethodParam)
  return methodparam_.GetNoArena();
}
inline void CameraControlEvents_Camera::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.CameraControlEvents.Camera.MethodParam)
}
#if LANG_CXX11
inline void CameraControlEvents_Camera::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.CameraControlEvents.Camera.MethodParam)
}
#endif
inline void CameraControlEvents_Camera::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.CameraControlEvents.Camera.MethodParam)
}
inline void CameraControlEvents_Camera::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.CameraControlEvents.Camera.MethodParam)
}
inline ::std::string* CameraControlEvents_Camera::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.CameraControlEvents.Camera.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraControlEvents_Camera::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.CameraControlEvents.Camera.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraControlEvents_Camera::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.CameraControlEvents.Camera.MethodParam)
}

// -------------------------------------------------------------------

// CameraControlEvents

// repeated .NFFS.CameraControlEvents.Camera xCameraList = 1;
inline int CameraControlEvents::xcameralist_size() const {
  return xcameralist_.size();
}
inline void CameraControlEvents::clear_xcameralist() {
  xcameralist_.Clear();
}
inline ::NFFS::CameraControlEvents_Camera* CameraControlEvents::mutable_xcameralist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.CameraControlEvents.xCameraList)
  return xcameralist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::CameraControlEvents_Camera >*
CameraControlEvents::mutable_xcameralist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.CameraControlEvents.xCameraList)
  return &xcameralist_;
}
inline const ::NFFS::CameraControlEvents_Camera& CameraControlEvents::xcameralist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.CameraControlEvents.xCameraList)
  return xcameralist_.Get(index);
}
inline ::NFFS::CameraControlEvents_Camera* CameraControlEvents::add_xcameralist() {
  // @@protoc_insertion_point(field_add:NFFS.CameraControlEvents.xCameraList)
  return xcameralist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::CameraControlEvents_Camera >&
CameraControlEvents::xcameralist() const {
  // @@protoc_insertion_point(field_list:NFFS.CameraControlEvents.xCameraList)
  return xcameralist_;
}

// -------------------------------------------------------------------

// ParticleEvents_Particle

// required float EventTime = 1;
inline bool ParticleEvents_Particle::has_eventtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParticleEvents_Particle::set_has_eventtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParticleEvents_Particle::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParticleEvents_Particle::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float ParticleEvents_Particle::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.EventTime)
  return eventtime_;
}
inline void ParticleEvents_Particle::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.EventTime)
}

// required .NFFS.ParticleEvents.EPERTYPE Rotation = 3;
inline bool ParticleEvents_Particle::has_rotation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParticleEvents_Particle::set_has_rotation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParticleEvents_Particle::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParticleEvents_Particle::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline ::NFFS::ParticleEvents_EPERTYPE ParticleEvents_Particle::rotation() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.Rotation)
  return static_cast< ::NFFS::ParticleEvents_EPERTYPE >(rotation_);
}
inline void ParticleEvents_Particle::set_rotation(::NFFS::ParticleEvents_EPERTYPE value) {
  assert(::NFFS::ParticleEvents_EPERTYPE_IsValid(value));
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.Rotation)
}

// required string ParticlePath = 4;
inline bool ParticleEvents_Particle::has_particlepath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParticleEvents_Particle::set_has_particlepath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParticleEvents_Particle::clear_has_particlepath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParticleEvents_Particle::clear_particlepath() {
  particlepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_particlepath();
}
inline const ::std::string& ParticleEvents_Particle::particlepath() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.ParticlePath)
  return particlepath_.GetNoArena();
}
inline void ParticleEvents_Particle::set_particlepath(const ::std::string& value) {
  set_has_particlepath();
  particlepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.ParticlePath)
}
#if LANG_CXX11
inline void ParticleEvents_Particle::set_particlepath(::std::string&& value) {
  set_has_particlepath();
  particlepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.ParticleEvents.Particle.ParticlePath)
}
#endif
inline void ParticleEvents_Particle::set_particlepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_particlepath();
  particlepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.ParticleEvents.Particle.ParticlePath)
}
inline void ParticleEvents_Particle::set_particlepath(const char* value, size_t size) {
  set_has_particlepath();
  particlepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.ParticleEvents.Particle.ParticlePath)
}
inline ::std::string* ParticleEvents_Particle::mutable_particlepath() {
  set_has_particlepath();
  // @@protoc_insertion_point(field_mutable:NFFS.ParticleEvents.Particle.ParticlePath)
  return particlepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticleEvents_Particle::release_particlepath() {
  // @@protoc_insertion_point(field_release:NFFS.ParticleEvents.Particle.ParticlePath)
  if (!has_particlepath()) {
    return NULL;
  }
  clear_has_particlepath();
  return particlepath_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticleEvents_Particle::set_allocated_particlepath(::std::string* particlepath) {
  if (particlepath != NULL) {
    set_has_particlepath();
  } else {
    clear_has_particlepath();
  }
  particlepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), particlepath);
  // @@protoc_insertion_point(field_set_allocated:NFFS.ParticleEvents.Particle.ParticlePath)
}

// required string TargetTacheName = 5;
inline bool ParticleEvents_Particle::has_targettachename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParticleEvents_Particle::set_has_targettachename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParticleEvents_Particle::clear_has_targettachename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParticleEvents_Particle::clear_targettachename() {
  targettachename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targettachename();
}
inline const ::std::string& ParticleEvents_Particle::targettachename() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.TargetTacheName)
  return targettachename_.GetNoArena();
}
inline void ParticleEvents_Particle::set_targettachename(const ::std::string& value) {
  set_has_targettachename();
  targettachename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.TargetTacheName)
}
#if LANG_CXX11
inline void ParticleEvents_Particle::set_targettachename(::std::string&& value) {
  set_has_targettachename();
  targettachename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.ParticleEvents.Particle.TargetTacheName)
}
#endif
inline void ParticleEvents_Particle::set_targettachename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targettachename();
  targettachename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.ParticleEvents.Particle.TargetTacheName)
}
inline void ParticleEvents_Particle::set_targettachename(const char* value, size_t size) {
  set_has_targettachename();
  targettachename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.ParticleEvents.Particle.TargetTacheName)
}
inline ::std::string* ParticleEvents_Particle::mutable_targettachename() {
  set_has_targettachename();
  // @@protoc_insertion_point(field_mutable:NFFS.ParticleEvents.Particle.TargetTacheName)
  return targettachename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticleEvents_Particle::release_targettachename() {
  // @@protoc_insertion_point(field_release:NFFS.ParticleEvents.Particle.TargetTacheName)
  if (!has_targettachename()) {
    return NULL;
  }
  clear_has_targettachename();
  return targettachename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticleEvents_Particle::set_allocated_targettachename(::std::string* targettachename) {
  if (targettachename != NULL) {
    set_has_targettachename();
  } else {
    clear_has_targettachename();
  }
  targettachename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targettachename);
  // @@protoc_insertion_point(field_set_allocated:NFFS.ParticleEvents.Particle.TargetTacheName)
}

// required .NFFS.FSVector3 TargetTacheOffest = 6;
inline bool ParticleEvents_Particle::has_targettacheoffest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParticleEvents_Particle::set_has_targettacheoffest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParticleEvents_Particle::clear_has_targettacheoffest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParticleEvents_Particle::clear_targettacheoffest() {
  if (targettacheoffest_ != NULL) targettacheoffest_->Clear();
  clear_has_targettacheoffest();
}
inline const ::NFFS::FSVector3& ParticleEvents_Particle::_internal_targettacheoffest() const {
  return *targettacheoffest_;
}
inline const ::NFFS::FSVector3& ParticleEvents_Particle::targettacheoffest() const {
  const ::NFFS::FSVector3* p = targettacheoffest_;
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.TargetTacheOffest)
  return p != NULL ? *p : *reinterpret_cast<const ::NFFS::FSVector3*>(
      &::NFFS::_FSVector3_default_instance_);
}
inline ::NFFS::FSVector3* ParticleEvents_Particle::release_targettacheoffest() {
  // @@protoc_insertion_point(field_release:NFFS.ParticleEvents.Particle.TargetTacheOffest)
  clear_has_targettacheoffest();
  ::NFFS::FSVector3* temp = targettacheoffest_;
  targettacheoffest_ = NULL;
  return temp;
}
inline ::NFFS::FSVector3* ParticleEvents_Particle::mutable_targettacheoffest() {
  set_has_targettacheoffest();
  if (targettacheoffest_ == NULL) {
    auto* p = CreateMaybeMessage<::NFFS::FSVector3>(GetArenaNoVirtual());
    targettacheoffest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NFFS.ParticleEvents.Particle.TargetTacheOffest)
  return targettacheoffest_;
}
inline void ParticleEvents_Particle::set_allocated_targettacheoffest(::NFFS::FSVector3* targettacheoffest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete targettacheoffest_;
  }
  if (targettacheoffest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targettacheoffest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targettacheoffest, submessage_arena);
    }
    set_has_targettacheoffest();
  } else {
    clear_has_targettacheoffest();
  }
  targettacheoffest_ = targettacheoffest;
  // @@protoc_insertion_point(field_set_allocated:NFFS.ParticleEvents.Particle.TargetTacheOffest)
}

// required int32 CastToSurface = 7;
inline bool ParticleEvents_Particle::has_casttosurface() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParticleEvents_Particle::set_has_casttosurface() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParticleEvents_Particle::clear_has_casttosurface() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParticleEvents_Particle::clear_casttosurface() {
  casttosurface_ = 0;
  clear_has_casttosurface();
}
inline ::google::protobuf::int32 ParticleEvents_Particle::casttosurface() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.CastToSurface)
  return casttosurface_;
}
inline void ParticleEvents_Particle::set_casttosurface(::google::protobuf::int32 value) {
  set_has_casttosurface();
  casttosurface_ = value;
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.CastToSurface)
}

// required int32 BindTarget = 8;
inline bool ParticleEvents_Particle::has_bindtarget() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParticleEvents_Particle::set_has_bindtarget() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParticleEvents_Particle::clear_has_bindtarget() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParticleEvents_Particle::clear_bindtarget() {
  bindtarget_ = 0;
  clear_has_bindtarget();
}
inline ::google::protobuf::int32 ParticleEvents_Particle::bindtarget() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.BindTarget)
  return bindtarget_;
}
inline void ParticleEvents_Particle::set_bindtarget(::google::protobuf::int32 value) {
  set_has_bindtarget();
  bindtarget_ = value;
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.BindTarget)
}

// required float DestroyTime = 9;
inline bool ParticleEvents_Particle::has_destroytime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParticleEvents_Particle::set_has_destroytime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParticleEvents_Particle::clear_has_destroytime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParticleEvents_Particle::clear_destroytime() {
  destroytime_ = 0;
  clear_has_destroytime();
}
inline float ParticleEvents_Particle::destroytime() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.DestroyTime)
  return destroytime_;
}
inline void ParticleEvents_Particle::set_destroytime(float value) {
  set_has_destroytime();
  destroytime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.DestroyTime)
}

// required string MethodCall = 10;
inline bool ParticleEvents_Particle::has_methodcall() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParticleEvents_Particle::set_has_methodcall() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParticleEvents_Particle::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParticleEvents_Particle::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& ParticleEvents_Particle::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.MethodCall)
  return methodcall_.GetNoArena();
}
inline void ParticleEvents_Particle::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.MethodCall)
}
#if LANG_CXX11
inline void ParticleEvents_Particle::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.ParticleEvents.Particle.MethodCall)
}
#endif
inline void ParticleEvents_Particle::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.ParticleEvents.Particle.MethodCall)
}
inline void ParticleEvents_Particle::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.ParticleEvents.Particle.MethodCall)
}
inline ::std::string* ParticleEvents_Particle::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.ParticleEvents.Particle.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticleEvents_Particle::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.ParticleEvents.Particle.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticleEvents_Particle::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.ParticleEvents.Particle.MethodCall)
}

// required string MethodParam = 11;
inline bool ParticleEvents_Particle::has_methodparam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParticleEvents_Particle::set_has_methodparam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParticleEvents_Particle::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParticleEvents_Particle::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& ParticleEvents_Particle::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.Particle.MethodParam)
  return methodparam_.GetNoArena();
}
inline void ParticleEvents_Particle::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.ParticleEvents.Particle.MethodParam)
}
#if LANG_CXX11
inline void ParticleEvents_Particle::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.ParticleEvents.Particle.MethodParam)
}
#endif
inline void ParticleEvents_Particle::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.ParticleEvents.Particle.MethodParam)
}
inline void ParticleEvents_Particle::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.ParticleEvents.Particle.MethodParam)
}
inline ::std::string* ParticleEvents_Particle::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.ParticleEvents.Particle.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParticleEvents_Particle::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.ParticleEvents.Particle.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParticleEvents_Particle::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.ParticleEvents.Particle.MethodParam)
}

// -------------------------------------------------------------------

// ParticleEvents

// repeated .NFFS.ParticleEvents.Particle xParticleList = 1;
inline int ParticleEvents::xparticlelist_size() const {
  return xparticlelist_.size();
}
inline void ParticleEvents::clear_xparticlelist() {
  xparticlelist_.Clear();
}
inline ::NFFS::ParticleEvents_Particle* ParticleEvents::mutable_xparticlelist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.ParticleEvents.xParticleList)
  return xparticlelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::ParticleEvents_Particle >*
ParticleEvents::mutable_xparticlelist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.ParticleEvents.xParticleList)
  return &xparticlelist_;
}
inline const ::NFFS::ParticleEvents_Particle& ParticleEvents::xparticlelist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.ParticleEvents.xParticleList)
  return xparticlelist_.Get(index);
}
inline ::NFFS::ParticleEvents_Particle* ParticleEvents::add_xparticlelist() {
  // @@protoc_insertion_point(field_add:NFFS.ParticleEvents.xParticleList)
  return xparticlelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::ParticleEvents_Particle >&
ParticleEvents::xparticlelist() const {
  // @@protoc_insertion_point(field_list:NFFS.ParticleEvents.xParticleList)
  return xparticlelist_;
}

// -------------------------------------------------------------------

// EnableEvents_Enable

// required float EventTime = 1;
inline bool EnableEvents_Enable::has_eventtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnableEvents_Enable::set_has_eventtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnableEvents_Enable::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnableEvents_Enable::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float EnableEvents_Enable::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.EnableEvents.Enable.EventTime)
  return eventtime_;
}
inline void EnableEvents_Enable::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.EnableEvents.Enable.EventTime)
}

// required .NFFS.EnableEvents.EEETYPE EventType = 2;
inline bool EnableEvents_Enable::has_eventtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnableEvents_Enable::set_has_eventtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnableEvents_Enable::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnableEvents_Enable::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::EnableEvents_EEETYPE EnableEvents_Enable::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.EnableEvents.Enable.EventType)
  return static_cast< ::NFFS::EnableEvents_EEETYPE >(eventtype_);
}
inline void EnableEvents_Enable::set_eventtype(::NFFS::EnableEvents_EEETYPE value) {
  assert(::NFFS::EnableEvents_EEETYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.EnableEvents.Enable.EventType)
}

// required string TargetName = 3;
inline bool EnableEvents_Enable::has_targetname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnableEvents_Enable::set_has_targetname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnableEvents_Enable::clear_has_targetname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnableEvents_Enable::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetname();
}
inline const ::std::string& EnableEvents_Enable::targetname() const {
  // @@protoc_insertion_point(field_get:NFFS.EnableEvents.Enable.TargetName)
  return targetname_.GetNoArena();
}
inline void EnableEvents_Enable::set_targetname(const ::std::string& value) {
  set_has_targetname();
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.EnableEvents.Enable.TargetName)
}
#if LANG_CXX11
inline void EnableEvents_Enable::set_targetname(::std::string&& value) {
  set_has_targetname();
  targetname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.EnableEvents.Enable.TargetName)
}
#endif
inline void EnableEvents_Enable::set_targetname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetname();
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.EnableEvents.Enable.TargetName)
}
inline void EnableEvents_Enable::set_targetname(const char* value, size_t size) {
  set_has_targetname();
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.EnableEvents.Enable.TargetName)
}
inline ::std::string* EnableEvents_Enable::mutable_targetname() {
  set_has_targetname();
  // @@protoc_insertion_point(field_mutable:NFFS.EnableEvents.Enable.TargetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableEvents_Enable::release_targetname() {
  // @@protoc_insertion_point(field_release:NFFS.EnableEvents.Enable.TargetName)
  if (!has_targetname()) {
    return NULL;
  }
  clear_has_targetname();
  return targetname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableEvents_Enable::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    set_has_targetname();
  } else {
    clear_has_targetname();
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:NFFS.EnableEvents.Enable.TargetName)
}

// required string MethodCall = 4;
inline bool EnableEvents_Enable::has_methodcall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnableEvents_Enable::set_has_methodcall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnableEvents_Enable::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnableEvents_Enable::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& EnableEvents_Enable::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.EnableEvents.Enable.MethodCall)
  return methodcall_.GetNoArena();
}
inline void EnableEvents_Enable::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.EnableEvents.Enable.MethodCall)
}
#if LANG_CXX11
inline void EnableEvents_Enable::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.EnableEvents.Enable.MethodCall)
}
#endif
inline void EnableEvents_Enable::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.EnableEvents.Enable.MethodCall)
}
inline void EnableEvents_Enable::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.EnableEvents.Enable.MethodCall)
}
inline ::std::string* EnableEvents_Enable::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.EnableEvents.Enable.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableEvents_Enable::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.EnableEvents.Enable.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableEvents_Enable::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.EnableEvents.Enable.MethodCall)
}

// required string MethodParam = 5;
inline bool EnableEvents_Enable::has_methodparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnableEvents_Enable::set_has_methodparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnableEvents_Enable::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnableEvents_Enable::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& EnableEvents_Enable::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.EnableEvents.Enable.MethodParam)
  return methodparam_.GetNoArena();
}
inline void EnableEvents_Enable::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.EnableEvents.Enable.MethodParam)
}
#if LANG_CXX11
inline void EnableEvents_Enable::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.EnableEvents.Enable.MethodParam)
}
#endif
inline void EnableEvents_Enable::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.EnableEvents.Enable.MethodParam)
}
inline void EnableEvents_Enable::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.EnableEvents.Enable.MethodParam)
}
inline ::std::string* EnableEvents_Enable::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.EnableEvents.Enable.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnableEvents_Enable::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.EnableEvents.Enable.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnableEvents_Enable::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.EnableEvents.Enable.MethodParam)
}

// -------------------------------------------------------------------

// EnableEvents

// repeated .NFFS.EnableEvents.Enable xEnableList = 1;
inline int EnableEvents::xenablelist_size() const {
  return xenablelist_.size();
}
inline void EnableEvents::clear_xenablelist() {
  xenablelist_.Clear();
}
inline ::NFFS::EnableEvents_Enable* EnableEvents::mutable_xenablelist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.EnableEvents.xEnableList)
  return xenablelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::EnableEvents_Enable >*
EnableEvents::mutable_xenablelist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.EnableEvents.xEnableList)
  return &xenablelist_;
}
inline const ::NFFS::EnableEvents_Enable& EnableEvents::xenablelist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.EnableEvents.xEnableList)
  return xenablelist_.Get(index);
}
inline ::NFFS::EnableEvents_Enable* EnableEvents::add_xenablelist() {
  // @@protoc_insertion_point(field_add:NFFS.EnableEvents.xEnableList)
  return xenablelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::EnableEvents_Enable >&
EnableEvents::xenablelist() const {
  // @@protoc_insertion_point(field_list:NFFS.EnableEvents.xEnableList)
  return xenablelist_;
}

// -------------------------------------------------------------------

// TrailEvents_Trail

// required float EventTime = 1;
inline bool TrailEvents_Trail::has_eventtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrailEvents_Trail::set_has_eventtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrailEvents_Trail::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrailEvents_Trail::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float TrailEvents_Trail::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.TrailEvents.Trail.EventTime)
  return eventtime_;
}
inline void TrailEvents_Trail::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.TrailEvents.Trail.EventTime)
}

// required .NFFS.TrailEvents.TEETYPE EventType = 2;
inline bool TrailEvents_Trail::has_eventtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrailEvents_Trail::set_has_eventtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrailEvents_Trail::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrailEvents_Trail::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::TrailEvents_TEETYPE TrailEvents_Trail::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.TrailEvents.Trail.EventType)
  return static_cast< ::NFFS::TrailEvents_TEETYPE >(eventtype_);
}
inline void TrailEvents_Trail::set_eventtype(::NFFS::TrailEvents_TEETYPE value) {
  assert(::NFFS::TrailEvents_TEETYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.TrailEvents.Trail.EventType)
}

// required string TargetName = 3;
inline bool TrailEvents_Trail::has_targetname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrailEvents_Trail::set_has_targetname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrailEvents_Trail::clear_has_targetname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrailEvents_Trail::clear_targetname() {
  targetname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_targetname();
}
inline const ::std::string& TrailEvents_Trail::targetname() const {
  // @@protoc_insertion_point(field_get:NFFS.TrailEvents.Trail.TargetName)
  return targetname_.GetNoArena();
}
inline void TrailEvents_Trail::set_targetname(const ::std::string& value) {
  set_has_targetname();
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.TrailEvents.Trail.TargetName)
}
#if LANG_CXX11
inline void TrailEvents_Trail::set_targetname(::std::string&& value) {
  set_has_targetname();
  targetname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.TrailEvents.Trail.TargetName)
}
#endif
inline void TrailEvents_Trail::set_targetname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_targetname();
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.TrailEvents.Trail.TargetName)
}
inline void TrailEvents_Trail::set_targetname(const char* value, size_t size) {
  set_has_targetname();
  targetname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.TrailEvents.Trail.TargetName)
}
inline ::std::string* TrailEvents_Trail::mutable_targetname() {
  set_has_targetname();
  // @@protoc_insertion_point(field_mutable:NFFS.TrailEvents.Trail.TargetName)
  return targetname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrailEvents_Trail::release_targetname() {
  // @@protoc_insertion_point(field_release:NFFS.TrailEvents.Trail.TargetName)
  if (!has_targetname()) {
    return NULL;
  }
  clear_has_targetname();
  return targetname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrailEvents_Trail::set_allocated_targetname(::std::string* targetname) {
  if (targetname != NULL) {
    set_has_targetname();
  } else {
    clear_has_targetname();
  }
  targetname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetname);
  // @@protoc_insertion_point(field_set_allocated:NFFS.TrailEvents.Trail.TargetName)
}

// required string MethodCall = 4;
inline bool TrailEvents_Trail::has_methodcall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrailEvents_Trail::set_has_methodcall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrailEvents_Trail::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrailEvents_Trail::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& TrailEvents_Trail::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.TrailEvents.Trail.MethodCall)
  return methodcall_.GetNoArena();
}
inline void TrailEvents_Trail::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.TrailEvents.Trail.MethodCall)
}
#if LANG_CXX11
inline void TrailEvents_Trail::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.TrailEvents.Trail.MethodCall)
}
#endif
inline void TrailEvents_Trail::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.TrailEvents.Trail.MethodCall)
}
inline void TrailEvents_Trail::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.TrailEvents.Trail.MethodCall)
}
inline ::std::string* TrailEvents_Trail::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.TrailEvents.Trail.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrailEvents_Trail::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.TrailEvents.Trail.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrailEvents_Trail::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.TrailEvents.Trail.MethodCall)
}

// required string MethodParam = 5;
inline bool TrailEvents_Trail::has_methodparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrailEvents_Trail::set_has_methodparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrailEvents_Trail::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrailEvents_Trail::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& TrailEvents_Trail::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.TrailEvents.Trail.MethodParam)
  return methodparam_.GetNoArena();
}
inline void TrailEvents_Trail::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.TrailEvents.Trail.MethodParam)
}
#if LANG_CXX11
inline void TrailEvents_Trail::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.TrailEvents.Trail.MethodParam)
}
#endif
inline void TrailEvents_Trail::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.TrailEvents.Trail.MethodParam)
}
inline void TrailEvents_Trail::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.TrailEvents.Trail.MethodParam)
}
inline ::std::string* TrailEvents_Trail::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.TrailEvents.Trail.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrailEvents_Trail::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.TrailEvents.Trail.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrailEvents_Trail::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.TrailEvents.Trail.MethodParam)
}

// -------------------------------------------------------------------

// TrailEvents

// repeated .NFFS.TrailEvents.Trail xTrailList = 1;
inline int TrailEvents::xtraillist_size() const {
  return xtraillist_.size();
}
inline void TrailEvents::clear_xtraillist() {
  xtraillist_.Clear();
}
inline ::NFFS::TrailEvents_Trail* TrailEvents::mutable_xtraillist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.TrailEvents.xTrailList)
  return xtraillist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::TrailEvents_Trail >*
TrailEvents::mutable_xtraillist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.TrailEvents.xTrailList)
  return &xtraillist_;
}
inline const ::NFFS::TrailEvents_Trail& TrailEvents::xtraillist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.TrailEvents.xTrailList)
  return xtraillist_.Get(index);
}
inline ::NFFS::TrailEvents_Trail* TrailEvents::add_xtraillist() {
  // @@protoc_insertion_point(field_add:NFFS.TrailEvents.xTrailList)
  return xtraillist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::TrailEvents_Trail >&
TrailEvents::xtraillist() const {
  // @@protoc_insertion_point(field_list:NFFS.TrailEvents.xTrailList)
  return xtraillist_;
}

// -------------------------------------------------------------------

// AudioEvents_Audio

// required float EventTime = 1;
inline bool AudioEvents_Audio::has_eventtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioEvents_Audio::set_has_eventtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioEvents_Audio::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioEvents_Audio::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float AudioEvents_Audio::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.AudioEvents.Audio.EventTime)
  return eventtime_;
}
inline void AudioEvents_Audio::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AudioEvents.Audio.EventTime)
}

// required .NFFS.AudioEvents.AEETYPE EventType = 2;
inline bool AudioEvents_Audio::has_eventtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioEvents_Audio::set_has_eventtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioEvents_Audio::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioEvents_Audio::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::AudioEvents_AEETYPE AudioEvents_Audio::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.AudioEvents.Audio.EventType)
  return static_cast< ::NFFS::AudioEvents_AEETYPE >(eventtype_);
}
inline void AudioEvents_Audio::set_eventtype(::NFFS::AudioEvents_AEETYPE value) {
  assert(::NFFS::AudioEvents_AEETYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AudioEvents.Audio.EventType)
}

// required string AudioName = 3;
inline bool AudioEvents_Audio::has_audioname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioEvents_Audio::set_has_audioname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioEvents_Audio::clear_has_audioname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioEvents_Audio::clear_audioname() {
  audioname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audioname();
}
inline const ::std::string& AudioEvents_Audio::audioname() const {
  // @@protoc_insertion_point(field_get:NFFS.AudioEvents.Audio.AudioName)
  return audioname_.GetNoArena();
}
inline void AudioEvents_Audio::set_audioname(const ::std::string& value) {
  set_has_audioname();
  audioname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AudioEvents.Audio.AudioName)
}
#if LANG_CXX11
inline void AudioEvents_Audio::set_audioname(::std::string&& value) {
  set_has_audioname();
  audioname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AudioEvents.Audio.AudioName)
}
#endif
inline void AudioEvents_Audio::set_audioname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_audioname();
  audioname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AudioEvents.Audio.AudioName)
}
inline void AudioEvents_Audio::set_audioname(const char* value, size_t size) {
  set_has_audioname();
  audioname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AudioEvents.Audio.AudioName)
}
inline ::std::string* AudioEvents_Audio::mutable_audioname() {
  set_has_audioname();
  // @@protoc_insertion_point(field_mutable:NFFS.AudioEvents.Audio.AudioName)
  return audioname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioEvents_Audio::release_audioname() {
  // @@protoc_insertion_point(field_release:NFFS.AudioEvents.Audio.AudioName)
  if (!has_audioname()) {
    return NULL;
  }
  clear_has_audioname();
  return audioname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioEvents_Audio::set_allocated_audioname(::std::string* audioname) {
  if (audioname != NULL) {
    set_has_audioname();
  } else {
    clear_has_audioname();
  }
  audioname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audioname);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AudioEvents.Audio.AudioName)
}

// required string MethodCall = 4;
inline bool AudioEvents_Audio::has_methodcall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioEvents_Audio::set_has_methodcall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioEvents_Audio::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioEvents_Audio::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& AudioEvents_Audio::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.AudioEvents.Audio.MethodCall)
  return methodcall_.GetNoArena();
}
inline void AudioEvents_Audio::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AudioEvents.Audio.MethodCall)
}
#if LANG_CXX11
inline void AudioEvents_Audio::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AudioEvents.Audio.MethodCall)
}
#endif
inline void AudioEvents_Audio::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AudioEvents.Audio.MethodCall)
}
inline void AudioEvents_Audio::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AudioEvents.Audio.MethodCall)
}
inline ::std::string* AudioEvents_Audio::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.AudioEvents.Audio.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioEvents_Audio::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.AudioEvents.Audio.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioEvents_Audio::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AudioEvents.Audio.MethodCall)
}

// required string MethodParam = 5;
inline bool AudioEvents_Audio::has_methodparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioEvents_Audio::set_has_methodparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioEvents_Audio::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioEvents_Audio::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& AudioEvents_Audio::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.AudioEvents.Audio.MethodParam)
  return methodparam_.GetNoArena();
}
inline void AudioEvents_Audio::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AudioEvents.Audio.MethodParam)
}
#if LANG_CXX11
inline void AudioEvents_Audio::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AudioEvents.Audio.MethodParam)
}
#endif
inline void AudioEvents_Audio::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AudioEvents.Audio.MethodParam)
}
inline void AudioEvents_Audio::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AudioEvents.Audio.MethodParam)
}
inline ::std::string* AudioEvents_Audio::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.AudioEvents.Audio.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioEvents_Audio::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.AudioEvents.Audio.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioEvents_Audio::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AudioEvents.Audio.MethodParam)
}

// -------------------------------------------------------------------

// AudioEvents

// repeated .NFFS.AudioEvents.Audio xAudioList = 1;
inline int AudioEvents::xaudiolist_size() const {
  return xaudiolist_.size();
}
inline void AudioEvents::clear_xaudiolist() {
  xaudiolist_.Clear();
}
inline ::NFFS::AudioEvents_Audio* AudioEvents::mutable_xaudiolist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.AudioEvents.xAudioList)
  return xaudiolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::AudioEvents_Audio >*
AudioEvents::mutable_xaudiolist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.AudioEvents.xAudioList)
  return &xaudiolist_;
}
inline const ::NFFS::AudioEvents_Audio& AudioEvents::xaudiolist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.AudioEvents.xAudioList)
  return xaudiolist_.Get(index);
}
inline ::NFFS::AudioEvents_Audio* AudioEvents::add_xaudiolist() {
  // @@protoc_insertion_point(field_add:NFFS.AudioEvents.xAudioList)
  return xaudiolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::AudioEvents_Audio >&
AudioEvents::xaudiolist() const {
  // @@protoc_insertion_point(field_list:NFFS.AudioEvents.xAudioList)
  return xaudiolist_;
}

// -------------------------------------------------------------------

// GlobalSpeeds_Speed

// required float EventTime = 1;
inline bool GlobalSpeeds_Speed::has_eventtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalSpeeds_Speed::set_has_eventtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalSpeeds_Speed::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalSpeeds_Speed::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float GlobalSpeeds_Speed::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.GlobalSpeeds.Speed.EventTime)
  return eventtime_;
}
inline void GlobalSpeeds_Speed::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.GlobalSpeeds.Speed.EventTime)
}

// required .NFFS.GlobalSpeeds.EGSTYPE EventType = 2;
inline bool GlobalSpeeds_Speed::has_eventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GlobalSpeeds_Speed::set_has_eventtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GlobalSpeeds_Speed::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GlobalSpeeds_Speed::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::GlobalSpeeds_EGSTYPE GlobalSpeeds_Speed::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.GlobalSpeeds.Speed.EventType)
  return static_cast< ::NFFS::GlobalSpeeds_EGSTYPE >(eventtype_);
}
inline void GlobalSpeeds_Speed::set_eventtype(::NFFS::GlobalSpeeds_EGSTYPE value) {
  assert(::NFFS::GlobalSpeeds_EGSTYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.GlobalSpeeds.Speed.EventType)
}

// required float SpeedValue = 3;
inline bool GlobalSpeeds_Speed::has_speedvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GlobalSpeeds_Speed::set_has_speedvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GlobalSpeeds_Speed::clear_has_speedvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GlobalSpeeds_Speed::clear_speedvalue() {
  speedvalue_ = 0;
  clear_has_speedvalue();
}
inline float GlobalSpeeds_Speed::speedvalue() const {
  // @@protoc_insertion_point(field_get:NFFS.GlobalSpeeds.Speed.SpeedValue)
  return speedvalue_;
}
inline void GlobalSpeeds_Speed::set_speedvalue(float value) {
  set_has_speedvalue();
  speedvalue_ = value;
  // @@protoc_insertion_point(field_set:NFFS.GlobalSpeeds.Speed.SpeedValue)
}

// -------------------------------------------------------------------

// GlobalSpeeds

// repeated .NFFS.GlobalSpeeds.Speed xSpeedList = 1;
inline int GlobalSpeeds::xspeedlist_size() const {
  return xspeedlist_.size();
}
inline void GlobalSpeeds::clear_xspeedlist() {
  xspeedlist_.Clear();
}
inline ::NFFS::GlobalSpeeds_Speed* GlobalSpeeds::mutable_xspeedlist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.GlobalSpeeds.xSpeedList)
  return xspeedlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::GlobalSpeeds_Speed >*
GlobalSpeeds::mutable_xspeedlist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.GlobalSpeeds.xSpeedList)
  return &xspeedlist_;
}
inline const ::NFFS::GlobalSpeeds_Speed& GlobalSpeeds::xspeedlist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.GlobalSpeeds.xSpeedList)
  return xspeedlist_.Get(index);
}
inline ::NFFS::GlobalSpeeds_Speed* GlobalSpeeds::add_xspeedlist() {
  // @@protoc_insertion_point(field_add:NFFS.GlobalSpeeds.xSpeedList)
  return xspeedlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::GlobalSpeeds_Speed >&
GlobalSpeeds::xspeedlist() const {
  // @@protoc_insertion_point(field_list:NFFS.GlobalSpeeds.xSpeedList)
  return xspeedlist_;
}

// -------------------------------------------------------------------

// AnimatorFlys_Fly

// required float EventTime = 1;
inline bool AnimatorFlys_Fly::has_eventtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnimatorFlys_Fly::set_has_eventtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnimatorFlys_Fly::clear_has_eventtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnimatorFlys_Fly::clear_eventtime() {
  eventtime_ = 0;
  clear_has_eventtime();
}
inline float AnimatorFlys_Fly::eventtime() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.EventTime)
  return eventtime_;
}
inline void AnimatorFlys_Fly::set_eventtime(float value) {
  set_has_eventtime();
  eventtime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.EventTime)
}

// required .NFFS.AnimatorFlys.EAFType EventType = 2;
inline bool AnimatorFlys_Fly::has_eventtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnimatorFlys_Fly::set_has_eventtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnimatorFlys_Fly::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnimatorFlys_Fly::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::NFFS::AnimatorFlys_EAFType AnimatorFlys_Fly::eventtype() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.EventType)
  return static_cast< ::NFFS::AnimatorFlys_EAFType >(eventtype_);
}
inline void AnimatorFlys_Fly::set_eventtype(::NFFS::AnimatorFlys_EAFType value) {
  assert(::NFFS::AnimatorFlys_EAFType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.EventType)
}

// required float MoveDis = 3;
inline bool AnimatorFlys_Fly::has_movedis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnimatorFlys_Fly::set_has_movedis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnimatorFlys_Fly::clear_has_movedis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnimatorFlys_Fly::clear_movedis() {
  movedis_ = 0;
  clear_has_movedis();
}
inline float AnimatorFlys_Fly::movedis() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.MoveDis)
  return movedis_;
}
inline void AnimatorFlys_Fly::set_movedis(float value) {
  set_has_movedis();
  movedis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.MoveDis)
}

// required float MoveTime = 4;
inline bool AnimatorFlys_Fly::has_movetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnimatorFlys_Fly::set_has_movetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnimatorFlys_Fly::clear_has_movetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnimatorFlys_Fly::clear_movetime() {
  movetime_ = 0;
  clear_has_movetime();
}
inline float AnimatorFlys_Fly::movetime() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.MoveTime)
  return movetime_;
}
inline void AnimatorFlys_Fly::set_movetime(float value) {
  set_has_movetime();
  movetime_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.MoveTime)
}

// required float MoveTopDis = 5;
inline bool AnimatorFlys_Fly::has_movetopdis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnimatorFlys_Fly::set_has_movetopdis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnimatorFlys_Fly::clear_has_movetopdis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnimatorFlys_Fly::clear_movetopdis() {
  movetopdis_ = 0;
  clear_has_movetopdis();
}
inline float AnimatorFlys_Fly::movetopdis() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.MoveTopDis)
  return movetopdis_;
}
inline void AnimatorFlys_Fly::set_movetopdis(float value) {
  set_has_movetopdis();
  movetopdis_ = value;
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.MoveTopDis)
}

// required string MethodCall = 6;
inline bool AnimatorFlys_Fly::has_methodcall() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnimatorFlys_Fly::set_has_methodcall() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnimatorFlys_Fly::clear_has_methodcall() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnimatorFlys_Fly::clear_methodcall() {
  methodcall_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodcall();
}
inline const ::std::string& AnimatorFlys_Fly::methodcall() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.MethodCall)
  return methodcall_.GetNoArena();
}
inline void AnimatorFlys_Fly::set_methodcall(const ::std::string& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.MethodCall)
}
#if LANG_CXX11
inline void AnimatorFlys_Fly::set_methodcall(::std::string&& value) {
  set_has_methodcall();
  methodcall_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AnimatorFlys.Fly.MethodCall)
}
#endif
inline void AnimatorFlys_Fly::set_methodcall(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AnimatorFlys.Fly.MethodCall)
}
inline void AnimatorFlys_Fly::set_methodcall(const char* value, size_t size) {
  set_has_methodcall();
  methodcall_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AnimatorFlys.Fly.MethodCall)
}
inline ::std::string* AnimatorFlys_Fly::mutable_methodcall() {
  set_has_methodcall();
  // @@protoc_insertion_point(field_mutable:NFFS.AnimatorFlys.Fly.MethodCall)
  return methodcall_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnimatorFlys_Fly::release_methodcall() {
  // @@protoc_insertion_point(field_release:NFFS.AnimatorFlys.Fly.MethodCall)
  if (!has_methodcall()) {
    return NULL;
  }
  clear_has_methodcall();
  return methodcall_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnimatorFlys_Fly::set_allocated_methodcall(::std::string* methodcall) {
  if (methodcall != NULL) {
    set_has_methodcall();
  } else {
    clear_has_methodcall();
  }
  methodcall_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodcall);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AnimatorFlys.Fly.MethodCall)
}

// required string MethodParam = 7;
inline bool AnimatorFlys_Fly::has_methodparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimatorFlys_Fly::set_has_methodparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnimatorFlys_Fly::clear_has_methodparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnimatorFlys_Fly::clear_methodparam() {
  methodparam_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_methodparam();
}
inline const ::std::string& AnimatorFlys_Fly::methodparam() const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.Fly.MethodParam)
  return methodparam_.GetNoArena();
}
inline void AnimatorFlys_Fly::set_methodparam(const ::std::string& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFFS.AnimatorFlys.Fly.MethodParam)
}
#if LANG_CXX11
inline void AnimatorFlys_Fly::set_methodparam(::std::string&& value) {
  set_has_methodparam();
  methodparam_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFFS.AnimatorFlys.Fly.MethodParam)
}
#endif
inline void AnimatorFlys_Fly::set_methodparam(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFFS.AnimatorFlys.Fly.MethodParam)
}
inline void AnimatorFlys_Fly::set_methodparam(const char* value, size_t size) {
  set_has_methodparam();
  methodparam_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFFS.AnimatorFlys.Fly.MethodParam)
}
inline ::std::string* AnimatorFlys_Fly::mutable_methodparam() {
  set_has_methodparam();
  // @@protoc_insertion_point(field_mutable:NFFS.AnimatorFlys.Fly.MethodParam)
  return methodparam_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnimatorFlys_Fly::release_methodparam() {
  // @@protoc_insertion_point(field_release:NFFS.AnimatorFlys.Fly.MethodParam)
  if (!has_methodparam()) {
    return NULL;
  }
  clear_has_methodparam();
  return methodparam_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnimatorFlys_Fly::set_allocated_methodparam(::std::string* methodparam) {
  if (methodparam != NULL) {
    set_has_methodparam();
  } else {
    clear_has_methodparam();
  }
  methodparam_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), methodparam);
  // @@protoc_insertion_point(field_set_allocated:NFFS.AnimatorFlys.Fly.MethodParam)
}

// -------------------------------------------------------------------

// AnimatorFlys

// repeated .NFFS.AnimatorFlys.Fly xFlyList = 1;
inline int AnimatorFlys::xflylist_size() const {
  return xflylist_.size();
}
inline void AnimatorFlys::clear_xflylist() {
  xflylist_.Clear();
}
inline ::NFFS::AnimatorFlys_Fly* AnimatorFlys::mutable_xflylist(int index) {
  // @@protoc_insertion_point(field_mutable:NFFS.AnimatorFlys.xFlyList)
  return xflylist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorFlys_Fly >*
AnimatorFlys::mutable_xflylist() {
  // @@protoc_insertion_point(field_mutable_list:NFFS.AnimatorFlys.xFlyList)
  return &xflylist_;
}
inline const ::NFFS::AnimatorFlys_Fly& AnimatorFlys::xflylist(int index) const {
  // @@protoc_insertion_point(field_get:NFFS.AnimatorFlys.xFlyList)
  return xflylist_.Get(index);
}
inline ::NFFS::AnimatorFlys_Fly* AnimatorFlys::add_xflylist() {
  // @@protoc_insertion_point(field_add:NFFS.AnimatorFlys.xFlyList)
  return xflylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NFFS::AnimatorFlys_Fly >&
AnimatorFlys::xflylist() const {
  // @@protoc_insertion_point(field_list:NFFS.AnimatorFlys.xFlyList)
  return xflylist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFFS

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::NFFS::SuwayyahEvents_ESEType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::SuwayyahEvents_ESEType>() {
  return ::NFFS::SuwayyahEvents_ESEType_descriptor();
}
template <> struct is_proto_enum< ::NFFS::BulletEvents_EBEType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::BulletEvents_EBEType>() {
  return ::NFFS::BulletEvents_EBEType_descriptor();
}
template <> struct is_proto_enum< ::NFFS::BulletEvents_EBE_BACKType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::BulletEvents_EBE_BACKType>() {
  return ::NFFS::BulletEvents_EBE_BACKType_descriptor();
}
template <> struct is_proto_enum< ::NFFS::AnimatorMoves_EAMType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::AnimatorMoves_EAMType>() {
  return ::NFFS::AnimatorMoves_EAMType_descriptor();
}
template <> struct is_proto_enum< ::NFFS::CameraControlEvents_ECEType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::CameraControlEvents_ECEType>() {
  return ::NFFS::CameraControlEvents_ECEType_descriptor();
}
template <> struct is_proto_enum< ::NFFS::ParticleEvents_EPERTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::ParticleEvents_EPERTYPE>() {
  return ::NFFS::ParticleEvents_EPERTYPE_descriptor();
}
template <> struct is_proto_enum< ::NFFS::EnableEvents_EEETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::EnableEvents_EEETYPE>() {
  return ::NFFS::EnableEvents_EEETYPE_descriptor();
}
template <> struct is_proto_enum< ::NFFS::TrailEvents_TEETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::TrailEvents_TEETYPE>() {
  return ::NFFS::TrailEvents_TEETYPE_descriptor();
}
template <> struct is_proto_enum< ::NFFS::AudioEvents_AEETYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::AudioEvents_AEETYPE>() {
  return ::NFFS::AudioEvents_AEETYPE_descriptor();
}
template <> struct is_proto_enum< ::NFFS::GlobalSpeeds_EGSTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::GlobalSpeeds_EGSTYPE>() {
  return ::NFFS::GlobalSpeeds_EGSTYPE_descriptor();
}
template <> struct is_proto_enum< ::NFFS::AnimatorFlys_EAFType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFFS::AnimatorFlys_EAFType>() {
  return ::NFFS::AnimatorFlys_EAFType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NFFleetingDefine_2eproto
