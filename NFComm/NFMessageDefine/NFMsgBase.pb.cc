// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NFMsgBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NFMsg {
class IdentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Ident>
     _instance;
} _Ident_default_instance_;
class Vector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vector2>
     _instance;
} _Vector2_default_instance_;
class Vector3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Vector3>
     _instance;
} _Vector3_default_instance_;
class PropertyIntDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyInt>
     _instance;
} _PropertyInt_default_instance_;
class PropertyFloatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyFloat>
     _instance;
} _PropertyFloat_default_instance_;
class PropertyStringDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyString>
     _instance;
} _PropertyString_default_instance_;
class PropertyObjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyObject>
     _instance;
} _PropertyObject_default_instance_;
class PropertyVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyVector2>
     _instance;
} _PropertyVector2_default_instance_;
class PropertyVector3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PropertyVector3>
     _instance;
} _PropertyVector3_default_instance_;
class RecordIntDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordInt>
     _instance;
} _RecordInt_default_instance_;
class RecordFloatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordFloat>
     _instance;
} _RecordFloat_default_instance_;
class RecordStringDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordString>
     _instance;
} _RecordString_default_instance_;
class RecordObjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordObject>
     _instance;
} _RecordObject_default_instance_;
class RecordVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordVector2>
     _instance;
} _RecordVector2_default_instance_;
class RecordVector3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordVector3>
     _instance;
} _RecordVector3_default_instance_;
class RecordAddRowStructDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RecordAddRowStruct>
     _instance;
} _RecordAddRowStruct_default_instance_;
class ObjectRecordBaseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordBase>
     _instance;
} _ObjectRecordBase_default_instance_;
class ObjectPropertyIntDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyInt>
     _instance;
} _ObjectPropertyInt_default_instance_;
class ObjectPropertyFloatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyFloat>
     _instance;
} _ObjectPropertyFloat_default_instance_;
class ObjectPropertyStringDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyString>
     _instance;
} _ObjectPropertyString_default_instance_;
class ObjectPropertyObjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyObject>
     _instance;
} _ObjectPropertyObject_default_instance_;
class ObjectPropertyVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyVector2>
     _instance;
} _ObjectPropertyVector2_default_instance_;
class ObjectPropertyVector3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyVector3>
     _instance;
} _ObjectPropertyVector3_default_instance_;
class ObjectRecordIntDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordInt>
     _instance;
} _ObjectRecordInt_default_instance_;
class ObjectRecordFloatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordFloat>
     _instance;
} _ObjectRecordFloat_default_instance_;
class ObjectRecordStringDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordString>
     _instance;
} _ObjectRecordString_default_instance_;
class ObjectRecordObjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordObject>
     _instance;
} _ObjectRecordObject_default_instance_;
class ObjectRecordVector2DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordVector2>
     _instance;
} _ObjectRecordVector2_default_instance_;
class ObjectRecordVector3DefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordVector3>
     _instance;
} _ObjectRecordVector3_default_instance_;
class ObjectRecordSwapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordSwap>
     _instance;
} _ObjectRecordSwap_default_instance_;
class ObjectRecordAddRowDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordAddRow>
     _instance;
} _ObjectRecordAddRow_default_instance_;
class ObjectRecordRemoveDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordRemove>
     _instance;
} _ObjectRecordRemove_default_instance_;
class ObjectPropertyListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectPropertyList>
     _instance;
} _ObjectPropertyList_default_instance_;
class MultiObjectPropertyListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultiObjectPropertyList>
     _instance;
} _MultiObjectPropertyList_default_instance_;
class ObjectRecordListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectRecordList>
     _instance;
} _ObjectRecordList_default_instance_;
class MultiObjectRecordListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MultiObjectRecordList>
     _instance;
} _MultiObjectRecordList_default_instance_;
class MsgBaseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MsgBase>
     _instance;
} _MsgBase_default_instance_;
class ReqCommandDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReqCommand>
     _instance;
} _ReqCommand_default_instance_;

namespace protobuf_NFMsgBase_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, svrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ident, index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, property_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyInt, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, property_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyFloat, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, property_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyString, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, property_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyObject, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, property_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector2, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, property_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyVector3, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordInt, data_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordFloat, data_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordString, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordObject, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector2, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, col_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordVector3, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_int_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_float_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_string_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_vector2_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordAddRowStruct, record_vector3_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordBase, row_struct_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyInt, property_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyFloat, property_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyString, property_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyObject, property_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector2, property_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyVector3, property_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordInt, property_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordFloat, property_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordString, property_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordObject, property_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector2, property_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordVector3, property_list_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, origin_record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, target_record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, row_origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordSwap, row_target_),
  2,
  0,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordAddRow, row_data_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, record_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordRemove, remove_row_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_int_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_float_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_string_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_object_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_vector2_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectPropertyList, property_vector3_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectPropertyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectPropertyList, multi_player_property_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectRecordList, record_list_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectRecordList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiObjectRecordList, multi_player_record_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, msg_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, player_client_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBase, hash_ident_),
  1,
  0,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, control_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_str_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, command_value_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCommand, col_),
  2,
  6,
  0,
  4,
  5,
  1,
  3,
  7,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Ident)},
  { 9, 16, sizeof(Vector2)},
  { 18, 26, sizeof(Vector3)},
  { 29, 36, sizeof(PropertyInt)},
  { 38, 45, sizeof(PropertyFloat)},
  { 47, 54, sizeof(PropertyString)},
  { 56, 63, sizeof(PropertyObject)},
  { 65, 72, sizeof(PropertyVector2)},
  { 74, 81, sizeof(PropertyVector3)},
  { 83, 91, sizeof(RecordInt)},
  { 94, 102, sizeof(RecordFloat)},
  { 105, 113, sizeof(RecordString)},
  { 116, 124, sizeof(RecordObject)},
  { 127, 135, sizeof(RecordVector2)},
  { 138, 146, sizeof(RecordVector3)},
  { 149, 161, sizeof(RecordAddRowStruct)},
  { 168, 175, sizeof(ObjectRecordBase)},
  { 177, 184, sizeof(ObjectPropertyInt)},
  { 186, 193, sizeof(ObjectPropertyFloat)},
  { 195, 202, sizeof(ObjectPropertyString)},
  { 204, 211, sizeof(ObjectPropertyObject)},
  { 213, 220, sizeof(ObjectPropertyVector2)},
  { 222, 229, sizeof(ObjectPropertyVector3)},
  { 231, 239, sizeof(ObjectRecordInt)},
  { 242, 250, sizeof(ObjectRecordFloat)},
  { 253, 261, sizeof(ObjectRecordString)},
  { 264, 272, sizeof(ObjectRecordObject)},
  { 275, 283, sizeof(ObjectRecordVector2)},
  { 286, 294, sizeof(ObjectRecordVector3)},
  { 297, 307, sizeof(ObjectRecordSwap)},
  { 312, 320, sizeof(ObjectRecordAddRow)},
  { 323, 331, sizeof(ObjectRecordRemove)},
  { 334, 346, sizeof(ObjectPropertyList)},
  { 353, 359, sizeof(MultiObjectPropertyList)},
  { 360, 367, sizeof(ObjectRecordList)},
  { 369, 375, sizeof(MultiObjectRecordList)},
  { 376, 385, sizeof(MsgBase)},
  { 389, 403, sizeof(ReqCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ident_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PropertyVector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordVector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordAddRowStruct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyVector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordInt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordFloat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordVector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordVector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordSwap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordAddRow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectPropertyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiObjectPropertyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiObjectRecordList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqCommand_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "NFMsgBase.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::NFMsg::protobuf_NFDefine_2eproto::InitDefaults();
  _Ident_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Ident_default_instance_);_Vector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vector2_default_instance_);_Vector3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Vector3_default_instance_);_PropertyInt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyInt_default_instance_);_PropertyFloat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyFloat_default_instance_);_PropertyString_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyString_default_instance_);_PropertyObject_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyObject_default_instance_);_PropertyVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyVector2_default_instance_);_PropertyVector3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PropertyVector3_default_instance_);_RecordInt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordInt_default_instance_);_RecordFloat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordFloat_default_instance_);_RecordString_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordString_default_instance_);_RecordObject_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordObject_default_instance_);_RecordVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordVector2_default_instance_);_RecordVector3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordVector3_default_instance_);_RecordAddRowStruct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RecordAddRowStruct_default_instance_);_ObjectRecordBase_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordBase_default_instance_);_ObjectPropertyInt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyInt_default_instance_);_ObjectPropertyFloat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyFloat_default_instance_);_ObjectPropertyString_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyString_default_instance_);_ObjectPropertyObject_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyObject_default_instance_);_ObjectPropertyVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyVector2_default_instance_);_ObjectPropertyVector3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyVector3_default_instance_);_ObjectRecordInt_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordInt_default_instance_);_ObjectRecordFloat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordFloat_default_instance_);_ObjectRecordString_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordString_default_instance_);_ObjectRecordObject_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordObject_default_instance_);_ObjectRecordVector2_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordVector2_default_instance_);_ObjectRecordVector3_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordVector3_default_instance_);_ObjectRecordSwap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordSwap_default_instance_);_ObjectRecordAddRow_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordAddRow_default_instance_);_ObjectRecordRemove_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordRemove_default_instance_);_ObjectPropertyList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectPropertyList_default_instance_);_MultiObjectPropertyList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultiObjectPropertyList_default_instance_);_ObjectRecordList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectRecordList_default_instance_);_MultiObjectRecordList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MultiObjectRecordList_default_instance_);_MsgBase_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MsgBase_default_instance_);_ReqCommand_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReqCommand_default_instance_);_PropertyObject_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _PropertyVector2_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector2*>(
      ::NFMsg::Vector2::internal_default_instance());
  _PropertyVector3_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  _RecordObject_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _RecordVector2_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector2*>(
      ::NFMsg::Vector2::internal_default_instance());
  _RecordVector3_default_instance_._instance.get_mutable()->data_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  _ObjectPropertyInt_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectPropertyFloat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectPropertyString_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectPropertyObject_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectPropertyVector2_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectPropertyVector3_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordInt_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordFloat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordString_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordObject_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordVector2_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordVector3_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordSwap_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordAddRow_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordRemove_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectPropertyList_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ObjectRecordList_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _MsgBase_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _MsgBase_default_instance_._instance.get_mutable()->hash_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ReqCommand_default_instance_._instance.get_mutable()->control_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  _ReqCommand_default_instance_._instance.get_mutable()->command_value_object_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017NFMsgBase.proto\022\005NFMsg\032\016NFDefine.proto"
      "\"%\n\005Ident\022\r\n\005svrid\030\001 \002(\003\022\r\n\005index\030\002 \002(\003\""
      "\037\n\007Vector2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"*\n\007Vect"
      "or3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"2\n\013"
      "PropertyInt\022\025\n\rproperty_name\030\001 \002(\014\022\014\n\004da"
      "ta\030\002 \002(\003\"4\n\rPropertyFloat\022\025\n\rproperty_na"
      "me\030\001 \002(\014\022\014\n\004data\030\002 \002(\002\"5\n\016PropertyString"
      "\022\025\n\rproperty_name\030\001 \002(\014\022\014\n\004data\030\002 \002(\014\"C\n"
      "\016PropertyObject\022\025\n\rproperty_name\030\001 \002(\014\022\032"
      "\n\004data\030\002 \002(\0132\014.NFMsg.Ident\"F\n\017PropertyVe"
      "ctor2\022\025\n\rproperty_name\030\001 \002(\014\022\034\n\004data\030\002 \002"
      "(\0132\016.NFMsg.Vector2\"F\n\017PropertyVector3\022\025\n"
      "\rproperty_name\030\001 \002(\014\022\034\n\004data\030\002 \002(\0132\016.NFM"
      "sg.Vector3\"3\n\tRecordInt\022\013\n\003row\030\001 \002(\005\022\013\n\003"
      "col\030\002 \002(\005\022\014\n\004data\030\003 \002(\003\"5\n\013RecordFloat\022\013"
      "\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005\022\014\n\004data\030\003 \002(\002\"6"
      "\n\014RecordString\022\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005"
      "\022\014\n\004data\030\003 \002(\014\"D\n\014RecordObject\022\013\n\003row\030\001 "
      "\002(\005\022\013\n\003col\030\002 \002(\005\022\032\n\004data\030\003 \002(\0132\014.NFMsg.I"
      "dent\"G\n\rRecordVector2\022\013\n\003row\030\001 \002(\005\022\013\n\003co"
      "l\030\002 \002(\005\022\034\n\004data\030\003 \002(\0132\016.NFMsg.Vector2\"G\n"
      "\rRecordVector3\022\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005"
      "\022\034\n\004data\030\003 \002(\0132\016.NFMsg.Vector3\"\303\002\n\022Recor"
      "dAddRowStruct\022\013\n\003row\030\001 \002(\005\022)\n\017record_int"
      "_list\030\002 \003(\0132\020.NFMsg.RecordInt\022-\n\021record_"
      "float_list\030\003 \003(\0132\022.NFMsg.RecordFloat\022/\n\022"
      "record_string_list\030\004 \003(\0132\023.NFMsg.RecordS"
      "tring\022/\n\022record_object_list\030\005 \003(\0132\023.NFMs"
      "g.RecordObject\0221\n\023record_vector2_list\030\006 "
      "\003(\0132\024.NFMsg.RecordVector2\0221\n\023record_vect"
      "or3_list\030\007 \003(\0132\024.NFMsg.RecordVector3\"V\n\020"
      "ObjectRecordBase\022\023\n\013record_name\030\001 \002(\014\022-\n"
      "\nrow_struct\030\002 \003(\0132\031.NFMsg.RecordAddRowSt"
      "ruct\"_\n\021ObjectPropertyInt\022\037\n\tplayer_id\030\001"
      " \002(\0132\014.NFMsg.Ident\022)\n\rproperty_list\030\002 \003("
      "\0132\022.NFMsg.PropertyInt\"c\n\023ObjectPropertyF"
      "loat\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022+\n"
      "\rproperty_list\030\002 \003(\0132\024.NFMsg.PropertyFlo"
      "at\"e\n\024ObjectPropertyString\022\037\n\tplayer_id\030"
      "\001 \002(\0132\014.NFMsg.Ident\022,\n\rproperty_list\030\002 \003"
      "(\0132\025.NFMsg.PropertyString\"e\n\024ObjectPrope"
      "rtyObject\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ide"
      "nt\022,\n\rproperty_list\030\002 \003(\0132\025.NFMsg.Proper"
      "tyObject\"g\n\025ObjectPropertyVector2\022\037\n\tpla"
      "yer_id\030\001 \002(\0132\014.NFMsg.Ident\022-\n\rproperty_l"
      "ist\030\002 \003(\0132\026.NFMsg.PropertyVector2\"g\n\025Obj"
      "ectPropertyVector3\022\037\n\tplayer_id\030\001 \002(\0132\014."
      "NFMsg.Ident\022-\n\rproperty_list\030\002 \003(\0132\026.NFM"
      "sg.PropertyVector3\"p\n\017ObjectRecordInt\022\037\n"
      "\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record"
      "_name\030\002 \002(\014\022\'\n\rproperty_list\030\003 \003(\0132\020.NFM"
      "sg.RecordInt\"t\n\021ObjectRecordFloat\022\037\n\tpla"
      "yer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_nam"
      "e\030\002 \002(\014\022)\n\rproperty_list\030\003 \003(\0132\022.NFMsg.R"
      "ecordFloat\"v\n\022ObjectRecordString\022\037\n\tplay"
      "er_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name"
      "\030\002 \002(\014\022*\n\rproperty_list\030\003 \003(\0132\023.NFMsg.Re"
      "cordString\"v\n\022ObjectRecordObject\022\037\n\tplay"
      "er_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name"
      "\030\002 \002(\014\022*\n\rproperty_list\030\003 \003(\0132\023.NFMsg.Re"
      "cordObject\"x\n\023ObjectRecordVector2\022\037\n\tpla"
      "yer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_nam"
      "e\030\002 \002(\014\022+\n\rproperty_list\030\003 \003(\0132\024.NFMsg.R"
      "ecordVector2\"x\n\023ObjectRecordVector3\022\037\n\tp"
      "layer_id\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_n"
      "ame\030\002 \002(\014\022+\n\rproperty_list\030\003 \003(\0132\024.NFMsg"
      ".RecordVector3\"\223\001\n\020ObjectRecordSwap\022\037\n\tp"
      "layer_id\030\001 \002(\0132\014.NFMsg.Ident\022\032\n\022origin_r"
      "ecord_name\030\002 \002(\014\022\032\n\022target_record_name\030\003"
      " \001(\014\022\022\n\nrow_origin\030\004 \002(\005\022\022\n\nrow_target\030\005"
      " \002(\005\"w\n\022ObjectRecordAddRow\022\037\n\tplayer_id\030"
      "\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name\030\002 \002(\014"
      "\022+\n\010row_data\030\003 \003(\0132\031.NFMsg.RecordAddRowS"
      "truct\"^\n\022ObjectRecordRemove\022\037\n\tplayer_id"
      "\030\001 \002(\0132\014.NFMsg.Ident\022\023\n\013record_name\030\002 \002("
      "\014\022\022\n\nremove_row\030\003 \003(\005\"\357\002\n\022ObjectProperty"
      "List\022\037\n\tplayer_id\030\001 \002(\0132\014.NFMsg.Ident\022-\n"
      "\021property_int_list\030\002 \003(\0132\022.NFMsg.Propert"
      "yInt\0221\n\023property_float_list\030\003 \003(\0132\024.NFMs"
      "g.PropertyFloat\0223\n\024property_string_list\030"
      "\004 \003(\0132\025.NFMsg.PropertyString\0223\n\024property"
      "_object_list\030\005 \003(\0132\025.NFMsg.PropertyObjec"
      "t\0225\n\025property_vector2_list\030\006 \003(\0132\026.NFMsg"
      ".PropertyVector2\0225\n\025property_vector3_lis"
      "t\030\007 \003(\0132\026.NFMsg.PropertyVector3\"S\n\027Multi"
      "ObjectPropertyList\0228\n\025multi_player_prope"
      "rty\030\001 \003(\0132\031.NFMsg.ObjectPropertyList\"a\n\020"
      "ObjectRecordList\022\037\n\tplayer_id\030\001 \002(\0132\014.NF"
      "Msg.Ident\022,\n\013record_list\030\002 \003(\0132\027.NFMsg.O"
      "bjectRecordBase\"M\n\025MultiObjectRecordList"
      "\0224\n\023multi_player_record\030\001 \003(\0132\027.NFMsg.Ob"
      "jectRecordList\"\210\001\n\007MsgBase\022\037\n\tplayer_id\030"
      "\001 \002(\0132\014.NFMsg.Ident\022\020\n\010msg_data\030\002 \002(\014\022(\n"
      "\022player_Client_list\030\003 \003(\0132\014.NFMsg.Ident\022"
      " \n\nhash_ident\030\004 \001(\0132\014.NFMsg.Ident\"\213\003\n\nRe"
      "qCommand\022 \n\ncontrol_id\030\001 \002(\0132\014.NFMsg.Ide"
      "nt\0226\n\ncommand_id\030\002 \002(\0162\".NFMsg.ReqComman"
      "d.EGameCommandType\022\031\n\021command_str_value\030"
      "\003 \001(\014\022\031\n\021command_value_int\030\004 \001(\003\022\033\n\023comm"
      "and_value_float\030\005 \001(\001\022\031\n\021command_value_s"
      "tr\030\006 \001(\014\022*\n\024command_value_object\030\007 \001(\0132\014"
      ".NFMsg.Ident\022\013\n\003row\030\010 \001(\005\022\013\n\003col\030\t \001(\005\"o"
      "\n\020EGameCommandType\022\027\n\023EGCT_MODIY_PROPERT"
      "Y\020\000\022\023\n\017EGCT_MODIY_ITEM\020\001\022\026\n\022EGCT_CREATE_"
      "OBJECT\020\002\022\025\n\021EGCT_ADD_ROLE_EXP\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgBase.proto", &protobuf_RegisterTypes);
  ::NFMsg::protobuf_NFDefine_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_NFMsgBase_2eproto

const ::google::protobuf::EnumDescriptor* ReqCommand_EGameCommandType_descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_enum_descriptors[0];
}
bool ReqCommand_EGameCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqCommand_EGameCommandType ReqCommand::EGCT_MODIY_PROPERTY;
const ReqCommand_EGameCommandType ReqCommand::EGCT_MODIY_ITEM;
const ReqCommand_EGameCommandType ReqCommand::EGCT_CREATE_OBJECT;
const ReqCommand_EGameCommandType ReqCommand::EGCT_ADD_ROLE_EXP;
const ReqCommand_EGameCommandType ReqCommand::EGameCommandType_MIN;
const ReqCommand_EGameCommandType ReqCommand::EGameCommandType_MAX;
const int ReqCommand::EGameCommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ident::kSvridFieldNumber;
const int Ident::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ident::Ident()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.Ident)
}
Ident::Ident(const Ident& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.Ident)
}

void Ident::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
}

Ident::~Ident() {
  // @@protoc_insertion_point(destructor:NFMsg.Ident)
  SharedDtor();
}

void Ident::SharedDtor() {
}

void Ident::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ident::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ident& Ident::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ident* Ident::New(::google::protobuf::Arena* arena) const {
  Ident* n = new Ident;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ident::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.Ident)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&svrid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ident::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.Ident)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 svrid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_svrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &svrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.Ident)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.Ident)
  return false;
#undef DO_
}

void Ident::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.Ident)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 svrid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->svrid(), output);
  }

  // required int64 index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.Ident)
}

::google::protobuf::uint8* Ident::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.Ident)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 svrid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->svrid(), target);
  }

  // required int64 index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.Ident)
  return target;
}

size_t Ident::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.Ident)
  size_t total_size = 0;

  if (has_svrid()) {
    // required int64 svrid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->svrid());
  }

  if (has_index()) {
    // required int64 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  return total_size;
}
size_t Ident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.Ident)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 svrid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->svrid());

    // required int64 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ident::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  const Ident* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ident>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.Ident)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.Ident)
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      svrid_ = from.svrid_;
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ident::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Ident::Swap(Ident* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ident::InternalSwap(Ident* other) {
  using std::swap;
  swap(svrid_, other->svrid_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ident::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ident

// required int64 svrid = 1;
bool Ident::has_svrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ident::set_has_svrid() {
  _has_bits_[0] |= 0x00000001u;
}
void Ident::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ident::clear_svrid() {
  svrid_ = GOOGLE_LONGLONG(0);
  clear_has_svrid();
}
::google::protobuf::int64 Ident::svrid() const {
  // @@protoc_insertion_point(field_get:NFMsg.Ident.svrid)
  return svrid_;
}
void Ident::set_svrid(::google::protobuf::int64 value) {
  set_has_svrid();
  svrid_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Ident.svrid)
}

// required int64 index = 2;
bool Ident::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ident::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void Ident::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ident::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
::google::protobuf::int64 Ident::index() const {
  // @@protoc_insertion_point(field_get:NFMsg.Ident.index)
  return index_;
}
void Ident::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Ident.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2::kXFieldNumber;
const int Vector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2::Vector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.Vector2)
}

void Vector2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:NFMsg.Vector2)
  SharedDtor();
}

void Vector2::SharedDtor() {
}

void Vector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2& Vector2::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector2* Vector2::New(::google::protobuf::Arena* arena) const {
  Vector2* n = new Vector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.Vector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.Vector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.Vector2)
  return false;
#undef DO_
}

void Vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.Vector2)
}

::google::protobuf::uint8* Vector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.Vector2)
  return target;
}

size_t Vector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.Vector2)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.Vector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.Vector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.Vector2)
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Vector2::Swap(Vector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2

// required float x = 1;
bool Vector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector2::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector2.x)
  return x_;
}
void Vector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector2.x)
}

// required float y = 2;
bool Vector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector2::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector2.y)
  return y_;
}
void Vector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:NFMsg.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3& Vector3::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.Vector3)
  return target;
}

size_t Vector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.Vector3)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.Vector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// required float x = 1;
bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Vector3::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.x)
  return x_;
}
void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.x)
}

// required float y = 2;
bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Vector3::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.y)
  return y_;
}
void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.y)
}

// required float z = 3;
bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Vector3::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.Vector3.z)
  return z_;
}
void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyInt::kPropertyNameFieldNumber;
const int PropertyInt::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyInt::PropertyInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PropertyInt)
}
PropertyInt::PropertyInt(const PropertyInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyInt)
}

void PropertyInt::SharedCtor() {
  _cached_size_ = 0;
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = GOOGLE_LONGLONG(0);
}

PropertyInt::~PropertyInt() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyInt)
  SharedDtor();
}

void PropertyInt::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PropertyInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyInt::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyInt& PropertyInt::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyInt* PropertyInt::New(::google::protobuf::Arena* arena) const {
  PropertyInt* n = new PropertyInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_property_name()) {
    GOOGLE_DCHECK(!property_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*property_name_.UnsafeRawStringPointer())->clear();
  }
  data_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PropertyInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PropertyInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PropertyInt)
  return false;
#undef DO_
}

void PropertyInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PropertyInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_name(), output);
  }

  // required int64 data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PropertyInt)
}

::google::protobuf::uint8* PropertyInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required int64 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyInt)
  return target;
}

size_t PropertyInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PropertyInt)
  size_t total_size = 0;

  if (has_property_name()) {
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());
  }

  if (has_data()) {
    // required int64 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data());
  }

  return total_size;
}
size_t PropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());

    // required int64 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyInt)
    MergeFrom(*source);
  }
}

void PropertyInt::MergeFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_property_name();
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PropertyInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInt::CopyFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PropertyInt::Swap(PropertyInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyInt::InternalSwap(PropertyInt* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyInt::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyInt

// required bytes property_name = 1;
bool PropertyInt::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyInt::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyInt::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyInt::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_property_name();
}
const ::std::string& PropertyInt::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.property_name)
  return property_name_.GetNoArena();
}
void PropertyInt::set_property_name(const ::std::string& value) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.property_name)
}
#if LANG_CXX11
void PropertyInt::set_property_name(::std::string&& value) {
  set_has_property_name();
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyInt.property_name)
}
#endif
void PropertyInt::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyInt.property_name)
}
void PropertyInt::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyInt.property_name)
}
::std::string* PropertyInt::mutable_property_name() {
  set_has_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyInt.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyInt::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyInt.property_name)
  clear_has_property_name();
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyInt::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    set_has_property_name();
  } else {
    clear_has_property_name();
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyInt.property_name)
}

// required int64 data = 2;
bool PropertyInt::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyInt::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyInt::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyInt::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
  clear_has_data();
}
::google::protobuf::int64 PropertyInt::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyInt.data)
  return data_;
}
void PropertyInt::set_data(::google::protobuf::int64 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PropertyInt.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyFloat::kPropertyNameFieldNumber;
const int PropertyFloat::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyFloat::PropertyFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PropertyFloat)
}
PropertyFloat::PropertyFloat(const PropertyFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyFloat)
}

void PropertyFloat::SharedCtor() {
  _cached_size_ = 0;
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = 0;
}

PropertyFloat::~PropertyFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyFloat)
  SharedDtor();
}

void PropertyFloat::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PropertyFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyFloat::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyFloat& PropertyFloat::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyFloat* PropertyFloat::New(::google::protobuf::Arena* arena) const {
  PropertyFloat* n = new PropertyFloat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_property_name()) {
    GOOGLE_DCHECK(!property_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*property_name_.UnsafeRawStringPointer())->clear();
  }
  data_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PropertyFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PropertyFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PropertyFloat)
  return false;
#undef DO_
}

void PropertyFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PropertyFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_name(), output);
  }

  // required float data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PropertyFloat)
}

::google::protobuf::uint8* PropertyFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required float data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyFloat)
  return target;
}

size_t PropertyFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PropertyFloat)
  size_t total_size = 0;

  if (has_property_name()) {
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());
  }

  if (has_data()) {
    // required float data = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());

    // required float data = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyFloat)
    MergeFrom(*source);
  }
}

void PropertyFloat::MergeFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_property_name();
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PropertyFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyFloat::CopyFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PropertyFloat::Swap(PropertyFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyFloat::InternalSwap(PropertyFloat* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyFloat::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyFloat

// required bytes property_name = 1;
bool PropertyFloat::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyFloat::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyFloat::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyFloat::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_property_name();
}
const ::std::string& PropertyFloat::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.property_name)
  return property_name_.GetNoArena();
}
void PropertyFloat::set_property_name(const ::std::string& value) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.property_name)
}
#if LANG_CXX11
void PropertyFloat::set_property_name(::std::string&& value) {
  set_has_property_name();
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyFloat.property_name)
}
#endif
void PropertyFloat::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyFloat.property_name)
}
void PropertyFloat::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyFloat.property_name)
}
::std::string* PropertyFloat::mutable_property_name() {
  set_has_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyFloat.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyFloat::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyFloat.property_name)
  clear_has_property_name();
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyFloat::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    set_has_property_name();
  } else {
    clear_has_property_name();
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyFloat.property_name)
}

// required float data = 2;
bool PropertyFloat::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyFloat::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyFloat::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyFloat::clear_data() {
  data_ = 0;
  clear_has_data();
}
float PropertyFloat::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyFloat.data)
  return data_;
}
void PropertyFloat::set_data(float value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.PropertyFloat.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyString::kPropertyNameFieldNumber;
const int PropertyString::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyString::PropertyString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PropertyString)
}
PropertyString::PropertyString(const PropertyString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyString)
}

void PropertyString::SharedCtor() {
  _cached_size_ = 0;
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PropertyString::~PropertyString() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyString)
  SharedDtor();
}

void PropertyString::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PropertyString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyString::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyString& PropertyString::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyString* PropertyString::New(::google::protobuf::Arena* arena) const {
  PropertyString* n = new PropertyString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!property_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*property_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PropertyString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PropertyString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PropertyString)
  return false;
#undef DO_
}

void PropertyString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PropertyString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_name(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PropertyString)
}

::google::protobuf::uint8* PropertyString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyString)
  return target;
}

size_t PropertyString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PropertyString)
  size_t total_size = 0;

  if (has_property_name()) {
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
size_t PropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyString)
    MergeFrom(*source);
  }
}

void PropertyString::MergeFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_property_name();
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void PropertyString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyString::CopyFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PropertyString::Swap(PropertyString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyString::InternalSwap(PropertyString* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  data_.Swap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyString::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyString

// required bytes property_name = 1;
bool PropertyString::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyString::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyString::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyString::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_property_name();
}
const ::std::string& PropertyString::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.property_name)
  return property_name_.GetNoArena();
}
void PropertyString::set_property_name(const ::std::string& value) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.property_name)
}
#if LANG_CXX11
void PropertyString::set_property_name(::std::string&& value) {
  set_has_property_name();
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyString.property_name)
}
#endif
void PropertyString::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyString.property_name)
}
void PropertyString::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyString.property_name)
}
::std::string* PropertyString::mutable_property_name() {
  set_has_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyString.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyString::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyString.property_name)
  clear_has_property_name();
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyString::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    set_has_property_name();
  } else {
    clear_has_property_name();
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyString.property_name)
}

// required bytes data = 2;
bool PropertyString::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyString::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyString::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyString::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& PropertyString::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyString.data)
  return data_.GetNoArena();
}
void PropertyString::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyString.data)
}
#if LANG_CXX11
void PropertyString::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyString.data)
}
#endif
void PropertyString::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyString.data)
}
void PropertyString::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyString.data)
}
::std::string* PropertyString::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyString.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyString::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyString.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyString::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyString.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyObject::kPropertyNameFieldNumber;
const int PropertyObject::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyObject::PropertyObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PropertyObject)
}
PropertyObject::PropertyObject(const PropertyObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::Ident(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyObject)
}

void PropertyObject::SharedCtor() {
  _cached_size_ = 0;
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
}

PropertyObject::~PropertyObject() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyObject)
  SharedDtor();
}

void PropertyObject::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyObject::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyObject& PropertyObject::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyObject* PropertyObject::New(::google::protobuf::Arena* arena) const {
  PropertyObject* n = new PropertyObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!property_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*property_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PropertyObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PropertyObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PropertyObject)
  return false;
#undef DO_
}

void PropertyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PropertyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_name(), output);
  }

  // required .NFMsg.Ident data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PropertyObject)
}

::google::protobuf::uint8* PropertyObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .NFMsg.Ident data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyObject)
  return target;
}

size_t PropertyObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PropertyObject)
  size_t total_size = 0;

  if (has_property_name()) {
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());
  }

  if (has_data()) {
    // required .NFMsg.Ident data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  return total_size;
}
size_t PropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());

    // required .NFMsg.Ident data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyObject)
    MergeFrom(*source);
  }
}

void PropertyObject::MergeFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_property_name();
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::NFMsg::Ident::MergeFrom(from.data());
    }
  }
}

void PropertyObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyObject::CopyFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void PropertyObject::Swap(PropertyObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyObject::InternalSwap(PropertyObject* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyObject::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyObject

// required bytes property_name = 1;
bool PropertyObject::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyObject::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyObject::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyObject::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_property_name();
}
const ::std::string& PropertyObject::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.property_name)
  return property_name_.GetNoArena();
}
void PropertyObject::set_property_name(const ::std::string& value) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyObject.property_name)
}
#if LANG_CXX11
void PropertyObject::set_property_name(::std::string&& value) {
  set_has_property_name();
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyObject.property_name)
}
#endif
void PropertyObject::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyObject.property_name)
}
void PropertyObject::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyObject.property_name)
}
::std::string* PropertyObject::mutable_property_name() {
  set_has_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyObject.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyObject::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyObject.property_name)
  clear_has_property_name();
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyObject::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    set_has_property_name();
  } else {
    clear_has_property_name();
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyObject.property_name)
}

// required .NFMsg.Ident data = 2;
bool PropertyObject::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyObject::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyObject::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyObject::clear_data() {
  if (data_ != NULL) data_->::NFMsg::Ident::Clear();
  clear_has_data();
}
const ::NFMsg::Ident& PropertyObject::data() const {
  const ::NFMsg::Ident* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.PropertyObject.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* PropertyObject::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyObject.data)
  return data_;
}
::NFMsg::Ident* PropertyObject::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyObject.data)
  clear_has_data();
  ::NFMsg::Ident* temp = data_;
  data_ = NULL;
  return temp;
}
void PropertyObject::set_allocated_data(::NFMsg::Ident* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyObject.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyVector2::kPropertyNameFieldNumber;
const int PropertyVector2::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyVector2::PropertyVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PropertyVector2)
}
PropertyVector2::PropertyVector2(const PropertyVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::Vector2(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyVector2)
}

void PropertyVector2::SharedCtor() {
  _cached_size_ = 0;
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
}

PropertyVector2::~PropertyVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyVector2)
  SharedDtor();
}

void PropertyVector2::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyVector2::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyVector2& PropertyVector2::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyVector2* PropertyVector2::New(::google::protobuf::Arena* arena) const {
  PropertyVector2* n = new PropertyVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!property_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*property_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::NFMsg::Vector2::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PropertyVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Vector2 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PropertyVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PropertyVector2)
  return false;
#undef DO_
}

void PropertyVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PropertyVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_name(), output);
  }

  // required .NFMsg.Vector2 data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PropertyVector2)
}

::google::protobuf::uint8* PropertyVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .NFMsg.Vector2 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyVector2)
  return target;
}

size_t PropertyVector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PropertyVector2)
  size_t total_size = 0;

  if (has_property_name()) {
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());
  }

  if (has_data()) {
    // required .NFMsg.Vector2 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  return total_size;
}
size_t PropertyVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());

    // required .NFMsg.Vector2 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyVector2)
    MergeFrom(*source);
  }
}

void PropertyVector2::MergeFrom(const PropertyVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_property_name();
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::NFMsg::Vector2::MergeFrom(from.data());
    }
  }
}

void PropertyVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector2::CopyFrom(const PropertyVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void PropertyVector2::Swap(PropertyVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyVector2::InternalSwap(PropertyVector2* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyVector2::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyVector2

// required bytes property_name = 1;
bool PropertyVector2::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyVector2::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyVector2::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyVector2::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_property_name();
}
const ::std::string& PropertyVector2::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.property_name)
  return property_name_.GetNoArena();
}
void PropertyVector2::set_property_name(const ::std::string& value) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector2.property_name)
}
#if LANG_CXX11
void PropertyVector2::set_property_name(::std::string&& value) {
  set_has_property_name();
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyVector2.property_name)
}
#endif
void PropertyVector2::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyVector2.property_name)
}
void PropertyVector2::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyVector2.property_name)
}
::std::string* PropertyVector2::mutable_property_name() {
  set_has_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector2.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyVector2::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector2.property_name)
  clear_has_property_name();
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyVector2::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    set_has_property_name();
  } else {
    clear_has_property_name();
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector2.property_name)
}

// required .NFMsg.Vector2 data = 2;
bool PropertyVector2::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyVector2::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyVector2::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyVector2::clear_data() {
  if (data_ != NULL) data_->::NFMsg::Vector2::Clear();
  clear_has_data();
}
const ::NFMsg::Vector2& PropertyVector2::data() const {
  const ::NFMsg::Vector2* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector2.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector2*>(
      &::NFMsg::_Vector2_default_instance_);
}
::NFMsg::Vector2* PropertyVector2::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::NFMsg::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector2.data)
  return data_;
}
::NFMsg::Vector2* PropertyVector2::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector2.data)
  clear_has_data();
  ::NFMsg::Vector2* temp = data_;
  data_ = NULL;
  return temp;
}
void PropertyVector2::set_allocated_data(::NFMsg::Vector2* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector2.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyVector3::kPropertyNameFieldNumber;
const int PropertyVector3::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyVector3::PropertyVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PropertyVector3)
}
PropertyVector3::PropertyVector3(const PropertyVector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_property_name()) {
    property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
  }
  if (from.has_data()) {
    data_ = new ::NFMsg::Vector3(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.PropertyVector3)
}

void PropertyVector3::SharedCtor() {
  _cached_size_ = 0;
  property_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
}

PropertyVector3::~PropertyVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.PropertyVector3)
  SharedDtor();
}

void PropertyVector3::SharedDtor() {
  property_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyVector3::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PropertyVector3& PropertyVector3::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

PropertyVector3* PropertyVector3::New(::google::protobuf::Arena* arena) const {
  PropertyVector3* n = new PropertyVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PropertyVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!property_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*property_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::NFMsg::Vector3::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PropertyVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PropertyVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes property_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_property_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Vector3 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PropertyVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PropertyVector3)
  return false;
#undef DO_
}

void PropertyVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PropertyVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->property_name(), output);
  }

  // required .NFMsg.Vector3 data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PropertyVector3)
}

::google::protobuf::uint8* PropertyVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PropertyVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->property_name(), target);
  }

  // required .NFMsg.Vector3 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PropertyVector3)
  return target;
}

size_t PropertyVector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.PropertyVector3)
  size_t total_size = 0;

  if (has_property_name()) {
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());
  }

  if (has_data()) {
    // required .NFMsg.Vector3 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  return total_size;
}
size_t PropertyVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PropertyVector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes property_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->property_name());

    // required .NFMsg.Vector3 data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PropertyVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PropertyVector3)
    MergeFrom(*source);
  }
}

void PropertyVector3::MergeFrom(const PropertyVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_property_name();
      property_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.property_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_data()->::NFMsg::Vector3::MergeFrom(from.data());
    }
  }
}

void PropertyVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector3::CopyFrom(const PropertyVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void PropertyVector3::Swap(PropertyVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyVector3::InternalSwap(PropertyVector3* other) {
  using std::swap;
  property_name_.Swap(&other->property_name_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyVector3::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyVector3

// required bytes property_name = 1;
bool PropertyVector3::has_property_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyVector3::set_has_property_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyVector3::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyVector3::clear_property_name() {
  property_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_property_name();
}
const ::std::string& PropertyVector3::property_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.property_name)
  return property_name_.GetNoArena();
}
void PropertyVector3::set_property_name(const ::std::string& value) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.PropertyVector3.property_name)
}
#if LANG_CXX11
void PropertyVector3::set_property_name(::std::string&& value) {
  set_has_property_name();
  property_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PropertyVector3.property_name)
}
#endif
void PropertyVector3::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PropertyVector3.property_name)
}
void PropertyVector3::set_property_name(const void* value, size_t size) {
  set_has_property_name();
  property_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PropertyVector3.property_name)
}
::std::string* PropertyVector3::mutable_property_name() {
  set_has_property_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector3.property_name)
  return property_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PropertyVector3::release_property_name() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector3.property_name)
  clear_has_property_name();
  return property_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PropertyVector3::set_allocated_property_name(::std::string* property_name) {
  if (property_name != NULL) {
    set_has_property_name();
  } else {
    clear_has_property_name();
  }
  property_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), property_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector3.property_name)
}

// required .NFMsg.Vector3 data = 2;
bool PropertyVector3::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyVector3::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyVector3::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyVector3::clear_data() {
  if (data_ != NULL) data_->::NFMsg::Vector3::Clear();
  clear_has_data();
}
const ::NFMsg::Vector3& PropertyVector3::data() const {
  const ::NFMsg::Vector3* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.PropertyVector3.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
::NFMsg::Vector3* PropertyVector3::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::NFMsg::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.PropertyVector3.data)
  return data_;
}
::NFMsg::Vector3* PropertyVector3::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.PropertyVector3.data)
  clear_has_data();
  ::NFMsg::Vector3* temp = data_;
  data_ = NULL;
  return temp;
}
void PropertyVector3::set_allocated_data(::NFMsg::Vector3* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PropertyVector3.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordInt::kRowFieldNumber;
const int RecordInt::kColFieldNumber;
const int RecordInt::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordInt::RecordInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordInt)
}
RecordInt::RecordInt(const RecordInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordInt)
}

void RecordInt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
}

RecordInt::~RecordInt() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordInt)
  SharedDtor();
}

void RecordInt::SharedDtor() {
}

void RecordInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordInt::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordInt& RecordInt::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordInt* RecordInt::New(::google::protobuf::Arena* arena) const {
  RecordInt* n = new RecordInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_) -
        reinterpret_cast<char*>(&row_)) + sizeof(data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordInt)
  return false;
#undef DO_
}

void RecordInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required int64 data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordInt)
}

::google::protobuf::uint8* RecordInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required int64 data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordInt)
  return target;
}

size_t RecordInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.RecordInt)
  size_t total_size = 0;

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  if (has_data()) {
    // required int64 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data());
  }

  return total_size;
}
size_t RecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

    // required int64 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordInt)
    MergeFrom(*source);
  }
}

void RecordInt::MergeFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000002u) {
      col_ = from.col_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_ = from.data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInt::CopyFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RecordInt::Swap(RecordInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordInt::InternalSwap(RecordInt* other) {
  using std::swap;
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordInt::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordInt

// required int32 row = 1;
bool RecordInt::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordInt::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordInt::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordInt::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordInt::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.row)
  return row_;
}
void RecordInt::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.row)
}

// required int32 col = 2;
bool RecordInt::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordInt::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordInt::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordInt::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 RecordInt::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.col)
  return col_;
}
void RecordInt::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.col)
}

// required int64 data = 3;
bool RecordInt::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordInt::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordInt::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordInt::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
  clear_has_data();
}
::google::protobuf::int64 RecordInt::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordInt.data)
  return data_;
}
void RecordInt::set_data(::google::protobuf::int64 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordInt.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordFloat::kRowFieldNumber;
const int RecordFloat::kColFieldNumber;
const int RecordFloat::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordFloat::RecordFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordFloat)
}
RecordFloat::RecordFloat(const RecordFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordFloat)
}

void RecordFloat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
}

RecordFloat::~RecordFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordFloat)
  SharedDtor();
}

void RecordFloat::SharedDtor() {
}

void RecordFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordFloat::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordFloat& RecordFloat::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordFloat* RecordFloat::New(::google::protobuf::Arena* arena) const {
  RecordFloat* n = new RecordFloat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_) -
        reinterpret_cast<char*>(&row_)) + sizeof(data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordFloat)
  return false;
#undef DO_
}

void RecordFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required float data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordFloat)
}

::google::protobuf::uint8* RecordFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required float data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordFloat)
  return target;
}

size_t RecordFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.RecordFloat)
  size_t total_size = 0;

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  if (has_data()) {
    // required float data = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

    // required float data = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordFloat)
    MergeFrom(*source);
  }
}

void RecordFloat::MergeFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000002u) {
      col_ = from.col_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_ = from.data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordFloat::CopyFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RecordFloat::Swap(RecordFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordFloat::InternalSwap(RecordFloat* other) {
  using std::swap;
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(data_, other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordFloat::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordFloat

// required int32 row = 1;
bool RecordFloat::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordFloat::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordFloat::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordFloat::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordFloat::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.row)
  return row_;
}
void RecordFloat::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.row)
}

// required int32 col = 2;
bool RecordFloat::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordFloat::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordFloat::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordFloat::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 RecordFloat::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.col)
  return col_;
}
void RecordFloat::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.col)
}

// required float data = 3;
bool RecordFloat::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordFloat::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordFloat::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordFloat::clear_data() {
  data_ = 0;
  clear_has_data();
}
float RecordFloat::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordFloat.data)
  return data_;
}
void RecordFloat::set_data(float value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordFloat.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordString::kRowFieldNumber;
const int RecordString::kColFieldNumber;
const int RecordString::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordString::RecordString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordString)
}
RecordString::RecordString(const RecordString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordString)
}

void RecordString::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
}

RecordString::~RecordString() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordString)
  SharedDtor();
}

void RecordString::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecordString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordString::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordString& RecordString::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordString* RecordString::New(::google::protobuf::Arena* arena) const {
  RecordString* n = new RecordString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_) -
        reinterpret_cast<char*>(&row_)) + sizeof(col_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordString)
  return false;
#undef DO_
}

void RecordString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordString)
}

::google::protobuf::uint8* RecordString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordString)
  return target;
}

size_t RecordString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.RecordString)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  return total_size;
}
size_t RecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordString)
    MergeFrom(*source);
  }
}

void RecordString::MergeFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000004u) {
      col_ = from.col_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordString::CopyFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RecordString::Swap(RecordString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordString::InternalSwap(RecordString* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordString::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordString

// required int32 row = 1;
bool RecordString::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordString::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordString::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordString::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordString::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.row)
  return row_;
}
void RecordString::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.row)
}

// required int32 col = 2;
bool RecordString::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordString::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordString::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordString::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 RecordString::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.col)
  return col_;
}
void RecordString::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.col)
}

// required bytes data = 3;
bool RecordString::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordString::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordString::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordString::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& RecordString::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordString.data)
  return data_.GetNoArena();
}
void RecordString::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.RecordString.data)
}
#if LANG_CXX11
void RecordString::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.RecordString.data)
}
#endif
void RecordString::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.RecordString.data)
}
void RecordString::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.RecordString.data)
}
::std::string* RecordString::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordString.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecordString::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordString.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecordString::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordString.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordObject::kRowFieldNumber;
const int RecordObject::kColFieldNumber;
const int RecordObject::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordObject::RecordObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordObject)
}
RecordObject::RecordObject(const RecordObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::NFMsg::Ident(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordObject)
}

void RecordObject::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordObject::~RecordObject() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordObject)
  SharedDtor();
}

void RecordObject::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void RecordObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordObject::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordObject& RecordObject::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordObject* RecordObject::New(::google::protobuf::Arena* arena) const {
  RecordObject* n = new RecordObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::NFMsg::Ident::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_) -
        reinterpret_cast<char*>(&row_)) + sizeof(col_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Ident data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordObject)
  return false;
#undef DO_
}

void RecordObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required .NFMsg.Ident data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordObject)
}

::google::protobuf::uint8* RecordObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required .NFMsg.Ident data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordObject)
  return target;
}

size_t RecordObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.RecordObject)
  size_t total_size = 0;

  if (has_data()) {
    // required .NFMsg.Ident data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  return total_size;
}
size_t RecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Ident data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordObject)
    MergeFrom(*source);
  }
}

void RecordObject::MergeFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::NFMsg::Ident::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000004u) {
      col_ = from.col_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordObject::CopyFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void RecordObject::Swap(RecordObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordObject::InternalSwap(RecordObject* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordObject::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordObject

// required int32 row = 1;
bool RecordObject::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordObject::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordObject::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordObject::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordObject::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.row)
  return row_;
}
void RecordObject::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordObject.row)
}

// required int32 col = 2;
bool RecordObject::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordObject::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordObject::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordObject::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 RecordObject::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.col)
  return col_;
}
void RecordObject::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordObject.col)
}

// required .NFMsg.Ident data = 3;
bool RecordObject::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordObject::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordObject::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordObject::clear_data() {
  if (data_ != NULL) data_->::NFMsg::Ident::Clear();
  clear_has_data();
}
const ::NFMsg::Ident& RecordObject::data() const {
  const ::NFMsg::Ident* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.RecordObject.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* RecordObject::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordObject.data)
  return data_;
}
::NFMsg::Ident* RecordObject::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordObject.data)
  clear_has_data();
  ::NFMsg::Ident* temp = data_;
  data_ = NULL;
  return temp;
}
void RecordObject::set_allocated_data(::NFMsg::Ident* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordObject.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordVector2::kRowFieldNumber;
const int RecordVector2::kColFieldNumber;
const int RecordVector2::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordVector2::RecordVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordVector2)
}
RecordVector2::RecordVector2(const RecordVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::NFMsg::Vector2(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordVector2)
}

void RecordVector2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordVector2::~RecordVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordVector2)
  SharedDtor();
}

void RecordVector2::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void RecordVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordVector2::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordVector2& RecordVector2::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordVector2* RecordVector2::New(::google::protobuf::Arena* arena) const {
  RecordVector2* n = new RecordVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::NFMsg::Vector2::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_) -
        reinterpret_cast<char*>(&row_)) + sizeof(col_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Vector2 data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordVector2)
  return false;
#undef DO_
}

void RecordVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required .NFMsg.Vector2 data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordVector2)
}

::google::protobuf::uint8* RecordVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required .NFMsg.Vector2 data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordVector2)
  return target;
}

size_t RecordVector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.RecordVector2)
  size_t total_size = 0;

  if (has_data()) {
    // required .NFMsg.Vector2 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  return total_size;
}
size_t RecordVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Vector2 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordVector2)
    MergeFrom(*source);
  }
}

void RecordVector2::MergeFrom(const RecordVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::NFMsg::Vector2::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000004u) {
      col_ = from.col_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector2::CopyFrom(const RecordVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void RecordVector2::Swap(RecordVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordVector2::InternalSwap(RecordVector2* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordVector2::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordVector2

// required int32 row = 1;
bool RecordVector2::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordVector2::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordVector2::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordVector2::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordVector2::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.row)
  return row_;
}
void RecordVector2::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector2.row)
}

// required int32 col = 2;
bool RecordVector2::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordVector2::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordVector2::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordVector2::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 RecordVector2::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.col)
  return col_;
}
void RecordVector2::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector2.col)
}

// required .NFMsg.Vector2 data = 3;
bool RecordVector2::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordVector2::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordVector2::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordVector2::clear_data() {
  if (data_ != NULL) data_->::NFMsg::Vector2::Clear();
  clear_has_data();
}
const ::NFMsg::Vector2& RecordVector2::data() const {
  const ::NFMsg::Vector2* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector2.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector2*>(
      &::NFMsg::_Vector2_default_instance_);
}
::NFMsg::Vector2* RecordVector2::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::NFMsg::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordVector2.data)
  return data_;
}
::NFMsg::Vector2* RecordVector2::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordVector2.data)
  clear_has_data();
  ::NFMsg::Vector2* temp = data_;
  data_ = NULL;
  return temp;
}
void RecordVector2::set_allocated_data(::NFMsg::Vector2* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordVector2.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordVector3::kRowFieldNumber;
const int RecordVector3::kColFieldNumber;
const int RecordVector3::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordVector3::RecordVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordVector3)
}
RecordVector3::RecordVector3(const RecordVector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::NFMsg::Vector3(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordVector3)
}

void RecordVector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordVector3::~RecordVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordVector3)
  SharedDtor();
}

void RecordVector3::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void RecordVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordVector3::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordVector3& RecordVector3::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordVector3* RecordVector3::New(::google::protobuf::Arena* arena) const {
  RecordVector3* n = new RecordVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::NFMsg::Vector3::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_) -
        reinterpret_cast<char*>(&row_)) + sizeof(col_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.Vector3 data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordVector3)
  return false;
#undef DO_
}

void RecordVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // required .NFMsg.Vector3 data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordVector3)
}

::google::protobuf::uint8* RecordVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // required .NFMsg.Vector3 data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordVector3)
  return target;
}

size_t RecordVector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.RecordVector3)
  size_t total_size = 0;

  if (has_data()) {
    // required .NFMsg.Vector3 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  return total_size;
}
size_t RecordVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordVector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .NFMsg.Vector3 data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordVector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordVector3)
    MergeFrom(*source);
  }
}

void RecordVector3::MergeFrom(const RecordVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::NFMsg::Vector3::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000004u) {
      col_ = from.col_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecordVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector3::CopyFrom(const RecordVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void RecordVector3::Swap(RecordVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordVector3::InternalSwap(RecordVector3* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordVector3::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordVector3

// required int32 row = 1;
bool RecordVector3::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RecordVector3::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
void RecordVector3::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
void RecordVector3::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordVector3::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.row)
  return row_;
}
void RecordVector3::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector3.row)
}

// required int32 col = 2;
bool RecordVector3::has_col() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RecordVector3::set_has_col() {
  _has_bits_[0] |= 0x00000004u;
}
void RecordVector3::clear_has_col() {
  _has_bits_[0] &= ~0x00000004u;
}
void RecordVector3::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 RecordVector3::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.col)
  return col_;
}
void RecordVector3::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordVector3.col)
}

// required .NFMsg.Vector3 data = 3;
bool RecordVector3::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordVector3::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordVector3::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordVector3::clear_data() {
  if (data_ != NULL) data_->::NFMsg::Vector3::Clear();
  clear_has_data();
}
const ::NFMsg::Vector3& RecordVector3::data() const {
  const ::NFMsg::Vector3* p = data_;
  // @@protoc_insertion_point(field_get:NFMsg.RecordVector3.data)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
::NFMsg::Vector3* RecordVector3::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::NFMsg::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordVector3.data)
  return data_;
}
::NFMsg::Vector3* RecordVector3::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.RecordVector3.data)
  clear_has_data();
  ::NFMsg::Vector3* temp = data_;
  data_ = NULL;
  return temp;
}
void RecordVector3::set_allocated_data(::NFMsg::Vector3* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.RecordVector3.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordAddRowStruct::kRowFieldNumber;
const int RecordAddRowStruct::kRecordIntListFieldNumber;
const int RecordAddRowStruct::kRecordFloatListFieldNumber;
const int RecordAddRowStruct::kRecordStringListFieldNumber;
const int RecordAddRowStruct::kRecordObjectListFieldNumber;
const int RecordAddRowStruct::kRecordVector2ListFieldNumber;
const int RecordAddRowStruct::kRecordVector3ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordAddRowStruct::RecordAddRowStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.RecordAddRowStruct)
}
RecordAddRowStruct::RecordAddRowStruct(const RecordAddRowStruct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      record_int_list_(from.record_int_list_),
      record_float_list_(from.record_float_list_),
      record_string_list_(from.record_string_list_),
      record_object_list_(from.record_object_list_),
      record_vector2_list_(from.record_vector2_list_),
      record_vector3_list_(from.record_vector3_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  row_ = from.row_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.RecordAddRowStruct)
}

void RecordAddRowStruct::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
}

RecordAddRowStruct::~RecordAddRowStruct() {
  // @@protoc_insertion_point(destructor:NFMsg.RecordAddRowStruct)
  SharedDtor();
}

void RecordAddRowStruct::SharedDtor() {
}

void RecordAddRowStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordAddRowStruct::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecordAddRowStruct& RecordAddRowStruct::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordAddRowStruct* RecordAddRowStruct::New(::google::protobuf::Arena* arena) const {
  RecordAddRowStruct* n = new RecordAddRowStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecordAddRowStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.RecordAddRowStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_int_list_.Clear();
  record_float_list_.Clear();
  record_string_list_.Clear();
  record_object_list_.Clear();
  record_vector2_list_.Clear();
  record_vector3_list_.Clear();
  row_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RecordAddRowStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.RecordAddRowStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordInt record_int_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_int_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordFloat record_float_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_float_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordString record_string_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_string_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordObject record_object_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_vector2_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_vector3_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.RecordAddRowStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.RecordAddRowStruct)
  return false;
#undef DO_
}

void RecordAddRowStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.RecordAddRowStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // repeated .NFMsg.RecordInt record_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_int_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_int_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_float_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->record_float_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_string_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->record_string_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->record_object_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_vector2_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->record_vector2_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_vector3_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->record_vector3_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.RecordAddRowStruct)
}

::google::protobuf::uint8* RecordAddRowStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.RecordAddRowStruct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // repeated .NFMsg.RecordInt record_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_int_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->record_int_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_float_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->record_float_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_string_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->record_string_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->record_object_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_vector2_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->record_vector2_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_vector3_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->record_vector3_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.RecordAddRowStruct)
  return target;
}

size_t RecordAddRowStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.RecordAddRowStruct)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 row = 1;
  if (has_row()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }
  // repeated .NFMsg.RecordInt record_int_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->record_int_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_int_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.RecordFloat record_float_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->record_float_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_float_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.RecordString record_string_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->record_string_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_string_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.RecordObject record_object_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->record_object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_object_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.RecordVector2 record_vector2_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->record_vector2_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_vector2_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.RecordVector3 record_vector3_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->record_vector3_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_vector3_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordAddRowStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.RecordAddRowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordAddRowStruct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordAddRowStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.RecordAddRowStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.RecordAddRowStruct)
    MergeFrom(*source);
  }
}

void RecordAddRowStruct::MergeFrom(const RecordAddRowStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.RecordAddRowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_int_list_.MergeFrom(from.record_int_list_);
  record_float_list_.MergeFrom(from.record_float_list_);
  record_string_list_.MergeFrom(from.record_string_list_);
  record_object_list_.MergeFrom(from.record_object_list_);
  record_vector2_list_.MergeFrom(from.record_vector2_list_);
  record_vector3_list_.MergeFrom(from.record_vector3_list_);
  if (from.has_row()) {
    set_row(from.row());
  }
}

void RecordAddRowStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.RecordAddRowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordAddRowStruct::CopyFrom(const RecordAddRowStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.RecordAddRowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordAddRowStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_int_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_float_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_string_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_object_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_vector2_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_vector3_list())) return false;
  return true;
}

void RecordAddRowStruct::Swap(RecordAddRowStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordAddRowStruct::InternalSwap(RecordAddRowStruct* other) {
  using std::swap;
  record_int_list_.InternalSwap(&other->record_int_list_);
  record_float_list_.InternalSwap(&other->record_float_list_);
  record_string_list_.InternalSwap(&other->record_string_list_);
  record_object_list_.InternalSwap(&other->record_object_list_);
  record_vector2_list_.InternalSwap(&other->record_vector2_list_);
  record_vector3_list_.InternalSwap(&other->record_vector3_list_);
  swap(row_, other->row_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordAddRowStruct::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordAddRowStruct

// required int32 row = 1;
bool RecordAddRowStruct::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RecordAddRowStruct::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void RecordAddRowStruct::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void RecordAddRowStruct::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 RecordAddRowStruct::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.row)
  return row_;
}
void RecordAddRowStruct::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.RecordAddRowStruct.row)
}

// repeated .NFMsg.RecordInt record_int_list = 2;
int RecordAddRowStruct::record_int_list_size() const {
  return record_int_list_.size();
}
void RecordAddRowStruct::clear_record_int_list() {
  record_int_list_.Clear();
}
const ::NFMsg::RecordInt& RecordAddRowStruct::record_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Get(index);
}
::NFMsg::RecordInt* RecordAddRowStruct::mutable_record_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Mutable(index);
}
::NFMsg::RecordInt* RecordAddRowStruct::add_record_int_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >*
RecordAddRowStruct::mutable_record_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_int_list)
  return &record_int_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >&
RecordAddRowStruct::record_int_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_;
}

// repeated .NFMsg.RecordFloat record_float_list = 3;
int RecordAddRowStruct::record_float_list_size() const {
  return record_float_list_.size();
}
void RecordAddRowStruct::clear_record_float_list() {
  record_float_list_.Clear();
}
const ::NFMsg::RecordFloat& RecordAddRowStruct::record_float_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Get(index);
}
::NFMsg::RecordFloat* RecordAddRowStruct::mutable_record_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Mutable(index);
}
::NFMsg::RecordFloat* RecordAddRowStruct::add_record_float_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >*
RecordAddRowStruct::mutable_record_float_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_float_list)
  return &record_float_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >&
RecordAddRowStruct::record_float_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_;
}

// repeated .NFMsg.RecordString record_string_list = 4;
int RecordAddRowStruct::record_string_list_size() const {
  return record_string_list_.size();
}
void RecordAddRowStruct::clear_record_string_list() {
  record_string_list_.Clear();
}
const ::NFMsg::RecordString& RecordAddRowStruct::record_string_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Get(index);
}
::NFMsg::RecordString* RecordAddRowStruct::mutable_record_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Mutable(index);
}
::NFMsg::RecordString* RecordAddRowStruct::add_record_string_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >*
RecordAddRowStruct::mutable_record_string_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_string_list)
  return &record_string_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >&
RecordAddRowStruct::record_string_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_;
}

// repeated .NFMsg.RecordObject record_object_list = 5;
int RecordAddRowStruct::record_object_list_size() const {
  return record_object_list_.size();
}
void RecordAddRowStruct::clear_record_object_list() {
  record_object_list_.Clear();
}
const ::NFMsg::RecordObject& RecordAddRowStruct::record_object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Get(index);
}
::NFMsg::RecordObject* RecordAddRowStruct::mutable_record_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Mutable(index);
}
::NFMsg::RecordObject* RecordAddRowStruct::add_record_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >*
RecordAddRowStruct::mutable_record_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_object_list)
  return &record_object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >&
RecordAddRowStruct::record_object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_;
}

// repeated .NFMsg.RecordVector2 record_vector2_list = 6;
int RecordAddRowStruct::record_vector2_list_size() const {
  return record_vector2_list_.size();
}
void RecordAddRowStruct::clear_record_vector2_list() {
  record_vector2_list_.Clear();
}
const ::NFMsg::RecordVector2& RecordAddRowStruct::record_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Get(index);
}
::NFMsg::RecordVector2* RecordAddRowStruct::mutable_record_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Mutable(index);
}
::NFMsg::RecordVector2* RecordAddRowStruct::add_record_vector2_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >*
RecordAddRowStruct::mutable_record_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_vector2_list)
  return &record_vector2_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >&
RecordAddRowStruct::record_vector2_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_;
}

// repeated .NFMsg.RecordVector3 record_vector3_list = 7;
int RecordAddRowStruct::record_vector3_list_size() const {
  return record_vector3_list_.size();
}
void RecordAddRowStruct::clear_record_vector3_list() {
  record_vector3_list_.Clear();
}
const ::NFMsg::RecordVector3& RecordAddRowStruct::record_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Get(index);
}
::NFMsg::RecordVector3* RecordAddRowStruct::mutable_record_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Mutable(index);
}
::NFMsg::RecordVector3* RecordAddRowStruct::add_record_vector3_list() {
  // @@protoc_insertion_point(field_add:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >*
RecordAddRowStruct::mutable_record_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.RecordAddRowStruct.record_vector3_list)
  return &record_vector3_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >&
RecordAddRowStruct::record_vector3_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordBase::kRecordNameFieldNumber;
const int ObjectRecordBase::kRowStructFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordBase::ObjectRecordBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordBase)
}
ObjectRecordBase::ObjectRecordBase(const ObjectRecordBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      row_struct_(from.row_struct_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordBase)
}

void ObjectRecordBase::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ObjectRecordBase::~ObjectRecordBase() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordBase)
  SharedDtor();
}

void ObjectRecordBase::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObjectRecordBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordBase::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordBase& ObjectRecordBase::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordBase* ObjectRecordBase::New(::google::protobuf::Arena* arena) const {
  ObjectRecordBase* n = new ObjectRecordBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordBase::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_struct_.Clear();
  if (has_record_name()) {
    GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*record_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes record_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_struct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordBase)
  return false;
#undef DO_
}

void ObjectRecordBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes record_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->record_name(), output);
  }

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_struct_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row_struct(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordBase)
}

::google::protobuf::uint8* ObjectRecordBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes record_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->record_name(), target);
  }

  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_struct_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->row_struct(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordBase)
  return target;
}

size_t ObjectRecordBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes record_name = 1;
  if (has_record_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }
  // repeated .NFMsg.RecordAddRowStruct row_struct = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->row_struct_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row_struct(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordBase)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordBase)
    MergeFrom(*source);
  }
}

void ObjectRecordBase::MergeFrom(const ObjectRecordBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_struct_.MergeFrom(from.row_struct_);
  if (from.has_record_name()) {
    set_has_record_name();
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
}

void ObjectRecordBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordBase::CopyFrom(const ObjectRecordBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->row_struct())) return false;
  return true;
}

void ObjectRecordBase::Swap(ObjectRecordBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordBase::InternalSwap(ObjectRecordBase* other) {
  using std::swap;
  row_struct_.InternalSwap(&other->row_struct_);
  record_name_.Swap(&other->record_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordBase::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordBase

// required bytes record_name = 1;
bool ObjectRecordBase::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordBase::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordBase::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordBase::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordBase::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordBase.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordBase::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordBase.record_name)
}
#if LANG_CXX11
void ObjectRecordBase::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordBase.record_name)
}
#endif
void ObjectRecordBase::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordBase.record_name)
}
void ObjectRecordBase::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordBase.record_name)
}
::std::string* ObjectRecordBase::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordBase.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordBase::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordBase.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordBase::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordBase.record_name)
}

// repeated .NFMsg.RecordAddRowStruct row_struct = 2;
int ObjectRecordBase::row_struct_size() const {
  return row_struct_.size();
}
void ObjectRecordBase::clear_row_struct() {
  row_struct_.Clear();
}
const ::NFMsg::RecordAddRowStruct& ObjectRecordBase::row_struct(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Get(index);
}
::NFMsg::RecordAddRowStruct* ObjectRecordBase::mutable_row_struct(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Mutable(index);
}
::NFMsg::RecordAddRowStruct* ObjectRecordBase::add_row_struct() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
ObjectRecordBase::mutable_row_struct() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordBase.row_struct)
  return &row_struct_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
ObjectRecordBase::row_struct() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordBase.row_struct)
  return row_struct_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyInt::kPlayerIdFieldNumber;
const int ObjectPropertyInt::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyInt::ObjectPropertyInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyInt)
}
ObjectPropertyInt::ObjectPropertyInt(const ObjectPropertyInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyInt)
}

void ObjectPropertyInt::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyInt::~ObjectPropertyInt() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyInt)
  SharedDtor();
}

void ObjectPropertyInt::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyInt::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyInt& ObjectPropertyInt::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyInt* ObjectPropertyInt::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyInt* n = new ObjectPropertyInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyInt property_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyInt)
  return false;
#undef DO_
}

void ObjectPropertyInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyInt property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyInt)
}

::google::protobuf::uint8* ObjectPropertyInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyInt property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyInt)
  return target;
}

size_t ObjectPropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyInt property_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyInt)
    MergeFrom(*source);
  }
}

void ObjectPropertyInt::MergeFrom(const ObjectPropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyInt::CopyFrom(const ObjectPropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyInt::Swap(ObjectPropertyInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyInt::InternalSwap(ObjectPropertyInt* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyInt::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyInt

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyInt::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyInt::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyInt::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyInt::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyInt::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyInt.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyInt::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyInt.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyInt::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyInt.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyInt::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyInt.player_id)
}

// repeated .NFMsg.PropertyInt property_list = 2;
int ObjectPropertyInt::property_list_size() const {
  return property_list_.size();
}
void ObjectPropertyInt::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::PropertyInt& ObjectPropertyInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Get(index);
}
::NFMsg::PropertyInt* ObjectPropertyInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::PropertyInt* ObjectPropertyInt::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyInt.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >*
ObjectPropertyInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyInt.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >&
ObjectPropertyInt::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyInt.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyFloat::kPlayerIdFieldNumber;
const int ObjectPropertyFloat::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyFloat::ObjectPropertyFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyFloat)
}
ObjectPropertyFloat::ObjectPropertyFloat(const ObjectPropertyFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyFloat)
}

void ObjectPropertyFloat::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyFloat::~ObjectPropertyFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyFloat)
  SharedDtor();
}

void ObjectPropertyFloat::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyFloat::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyFloat& ObjectPropertyFloat::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyFloat* ObjectPropertyFloat::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyFloat* n = new ObjectPropertyFloat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyFloat property_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyFloat)
  return false;
#undef DO_
}

void ObjectPropertyFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyFloat property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyFloat)
}

::google::protobuf::uint8* ObjectPropertyFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyFloat property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyFloat)
  return target;
}

size_t ObjectPropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyFloat property_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyFloat)
    MergeFrom(*source);
  }
}

void ObjectPropertyFloat::MergeFrom(const ObjectPropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyFloat::CopyFrom(const ObjectPropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyFloat::Swap(ObjectPropertyFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyFloat::InternalSwap(ObjectPropertyFloat* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyFloat::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyFloat

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyFloat::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyFloat::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyFloat::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyFloat::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyFloat::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyFloat.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyFloat::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyFloat.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyFloat::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyFloat.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyFloat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyFloat.player_id)
}

// repeated .NFMsg.PropertyFloat property_list = 2;
int ObjectPropertyFloat::property_list_size() const {
  return property_list_.size();
}
void ObjectPropertyFloat::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::PropertyFloat& ObjectPropertyFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Get(index);
}
::NFMsg::PropertyFloat* ObjectPropertyFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::PropertyFloat* ObjectPropertyFloat::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >*
ObjectPropertyFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyFloat.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >&
ObjectPropertyFloat::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyFloat.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyString::kPlayerIdFieldNumber;
const int ObjectPropertyString::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyString::ObjectPropertyString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyString)
}
ObjectPropertyString::ObjectPropertyString(const ObjectPropertyString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyString)
}

void ObjectPropertyString::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyString::~ObjectPropertyString() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyString)
  SharedDtor();
}

void ObjectPropertyString::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyString::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyString& ObjectPropertyString::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyString* ObjectPropertyString::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyString* n = new ObjectPropertyString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyString property_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyString)
  return false;
#undef DO_
}

void ObjectPropertyString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyString property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyString)
}

::google::protobuf::uint8* ObjectPropertyString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyString property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyString)
  return target;
}

size_t ObjectPropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyString property_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyString)
    MergeFrom(*source);
  }
}

void ObjectPropertyString::MergeFrom(const ObjectPropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyString::CopyFrom(const ObjectPropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyString::Swap(ObjectPropertyString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyString::InternalSwap(ObjectPropertyString* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyString::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyString

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyString::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyString::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyString::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyString::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyString::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyString.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyString::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyString.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyString::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyString.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyString::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyString.player_id)
}

// repeated .NFMsg.PropertyString property_list = 2;
int ObjectPropertyString::property_list_size() const {
  return property_list_.size();
}
void ObjectPropertyString::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::PropertyString& ObjectPropertyString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Get(index);
}
::NFMsg::PropertyString* ObjectPropertyString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::PropertyString* ObjectPropertyString::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyString.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >*
ObjectPropertyString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyString.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >&
ObjectPropertyString::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyString.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyObject::kPlayerIdFieldNumber;
const int ObjectPropertyObject::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyObject::ObjectPropertyObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyObject)
}
ObjectPropertyObject::ObjectPropertyObject(const ObjectPropertyObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyObject)
}

void ObjectPropertyObject::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyObject::~ObjectPropertyObject() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyObject)
  SharedDtor();
}

void ObjectPropertyObject::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyObject::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyObject& ObjectPropertyObject::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyObject* ObjectPropertyObject::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyObject* n = new ObjectPropertyObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyObject property_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyObject)
  return false;
#undef DO_
}

void ObjectPropertyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyObject property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyObject)
}

::google::protobuf::uint8* ObjectPropertyObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyObject property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyObject)
  return target;
}

size_t ObjectPropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyObject property_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyObject)
    MergeFrom(*source);
  }
}

void ObjectPropertyObject::MergeFrom(const ObjectPropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyObject::CopyFrom(const ObjectPropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyObject::Swap(ObjectPropertyObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyObject::InternalSwap(ObjectPropertyObject* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyObject::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyObject

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyObject::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyObject::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyObject::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyObject::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyObject::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyObject.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyObject::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyObject.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyObject::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyObject.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyObject::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyObject.player_id)
}

// repeated .NFMsg.PropertyObject property_list = 2;
int ObjectPropertyObject::property_list_size() const {
  return property_list_.size();
}
void ObjectPropertyObject::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::PropertyObject& ObjectPropertyObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Get(index);
}
::NFMsg::PropertyObject* ObjectPropertyObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::PropertyObject* ObjectPropertyObject::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyObject.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >*
ObjectPropertyObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyObject.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >&
ObjectPropertyObject::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyObject.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyVector2::kPlayerIdFieldNumber;
const int ObjectPropertyVector2::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyVector2::ObjectPropertyVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyVector2)
}
ObjectPropertyVector2::ObjectPropertyVector2(const ObjectPropertyVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyVector2)
}

void ObjectPropertyVector2::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyVector2::~ObjectPropertyVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyVector2)
  SharedDtor();
}

void ObjectPropertyVector2::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyVector2::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyVector2& ObjectPropertyVector2::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyVector2* ObjectPropertyVector2::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyVector2* n = new ObjectPropertyVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyVector2 property_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyVector2)
  return false;
#undef DO_
}

void ObjectPropertyVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyVector2)
}

::google::protobuf::uint8* ObjectPropertyVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyVector2 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyVector2)
  return target;
}

size_t ObjectPropertyVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyVector2 property_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyVector2)
    MergeFrom(*source);
  }
}

void ObjectPropertyVector2::MergeFrom(const ObjectPropertyVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector2::CopyFrom(const ObjectPropertyVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyVector2::Swap(ObjectPropertyVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyVector2::InternalSwap(ObjectPropertyVector2* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyVector2::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyVector2

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyVector2::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyVector2::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyVector2::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyVector2::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyVector2::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector2.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyVector2::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector2.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyVector2::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyVector2.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyVector2::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyVector2.player_id)
}

// repeated .NFMsg.PropertyVector2 property_list = 2;
int ObjectPropertyVector2::property_list_size() const {
  return property_list_.size();
}
void ObjectPropertyVector2::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::PropertyVector2& ObjectPropertyVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Get(index);
}
::NFMsg::PropertyVector2* ObjectPropertyVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::PropertyVector2* ObjectPropertyVector2::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
ObjectPropertyVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyVector2.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
ObjectPropertyVector2::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyVector2.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyVector3::kPlayerIdFieldNumber;
const int ObjectPropertyVector3::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyVector3::ObjectPropertyVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyVector3)
}
ObjectPropertyVector3::ObjectPropertyVector3(const ObjectPropertyVector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyVector3)
}

void ObjectPropertyVector3::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyVector3::~ObjectPropertyVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyVector3)
  SharedDtor();
}

void ObjectPropertyVector3::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyVector3::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyVector3& ObjectPropertyVector3::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyVector3* ObjectPropertyVector3::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyVector3* n = new ObjectPropertyVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyVector3 property_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyVector3)
  return false;
#undef DO_
}

void ObjectPropertyVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyVector3)
}

::google::protobuf::uint8* ObjectPropertyVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyVector3 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyVector3)
  return target;
}

size_t ObjectPropertyVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyVector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyVector3 property_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyVector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyVector3)
    MergeFrom(*source);
  }
}

void ObjectPropertyVector3::MergeFrom(const ObjectPropertyVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector3::CopyFrom(const ObjectPropertyVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyVector3::Swap(ObjectPropertyVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyVector3::InternalSwap(ObjectPropertyVector3* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyVector3::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyVector3

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyVector3::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyVector3::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyVector3::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyVector3::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyVector3::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector3.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyVector3::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector3.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyVector3::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyVector3.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyVector3::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyVector3.player_id)
}

// repeated .NFMsg.PropertyVector3 property_list = 2;
int ObjectPropertyVector3::property_list_size() const {
  return property_list_.size();
}
void ObjectPropertyVector3::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::PropertyVector3& ObjectPropertyVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Get(index);
}
::NFMsg::PropertyVector3* ObjectPropertyVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::PropertyVector3* ObjectPropertyVector3::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
ObjectPropertyVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyVector3.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
ObjectPropertyVector3::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyVector3.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordInt::kPlayerIdFieldNumber;
const int ObjectRecordInt::kRecordNameFieldNumber;
const int ObjectRecordInt::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordInt::ObjectRecordInt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordInt)
}
ObjectRecordInt::ObjectRecordInt(const ObjectRecordInt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordInt)
}

void ObjectRecordInt::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordInt::~ObjectRecordInt() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordInt)
  SharedDtor();
}

void ObjectRecordInt::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordInt::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordInt& ObjectRecordInt::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordInt* ObjectRecordInt::New(::google::protobuf::Arena* arena) const {
  ObjectRecordInt* n = new ObjectRecordInt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordInt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordInt property_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordInt)
  return false;
#undef DO_
}

void ObjectRecordInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordInt property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordInt)
}

::google::protobuf::uint8* ObjectRecordInt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordInt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordInt property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordInt)
  return target;
}

size_t ObjectRecordInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordInt)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordInt property_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordInt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordInt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordInt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordInt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordInt)
    MergeFrom(*source);
  }
}

void ObjectRecordInt::MergeFrom(const ObjectRecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordInt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordInt::CopyFrom(const ObjectRecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordInt::Swap(ObjectRecordInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordInt::InternalSwap(ObjectRecordInt* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordInt::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordInt

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordInt::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordInt::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordInt::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordInt::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordInt::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordInt::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordInt::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordInt.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordInt::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordInt.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordInt::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordInt::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordInt::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordInt::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordInt::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordInt::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordInt.record_name)
}
#if LANG_CXX11
void ObjectRecordInt::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordInt.record_name)
}
#endif
void ObjectRecordInt::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordInt.record_name)
}
void ObjectRecordInt::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordInt.record_name)
}
::std::string* ObjectRecordInt::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordInt::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordInt.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordInt::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordInt.record_name)
}

// repeated .NFMsg.RecordInt property_list = 3;
int ObjectRecordInt::property_list_size() const {
  return property_list_.size();
}
void ObjectRecordInt::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::RecordInt& ObjectRecordInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Get(index);
}
::NFMsg::RecordInt* ObjectRecordInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::RecordInt* ObjectRecordInt::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordInt.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >*
ObjectRecordInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordInt.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordInt >&
ObjectRecordInt::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordInt.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordFloat::kPlayerIdFieldNumber;
const int ObjectRecordFloat::kRecordNameFieldNumber;
const int ObjectRecordFloat::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordFloat::ObjectRecordFloat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordFloat)
}
ObjectRecordFloat::ObjectRecordFloat(const ObjectRecordFloat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordFloat)
}

void ObjectRecordFloat::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordFloat::~ObjectRecordFloat() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordFloat)
  SharedDtor();
}

void ObjectRecordFloat::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordFloat::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordFloat& ObjectRecordFloat::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordFloat* ObjectRecordFloat::New(::google::protobuf::Arena* arena) const {
  ObjectRecordFloat* n = new ObjectRecordFloat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordFloat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordFloat property_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordFloat)
  return false;
#undef DO_
}

void ObjectRecordFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordFloat property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordFloat)
}

::google::protobuf::uint8* ObjectRecordFloat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordFloat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordFloat property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordFloat)
  return target;
}

size_t ObjectRecordFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordFloat)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordFloat property_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordFloat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordFloat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordFloat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordFloat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordFloat)
    MergeFrom(*source);
  }
}

void ObjectRecordFloat::MergeFrom(const ObjectRecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordFloat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordFloat::CopyFrom(const ObjectRecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordFloat::Swap(ObjectRecordFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordFloat::InternalSwap(ObjectRecordFloat* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordFloat::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordFloat

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordFloat::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordFloat::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordFloat::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordFloat::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordFloat::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordFloat::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordFloat::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordFloat.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordFloat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordFloat.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordFloat::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordFloat::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordFloat::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordFloat::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordFloat::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordFloat::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordFloat.record_name)
}
#if LANG_CXX11
void ObjectRecordFloat::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordFloat.record_name)
}
#endif
void ObjectRecordFloat::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordFloat.record_name)
}
void ObjectRecordFloat::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordFloat.record_name)
}
::std::string* ObjectRecordFloat::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordFloat::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordFloat.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordFloat::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordFloat.record_name)
}

// repeated .NFMsg.RecordFloat property_list = 3;
int ObjectRecordFloat::property_list_size() const {
  return property_list_.size();
}
void ObjectRecordFloat::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::RecordFloat& ObjectRecordFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Get(index);
}
::NFMsg::RecordFloat* ObjectRecordFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::RecordFloat* ObjectRecordFloat::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordFloat.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >*
ObjectRecordFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordFloat.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordFloat >&
ObjectRecordFloat::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordFloat.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordString::kPlayerIdFieldNumber;
const int ObjectRecordString::kRecordNameFieldNumber;
const int ObjectRecordString::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordString::ObjectRecordString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordString)
}
ObjectRecordString::ObjectRecordString(const ObjectRecordString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordString)
}

void ObjectRecordString::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordString::~ObjectRecordString() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordString)
  SharedDtor();
}

void ObjectRecordString::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordString::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordString& ObjectRecordString::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordString* ObjectRecordString::New(::google::protobuf::Arena* arena) const {
  ObjectRecordString* n = new ObjectRecordString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordString property_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordString)
  return false;
#undef DO_
}

void ObjectRecordString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordString property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordString)
}

::google::protobuf::uint8* ObjectRecordString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordString property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordString)
  return target;
}

size_t ObjectRecordString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordString)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordString property_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordString)
    MergeFrom(*source);
  }
}

void ObjectRecordString::MergeFrom(const ObjectRecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordString::CopyFrom(const ObjectRecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordString::Swap(ObjectRecordString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordString::InternalSwap(ObjectRecordString* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordString::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordString

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordString::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordString::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordString::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordString::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordString::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordString::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordString::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordString.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordString::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordString.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordString::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordString::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordString::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordString::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordString::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordString::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordString.record_name)
}
#if LANG_CXX11
void ObjectRecordString::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordString.record_name)
}
#endif
void ObjectRecordString::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordString.record_name)
}
void ObjectRecordString::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordString.record_name)
}
::std::string* ObjectRecordString::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordString::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordString.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordString::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordString.record_name)
}

// repeated .NFMsg.RecordString property_list = 3;
int ObjectRecordString::property_list_size() const {
  return property_list_.size();
}
void ObjectRecordString::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::RecordString& ObjectRecordString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordString.property_list)
  return property_list_.Get(index);
}
::NFMsg::RecordString* ObjectRecordString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordString.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::RecordString* ObjectRecordString::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordString.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >*
ObjectRecordString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordString.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordString >&
ObjectRecordString::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordString.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordObject::kPlayerIdFieldNumber;
const int ObjectRecordObject::kRecordNameFieldNumber;
const int ObjectRecordObject::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordObject::ObjectRecordObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordObject)
}
ObjectRecordObject::ObjectRecordObject(const ObjectRecordObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordObject)
}

void ObjectRecordObject::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordObject::~ObjectRecordObject() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordObject)
  SharedDtor();
}

void ObjectRecordObject::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordObject::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordObject& ObjectRecordObject::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordObject* ObjectRecordObject::New(::google::protobuf::Arena* arena) const {
  ObjectRecordObject* n = new ObjectRecordObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordObject property_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordObject)
  return false;
#undef DO_
}

void ObjectRecordObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordObject property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordObject)
}

::google::protobuf::uint8* ObjectRecordObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordObject property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordObject)
  return target;
}

size_t ObjectRecordObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordObject)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordObject property_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordObject)
    MergeFrom(*source);
  }
}

void ObjectRecordObject::MergeFrom(const ObjectRecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordObject::CopyFrom(const ObjectRecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordObject::Swap(ObjectRecordObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordObject::InternalSwap(ObjectRecordObject* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordObject::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordObject

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordObject::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordObject::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordObject::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordObject::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordObject::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordObject::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordObject::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordObject.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordObject::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordObject.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordObject::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordObject::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordObject::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordObject::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordObject::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordObject::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordObject.record_name)
}
#if LANG_CXX11
void ObjectRecordObject::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordObject.record_name)
}
#endif
void ObjectRecordObject::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordObject.record_name)
}
void ObjectRecordObject::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordObject.record_name)
}
::std::string* ObjectRecordObject::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordObject::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordObject.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordObject::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordObject.record_name)
}

// repeated .NFMsg.RecordObject property_list = 3;
int ObjectRecordObject::property_list_size() const {
  return property_list_.size();
}
void ObjectRecordObject::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::RecordObject& ObjectRecordObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Get(index);
}
::NFMsg::RecordObject* ObjectRecordObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::RecordObject* ObjectRecordObject::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordObject.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >*
ObjectRecordObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordObject.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordObject >&
ObjectRecordObject::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordObject.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordVector2::kPlayerIdFieldNumber;
const int ObjectRecordVector2::kRecordNameFieldNumber;
const int ObjectRecordVector2::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordVector2::ObjectRecordVector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordVector2)
}
ObjectRecordVector2::ObjectRecordVector2(const ObjectRecordVector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordVector2)
}

void ObjectRecordVector2::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordVector2::~ObjectRecordVector2() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordVector2)
  SharedDtor();
}

void ObjectRecordVector2::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordVector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordVector2::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordVector2& ObjectRecordVector2::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordVector2* ObjectRecordVector2::New(::google::protobuf::Arena* arena) const {
  ObjectRecordVector2* n = new ObjectRecordVector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordVector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordVector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordVector2 property_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordVector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordVector2)
  return false;
#undef DO_
}

void ObjectRecordVector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordVector2 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordVector2)
}

::google::protobuf::uint8* ObjectRecordVector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordVector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordVector2 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordVector2)
  return target;
}

size_t ObjectRecordVector2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordVector2)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordVector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordVector2 property_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordVector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordVector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordVector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordVector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordVector2)
    MergeFrom(*source);
  }
}

void ObjectRecordVector2::MergeFrom(const ObjectRecordVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordVector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector2::CopyFrom(const ObjectRecordVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordVector2::Swap(ObjectRecordVector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordVector2::InternalSwap(ObjectRecordVector2* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordVector2::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordVector2

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordVector2::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordVector2::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordVector2::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordVector2::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordVector2::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordVector2::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordVector2::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector2.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordVector2::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector2.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordVector2::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordVector2::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordVector2::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordVector2::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordVector2::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordVector2::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordVector2.record_name)
}
#if LANG_CXX11
void ObjectRecordVector2::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordVector2.record_name)
}
#endif
void ObjectRecordVector2::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordVector2.record_name)
}
void ObjectRecordVector2::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordVector2.record_name)
}
::std::string* ObjectRecordVector2::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordVector2::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector2.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordVector2::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector2.record_name)
}

// repeated .NFMsg.RecordVector2 property_list = 3;
int ObjectRecordVector2::property_list_size() const {
  return property_list_.size();
}
void ObjectRecordVector2::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::RecordVector2& ObjectRecordVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Get(index);
}
::NFMsg::RecordVector2* ObjectRecordVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::RecordVector2* ObjectRecordVector2::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordVector2.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >*
ObjectRecordVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordVector2.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector2 >&
ObjectRecordVector2::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordVector2.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordVector3::kPlayerIdFieldNumber;
const int ObjectRecordVector3::kRecordNameFieldNumber;
const int ObjectRecordVector3::kPropertyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordVector3::ObjectRecordVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordVector3)
}
ObjectRecordVector3::ObjectRecordVector3(const ObjectRecordVector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordVector3)
}

void ObjectRecordVector3::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordVector3::~ObjectRecordVector3() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordVector3)
  SharedDtor();
}

void ObjectRecordVector3::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordVector3::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordVector3& ObjectRecordVector3::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordVector3* ObjectRecordVector3::New(::google::protobuf::Arena* arena) const {
  ObjectRecordVector3* n = new ObjectRecordVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordVector3 property_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordVector3)
  return false;
#undef DO_
}

void ObjectRecordVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordVector3 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordVector3)
}

::google::protobuf::uint8* ObjectRecordVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordVector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordVector3 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordVector3)
  return target;
}

size_t ObjectRecordVector3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordVector3)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordVector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordVector3 property_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordVector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordVector3)
    MergeFrom(*source);
  }
}

void ObjectRecordVector3::MergeFrom(const ObjectRecordVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector3::CopyFrom(const ObjectRecordVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordVector3::Swap(ObjectRecordVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordVector3::InternalSwap(ObjectRecordVector3* other) {
  using std::swap;
  property_list_.InternalSwap(&other->property_list_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordVector3::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordVector3

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordVector3::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordVector3::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordVector3::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordVector3::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordVector3::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordVector3::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordVector3::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector3.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordVector3::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector3.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordVector3::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordVector3::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordVector3::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordVector3::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordVector3::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordVector3::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordVector3.record_name)
}
#if LANG_CXX11
void ObjectRecordVector3::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordVector3.record_name)
}
#endif
void ObjectRecordVector3::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordVector3.record_name)
}
void ObjectRecordVector3::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordVector3.record_name)
}
::std::string* ObjectRecordVector3::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordVector3::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordVector3.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordVector3::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordVector3.record_name)
}

// repeated .NFMsg.RecordVector3 property_list = 3;
int ObjectRecordVector3::property_list_size() const {
  return property_list_.size();
}
void ObjectRecordVector3::clear_property_list() {
  property_list_.Clear();
}
const ::NFMsg::RecordVector3& ObjectRecordVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Get(index);
}
::NFMsg::RecordVector3* ObjectRecordVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Mutable(index);
}
::NFMsg::RecordVector3* ObjectRecordVector3::add_property_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordVector3.property_list)
  return property_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >*
ObjectRecordVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordVector3.property_list)
  return &property_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordVector3 >&
ObjectRecordVector3::property_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordVector3.property_list)
  return property_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordSwap::kPlayerIdFieldNumber;
const int ObjectRecordSwap::kOriginRecordNameFieldNumber;
const int ObjectRecordSwap::kTargetRecordNameFieldNumber;
const int ObjectRecordSwap::kRowOriginFieldNumber;
const int ObjectRecordSwap::kRowTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordSwap::ObjectRecordSwap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordSwap)
}
ObjectRecordSwap::ObjectRecordSwap(const ObjectRecordSwap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  origin_record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_origin_record_name()) {
    origin_record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_record_name_);
  }
  target_record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_record_name()) {
    target_record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  ::memcpy(&row_origin_, &from.row_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_target_) -
    reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordSwap)
}

void ObjectRecordSwap::SharedCtor() {
  _cached_size_ = 0;
  origin_record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_target_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(row_target_));
}

ObjectRecordSwap::~ObjectRecordSwap() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordSwap)
  SharedDtor();
}

void ObjectRecordSwap::SharedDtor() {
  origin_record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordSwap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordSwap::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordSwap& ObjectRecordSwap::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordSwap* ObjectRecordSwap::New(::google::protobuf::Arena* arena) const {
  ObjectRecordSwap* n = new ObjectRecordSwap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordSwap::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordSwap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!origin_record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*origin_record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!target_record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&row_origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_target_) -
        reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordSwap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordSwap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes origin_record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_origin_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes target_record_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 row_origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_row_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 row_target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_row_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordSwap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordSwap)
  return false;
#undef DO_
}

void ObjectRecordSwap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordSwap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes origin_record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->origin_record_name(), output);
  }

  // optional bytes target_record_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->target_record_name(), output);
  }

  // required int32 row_origin = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->row_origin(), output);
  }

  // required int32 row_target = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->row_target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordSwap)
}

::google::protobuf::uint8* ObjectRecordSwap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordSwap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes origin_record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->origin_record_name(), target);
  }

  // optional bytes target_record_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->target_record_name(), target);
  }

  // required int32 row_origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->row_origin(), target);
  }

  // required int32 row_target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->row_target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordSwap)
  return target;
}

size_t ObjectRecordSwap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordSwap)
  size_t total_size = 0;

  if (has_origin_record_name()) {
    // required bytes origin_record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->origin_record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  if (has_row_origin()) {
    // required int32 row_origin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_origin());
  }

  if (has_row_target()) {
    // required int32 row_target = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_target());
  }

  return total_size;
}
size_t ObjectRecordSwap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordSwap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required bytes origin_record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->origin_record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

    // required int32 row_origin = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_origin());

    // required int32 row_target = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row_target());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes target_record_name = 3;
  if (has_target_record_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->target_record_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordSwap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordSwap)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordSwap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordSwap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordSwap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordSwap)
    MergeFrom(*source);
  }
}

void ObjectRecordSwap::MergeFrom(const ObjectRecordSwap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordSwap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_origin_record_name();
      origin_record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.origin_record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target_record_name();
      target_record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_record_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (cached_has_bits & 0x00000008u) {
      row_origin_ = from.row_origin_;
    }
    if (cached_has_bits & 0x00000010u) {
      row_target_ = from.row_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectRecordSwap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordSwap::CopyFrom(const ObjectRecordSwap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordSwap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordSwap::Swap(ObjectRecordSwap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordSwap::InternalSwap(ObjectRecordSwap* other) {
  using std::swap;
  origin_record_name_.Swap(&other->origin_record_name_);
  target_record_name_.Swap(&other->target_record_name_);
  swap(player_id_, other->player_id_);
  swap(row_origin_, other->row_origin_);
  swap(row_target_, other->row_target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordSwap::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordSwap

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordSwap::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjectRecordSwap::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjectRecordSwap::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjectRecordSwap::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordSwap::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordSwap::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordSwap::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordSwap::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.player_id)
}

// required bytes origin_record_name = 2;
bool ObjectRecordSwap::has_origin_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordSwap::set_has_origin_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordSwap::clear_has_origin_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordSwap::clear_origin_record_name() {
  origin_record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_origin_record_name();
}
const ::std::string& ObjectRecordSwap::origin_record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.origin_record_name)
  return origin_record_name_.GetNoArena();
}
void ObjectRecordSwap::set_origin_record_name(const ::std::string& value) {
  set_has_origin_record_name();
  origin_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.origin_record_name)
}
#if LANG_CXX11
void ObjectRecordSwap::set_origin_record_name(::std::string&& value) {
  set_has_origin_record_name();
  origin_record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordSwap.origin_record_name)
}
#endif
void ObjectRecordSwap::set_origin_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_origin_record_name();
  origin_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordSwap.origin_record_name)
}
void ObjectRecordSwap::set_origin_record_name(const void* value, size_t size) {
  set_has_origin_record_name();
  origin_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordSwap.origin_record_name)
}
::std::string* ObjectRecordSwap::mutable_origin_record_name() {
  set_has_origin_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.origin_record_name)
  return origin_record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordSwap::release_origin_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.origin_record_name)
  clear_has_origin_record_name();
  return origin_record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordSwap::set_allocated_origin_record_name(::std::string* origin_record_name) {
  if (origin_record_name != NULL) {
    set_has_origin_record_name();
  } else {
    clear_has_origin_record_name();
  }
  origin_record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.origin_record_name)
}

// optional bytes target_record_name = 3;
bool ObjectRecordSwap::has_target_record_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordSwap::set_has_target_record_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordSwap::clear_has_target_record_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordSwap::clear_target_record_name() {
  target_record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_record_name();
}
const ::std::string& ObjectRecordSwap::target_record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.target_record_name)
  return target_record_name_.GetNoArena();
}
void ObjectRecordSwap::set_target_record_name(const ::std::string& value) {
  set_has_target_record_name();
  target_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.target_record_name)
}
#if LANG_CXX11
void ObjectRecordSwap::set_target_record_name(::std::string&& value) {
  set_has_target_record_name();
  target_record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordSwap.target_record_name)
}
#endif
void ObjectRecordSwap::set_target_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_record_name();
  target_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordSwap.target_record_name)
}
void ObjectRecordSwap::set_target_record_name(const void* value, size_t size) {
  set_has_target_record_name();
  target_record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordSwap.target_record_name)
}
::std::string* ObjectRecordSwap::mutable_target_record_name() {
  set_has_target_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordSwap.target_record_name)
  return target_record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordSwap::release_target_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordSwap.target_record_name)
  clear_has_target_record_name();
  return target_record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordSwap::set_allocated_target_record_name(::std::string* target_record_name) {
  if (target_record_name != NULL) {
    set_has_target_record_name();
  } else {
    clear_has_target_record_name();
  }
  target_record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordSwap.target_record_name)
}

// required int32 row_origin = 4;
bool ObjectRecordSwap::has_row_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjectRecordSwap::set_has_row_origin() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjectRecordSwap::clear_has_row_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjectRecordSwap::clear_row_origin() {
  row_origin_ = 0;
  clear_has_row_origin();
}
::google::protobuf::int32 ObjectRecordSwap::row_origin() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.row_origin)
  return row_origin_;
}
void ObjectRecordSwap::set_row_origin(::google::protobuf::int32 value) {
  set_has_row_origin();
  row_origin_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.row_origin)
}

// required int32 row_target = 5;
bool ObjectRecordSwap::has_row_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ObjectRecordSwap::set_has_row_target() {
  _has_bits_[0] |= 0x00000010u;
}
void ObjectRecordSwap::clear_has_row_target() {
  _has_bits_[0] &= ~0x00000010u;
}
void ObjectRecordSwap::clear_row_target() {
  row_target_ = 0;
  clear_has_row_target();
}
::google::protobuf::int32 ObjectRecordSwap::row_target() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordSwap.row_target)
  return row_target_;
}
void ObjectRecordSwap::set_row_target(::google::protobuf::int32 value) {
  set_has_row_target();
  row_target_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordSwap.row_target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordAddRow::kPlayerIdFieldNumber;
const int ObjectRecordAddRow::kRecordNameFieldNumber;
const int ObjectRecordAddRow::kRowDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordAddRow::ObjectRecordAddRow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordAddRow)
}
ObjectRecordAddRow::ObjectRecordAddRow(const ObjectRecordAddRow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      row_data_(from.row_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordAddRow)
}

void ObjectRecordAddRow::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordAddRow::~ObjectRecordAddRow() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordAddRow)
  SharedDtor();
}

void ObjectRecordAddRow::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordAddRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordAddRow::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordAddRow& ObjectRecordAddRow::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordAddRow* ObjectRecordAddRow::New(::google::protobuf::Arena* arena) const {
  ObjectRecordAddRow* n = new ObjectRecordAddRow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordAddRow::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordAddRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordAddRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordAddRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.RecordAddRowStruct row_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_row_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordAddRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordAddRow)
  return false;
#undef DO_
}

void ObjectRecordAddRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordAddRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->row_data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordAddRow)
}

::google::protobuf::uint8* ObjectRecordAddRow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordAddRow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->row_data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordAddRow)
  return target;
}

size_t ObjectRecordAddRow::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordAddRow)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordAddRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordAddRow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.RecordAddRowStruct row_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->row_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordAddRow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordAddRow)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordAddRow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordAddRow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordAddRow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordAddRow)
    MergeFrom(*source);
  }
}

void ObjectRecordAddRow::MergeFrom(const ObjectRecordAddRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordAddRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_data_.MergeFrom(from.row_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordAddRow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordAddRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordAddRow::CopyFrom(const ObjectRecordAddRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordAddRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordAddRow::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->row_data())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordAddRow::Swap(ObjectRecordAddRow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordAddRow::InternalSwap(ObjectRecordAddRow* other) {
  using std::swap;
  row_data_.InternalSwap(&other->row_data_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordAddRow::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordAddRow

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordAddRow::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordAddRow::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordAddRow::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordAddRow::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordAddRow::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordAddRow::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordAddRow::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordAddRow.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordAddRow::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordAddRow.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordAddRow::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordAddRow::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordAddRow::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordAddRow::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordAddRow::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordAddRow::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordAddRow.record_name)
}
#if LANG_CXX11
void ObjectRecordAddRow::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordAddRow.record_name)
}
#endif
void ObjectRecordAddRow::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordAddRow.record_name)
}
void ObjectRecordAddRow::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordAddRow.record_name)
}
::std::string* ObjectRecordAddRow::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordAddRow::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordAddRow.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordAddRow::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordAddRow.record_name)
}

// repeated .NFMsg.RecordAddRowStruct row_data = 3;
int ObjectRecordAddRow::row_data_size() const {
  return row_data_.size();
}
void ObjectRecordAddRow::clear_row_data() {
  row_data_.Clear();
}
const ::NFMsg::RecordAddRowStruct& ObjectRecordAddRow::row_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Get(index);
}
::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Mutable(index);
}
::NFMsg::RecordAddRowStruct* ObjectRecordAddRow::add_row_data() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >*
ObjectRecordAddRow::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordAddRow.row_data)
  return &row_data_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::RecordAddRowStruct >&
ObjectRecordAddRow::row_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordAddRow.row_data)
  return row_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordRemove::kPlayerIdFieldNumber;
const int ObjectRecordRemove::kRecordNameFieldNumber;
const int ObjectRecordRemove::kRemoveRowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordRemove::ObjectRecordRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordRemove)
}
ObjectRecordRemove::ObjectRecordRemove(const ObjectRecordRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      remove_row_(from.remove_row_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_record_name()) {
    record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordRemove)
}

void ObjectRecordRemove::SharedCtor() {
  _cached_size_ = 0;
  record_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = NULL;
}

ObjectRecordRemove::~ObjectRecordRemove() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordRemove)
  SharedDtor();
}

void ObjectRecordRemove::SharedDtor() {
  record_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordRemove::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordRemove& ObjectRecordRemove::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordRemove* ObjectRecordRemove::New(::google::protobuf::Arena* arena) const {
  ObjectRecordRemove* n = new ObjectRecordRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_row_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!record_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*record_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes record_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_record_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 remove_row = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_remove_row())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remove_row())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordRemove)
  return false;
#undef DO_
}

void ObjectRecordRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->record_name(), output);
  }

  // repeated int32 remove_row = 3;
  for (int i = 0, n = this->remove_row_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->remove_row(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordRemove)
}

::google::protobuf::uint8* ObjectRecordRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes record_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->record_name(), target);
  }

  // repeated int32 remove_row = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->remove_row_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordRemove)
  return target;
}

size_t ObjectRecordRemove::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ObjectRecordRemove)
  size_t total_size = 0;

  if (has_record_name()) {
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t ObjectRecordRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordRemove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes record_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->record_name());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 remove_row = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->remove_row_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->remove_row_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordRemove)
    MergeFrom(*source);
  }
}

void ObjectRecordRemove::MergeFrom(const ObjectRecordRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remove_row_.MergeFrom(from.remove_row_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_record_name();
      record_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
  }
}

void ObjectRecordRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordRemove::CopyFrom(const ObjectRecordRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordRemove::Swap(ObjectRecordRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordRemove::InternalSwap(ObjectRecordRemove* other) {
  using std::swap;
  remove_row_.InternalSwap(&other->remove_row_);
  record_name_.Swap(&other->record_name_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordRemove::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordRemove

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordRemove::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjectRecordRemove::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjectRecordRemove::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjectRecordRemove::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordRemove::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordRemove::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordRemove.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordRemove::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordRemove.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordRemove::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordRemove.player_id)
}

// required bytes record_name = 2;
bool ObjectRecordRemove::has_record_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordRemove::set_has_record_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordRemove::clear_has_record_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordRemove::clear_record_name() {
  record_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_record_name();
}
const ::std::string& ObjectRecordRemove::record_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.record_name)
  return record_name_.GetNoArena();
}
void ObjectRecordRemove::set_record_name(const ::std::string& value) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordRemove.record_name)
}
#if LANG_CXX11
void ObjectRecordRemove::set_record_name(::std::string&& value) {
  set_has_record_name();
  record_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ObjectRecordRemove.record_name)
}
#endif
void ObjectRecordRemove::set_record_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ObjectRecordRemove.record_name)
}
void ObjectRecordRemove::set_record_name(const void* value, size_t size) {
  set_has_record_name();
  record_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ObjectRecordRemove.record_name)
}
::std::string* ObjectRecordRemove::mutable_record_name() {
  set_has_record_name();
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordRemove.record_name)
  return record_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectRecordRemove::release_record_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordRemove.record_name)
  clear_has_record_name();
  return record_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectRecordRemove::set_allocated_record_name(::std::string* record_name) {
  if (record_name != NULL) {
    set_has_record_name();
  } else {
    clear_has_record_name();
  }
  record_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordRemove.record_name)
}

// repeated int32 remove_row = 3;
int ObjectRecordRemove::remove_row_size() const {
  return remove_row_.size();
}
void ObjectRecordRemove::clear_remove_row() {
  remove_row_.Clear();
}
::google::protobuf::int32 ObjectRecordRemove::remove_row(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordRemove.remove_row)
  return remove_row_.Get(index);
}
void ObjectRecordRemove::set_remove_row(int index, ::google::protobuf::int32 value) {
  remove_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:NFMsg.ObjectRecordRemove.remove_row)
}
void ObjectRecordRemove::add_remove_row(::google::protobuf::int32 value) {
  remove_row_.Add(value);
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordRemove.remove_row)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ObjectRecordRemove::remove_row() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordRemove.remove_row)
  return remove_row_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ObjectRecordRemove::mutable_remove_row() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordRemove.remove_row)
  return &remove_row_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectPropertyList::kPlayerIdFieldNumber;
const int ObjectPropertyList::kPropertyIntListFieldNumber;
const int ObjectPropertyList::kPropertyFloatListFieldNumber;
const int ObjectPropertyList::kPropertyStringListFieldNumber;
const int ObjectPropertyList::kPropertyObjectListFieldNumber;
const int ObjectPropertyList::kPropertyVector2ListFieldNumber;
const int ObjectPropertyList::kPropertyVector3ListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectPropertyList::ObjectPropertyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectPropertyList)
}
ObjectPropertyList::ObjectPropertyList(const ObjectPropertyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      property_int_list_(from.property_int_list_),
      property_float_list_(from.property_float_list_),
      property_string_list_(from.property_string_list_),
      property_object_list_(from.property_object_list_),
      property_vector2_list_(from.property_vector2_list_),
      property_vector3_list_(from.property_vector3_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectPropertyList)
}

void ObjectPropertyList::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectPropertyList::~ObjectPropertyList() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectPropertyList)
  SharedDtor();
}

void ObjectPropertyList::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectPropertyList::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectPropertyList& ObjectPropertyList::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectPropertyList* ObjectPropertyList::New(::google::protobuf::Arena* arena) const {
  ObjectPropertyList* n = new ObjectPropertyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectPropertyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_int_list_.Clear();
  property_float_list_.Clear();
  property_string_list_.Clear();
  property_object_list_.Clear();
  property_vector2_list_.Clear();
  property_vector3_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectPropertyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectPropertyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyInt property_int_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_int_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyFloat property_float_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_float_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyString property_string_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_string_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyObject property_object_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_object_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_vector2_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property_vector3_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectPropertyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectPropertyList)
  return false;
#undef DO_
}

void ObjectPropertyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectPropertyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_int_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property_int_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_float_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->property_float_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_string_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->property_string_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_object_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->property_object_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_vector2_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->property_vector2_list(static_cast<int>(i)), output);
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_vector3_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->property_vector3_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectPropertyList)
}

::google::protobuf::uint8* ObjectPropertyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectPropertyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.PropertyInt property_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_int_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->property_int_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_float_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->property_float_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_string_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->property_string_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_object_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->property_object_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_vector2_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->property_vector2_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->property_vector3_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->property_vector3_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectPropertyList)
  return target;
}

size_t ObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectPropertyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.PropertyInt property_int_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->property_int_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_int_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.PropertyFloat property_float_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->property_float_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_float_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.PropertyString property_string_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->property_string_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_string_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.PropertyObject property_object_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->property_object_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_object_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->property_vector2_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_vector2_list(static_cast<int>(i)));
    }
  }

  // repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->property_vector3_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_vector3_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectPropertyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectPropertyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectPropertyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectPropertyList)
    MergeFrom(*source);
  }
}

void ObjectPropertyList::MergeFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_int_list_.MergeFrom(from.property_int_list_);
  property_float_list_.MergeFrom(from.property_float_list_);
  property_string_list_.MergeFrom(from.property_string_list_);
  property_object_list_.MergeFrom(from.property_object_list_);
  property_vector2_list_.MergeFrom(from.property_vector2_list_);
  property_vector3_list_.MergeFrom(from.property_vector3_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectPropertyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyList::CopyFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_int_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_float_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_string_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_object_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_vector2_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->property_vector3_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectPropertyList::Swap(ObjectPropertyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectPropertyList::InternalSwap(ObjectPropertyList* other) {
  using std::swap;
  property_int_list_.InternalSwap(&other->property_int_list_);
  property_float_list_.InternalSwap(&other->property_float_list_);
  property_string_list_.InternalSwap(&other->property_string_list_);
  property_object_list_.InternalSwap(&other->property_object_list_);
  property_vector2_list_.InternalSwap(&other->property_vector2_list_);
  property_vector3_list_.InternalSwap(&other->property_vector3_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectPropertyList::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectPropertyList

// required .NFMsg.Ident player_id = 1;
bool ObjectPropertyList::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectPropertyList::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectPropertyList::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectPropertyList::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectPropertyList::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectPropertyList::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectPropertyList::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectPropertyList.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectPropertyList::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectPropertyList.player_id)
}

// repeated .NFMsg.PropertyInt property_int_list = 2;
int ObjectPropertyList::property_int_list_size() const {
  return property_int_list_.size();
}
void ObjectPropertyList::clear_property_int_list() {
  property_int_list_.Clear();
}
const ::NFMsg::PropertyInt& ObjectPropertyList::property_int_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Get(index);
}
::NFMsg::PropertyInt* ObjectPropertyList::mutable_property_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Mutable(index);
}
::NFMsg::PropertyInt* ObjectPropertyList::add_property_int_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >*
ObjectPropertyList::mutable_property_int_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_int_list)
  return &property_int_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyInt >&
ObjectPropertyList::property_int_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_int_list)
  return property_int_list_;
}

// repeated .NFMsg.PropertyFloat property_float_list = 3;
int ObjectPropertyList::property_float_list_size() const {
  return property_float_list_.size();
}
void ObjectPropertyList::clear_property_float_list() {
  property_float_list_.Clear();
}
const ::NFMsg::PropertyFloat& ObjectPropertyList::property_float_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Get(index);
}
::NFMsg::PropertyFloat* ObjectPropertyList::mutable_property_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Mutable(index);
}
::NFMsg::PropertyFloat* ObjectPropertyList::add_property_float_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >*
ObjectPropertyList::mutable_property_float_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_float_list)
  return &property_float_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyFloat >&
ObjectPropertyList::property_float_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_float_list)
  return property_float_list_;
}

// repeated .NFMsg.PropertyString property_string_list = 4;
int ObjectPropertyList::property_string_list_size() const {
  return property_string_list_.size();
}
void ObjectPropertyList::clear_property_string_list() {
  property_string_list_.Clear();
}
const ::NFMsg::PropertyString& ObjectPropertyList::property_string_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Get(index);
}
::NFMsg::PropertyString* ObjectPropertyList::mutable_property_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Mutable(index);
}
::NFMsg::PropertyString* ObjectPropertyList::add_property_string_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >*
ObjectPropertyList::mutable_property_string_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_string_list)
  return &property_string_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyString >&
ObjectPropertyList::property_string_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_string_list)
  return property_string_list_;
}

// repeated .NFMsg.PropertyObject property_object_list = 5;
int ObjectPropertyList::property_object_list_size() const {
  return property_object_list_.size();
}
void ObjectPropertyList::clear_property_object_list() {
  property_object_list_.Clear();
}
const ::NFMsg::PropertyObject& ObjectPropertyList::property_object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Get(index);
}
::NFMsg::PropertyObject* ObjectPropertyList::mutable_property_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Mutable(index);
}
::NFMsg::PropertyObject* ObjectPropertyList::add_property_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >*
ObjectPropertyList::mutable_property_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_object_list)
  return &property_object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyObject >&
ObjectPropertyList::property_object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_object_list)
  return property_object_list_;
}

// repeated .NFMsg.PropertyVector2 property_vector2_list = 6;
int ObjectPropertyList::property_vector2_list_size() const {
  return property_vector2_list_.size();
}
void ObjectPropertyList::clear_property_vector2_list() {
  property_vector2_list_.Clear();
}
const ::NFMsg::PropertyVector2& ObjectPropertyList::property_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Get(index);
}
::NFMsg::PropertyVector2* ObjectPropertyList::mutable_property_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Mutable(index);
}
::NFMsg::PropertyVector2* ObjectPropertyList::add_property_vector2_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >*
ObjectPropertyList::mutable_property_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_vector2_list)
  return &property_vector2_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector2 >&
ObjectPropertyList::property_vector2_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_;
}

// repeated .NFMsg.PropertyVector3 property_vector3_list = 7;
int ObjectPropertyList::property_vector3_list_size() const {
  return property_vector3_list_.size();
}
void ObjectPropertyList::clear_property_vector3_list() {
  property_vector3_list_.Clear();
}
const ::NFMsg::PropertyVector3& ObjectPropertyList::property_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Get(index);
}
::NFMsg::PropertyVector3* ObjectPropertyList::mutable_property_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Mutable(index);
}
::NFMsg::PropertyVector3* ObjectPropertyList::add_property_vector3_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >*
ObjectPropertyList::mutable_property_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectPropertyList.property_vector3_list)
  return &property_vector3_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::PropertyVector3 >&
ObjectPropertyList::property_vector3_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiObjectPropertyList::kMultiPlayerPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiObjectPropertyList::MultiObjectPropertyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.MultiObjectPropertyList)
}
MultiObjectPropertyList::MultiObjectPropertyList(const MultiObjectPropertyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      multi_player_property_(from.multi_player_property_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.MultiObjectPropertyList)
}

void MultiObjectPropertyList::SharedCtor() {
  _cached_size_ = 0;
}

MultiObjectPropertyList::~MultiObjectPropertyList() {
  // @@protoc_insertion_point(destructor:NFMsg.MultiObjectPropertyList)
  SharedDtor();
}

void MultiObjectPropertyList::SharedDtor() {
}

void MultiObjectPropertyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiObjectPropertyList::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiObjectPropertyList& MultiObjectPropertyList::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiObjectPropertyList* MultiObjectPropertyList::New(::google::protobuf::Arena* arena) const {
  MultiObjectPropertyList* n = new MultiObjectPropertyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.MultiObjectPropertyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_player_property_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiObjectPropertyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.MultiObjectPropertyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multi_player_property()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.MultiObjectPropertyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.MultiObjectPropertyList)
  return false;
#undef DO_
}

void MultiObjectPropertyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.MultiObjectPropertyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_player_property_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multi_player_property(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.MultiObjectPropertyList)
}

::google::protobuf::uint8* MultiObjectPropertyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.MultiObjectPropertyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_player_property_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->multi_player_property(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.MultiObjectPropertyList)
  return target;
}

size_t MultiObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.MultiObjectPropertyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->multi_player_property_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multi_player_property(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiObjectPropertyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.MultiObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiObjectPropertyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiObjectPropertyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.MultiObjectPropertyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.MultiObjectPropertyList)
    MergeFrom(*source);
  }
}

void MultiObjectPropertyList::MergeFrom(const MultiObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.MultiObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_player_property_.MergeFrom(from.multi_player_property_);
}

void MultiObjectPropertyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.MultiObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectPropertyList::CopyFrom(const MultiObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.MultiObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectPropertyList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->multi_player_property())) return false;
  return true;
}

void MultiObjectPropertyList::Swap(MultiObjectPropertyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiObjectPropertyList::InternalSwap(MultiObjectPropertyList* other) {
  using std::swap;
  multi_player_property_.InternalSwap(&other->multi_player_property_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiObjectPropertyList::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiObjectPropertyList

// repeated .NFMsg.ObjectPropertyList multi_player_property = 1;
int MultiObjectPropertyList::multi_player_property_size() const {
  return multi_player_property_.size();
}
void MultiObjectPropertyList::clear_multi_player_property() {
  multi_player_property_.Clear();
}
const ::NFMsg::ObjectPropertyList& MultiObjectPropertyList::multi_player_property(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Get(index);
}
::NFMsg::ObjectPropertyList* MultiObjectPropertyList::mutable_multi_player_property(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Mutable(index);
}
::NFMsg::ObjectPropertyList* MultiObjectPropertyList::add_multi_player_property() {
  // @@protoc_insertion_point(field_add:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList >*
MultiObjectPropertyList::mutable_multi_player_property() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MultiObjectPropertyList.multi_player_property)
  return &multi_player_property_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectPropertyList >&
MultiObjectPropertyList::multi_player_property() const {
  // @@protoc_insertion_point(field_list:NFMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectRecordList::kPlayerIdFieldNumber;
const int ObjectRecordList::kRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectRecordList::ObjectRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ObjectRecordList)
}
ObjectRecordList::ObjectRecordList(const ObjectRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      record_list_(from.record_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ObjectRecordList)
}

void ObjectRecordList::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
}

ObjectRecordList::~ObjectRecordList() {
  // @@protoc_insertion_point(destructor:NFMsg.ObjectRecordList)
  SharedDtor();
}

void ObjectRecordList::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectRecordList::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectRecordList& ObjectRecordList::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectRecordList* ObjectRecordList::New(::google::protobuf::Arena* arena) const {
  ObjectRecordList* n = new ObjectRecordList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ObjectRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_list_.Clear();
  if (has_player_id()) {
    GOOGLE_DCHECK(player_id_ != NULL);
    player_id_->::NFMsg::Ident::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ObjectRecordList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.ObjectRecordBase record_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ObjectRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ObjectRecordList)
  return false;
#undef DO_
}

void ObjectRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ObjectRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_list(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ObjectRecordList)
}

::google::protobuf::uint8* ObjectRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ObjectRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->record_list(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ObjectRecordList)
  return target;
}

size_t ObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ObjectRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .NFMsg.Ident player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }
  // repeated .NFMsg.ObjectRecordBase record_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ObjectRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ObjectRecordList)
    MergeFrom(*source);
  }
}

void ObjectRecordList::MergeFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_list_.MergeFrom(from.record_list_);
  if (from.has_player_id()) {
    mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
  }
}

void ObjectRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordList::CopyFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->record_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ObjectRecordList::Swap(ObjectRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectRecordList::InternalSwap(ObjectRecordList* other) {
  using std::swap;
  record_list_.InternalSwap(&other->record_list_);
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectRecordList::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectRecordList

// required .NFMsg.Ident player_id = 1;
bool ObjectRecordList::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjectRecordList::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjectRecordList::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjectRecordList::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& ObjectRecordList::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordList.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ObjectRecordList::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordList.player_id)
  return player_id_;
}
::NFMsg::Ident* ObjectRecordList::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ObjectRecordList.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ObjectRecordList::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ObjectRecordList.player_id)
}

// repeated .NFMsg.ObjectRecordBase record_list = 2;
int ObjectRecordList::record_list_size() const {
  return record_list_.size();
}
void ObjectRecordList::clear_record_list() {
  record_list_.Clear();
}
const ::NFMsg::ObjectRecordBase& ObjectRecordList::record_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ObjectRecordList.record_list)
  return record_list_.Get(index);
}
::NFMsg::ObjectRecordBase* ObjectRecordList::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ObjectRecordList.record_list)
  return record_list_.Mutable(index);
}
::NFMsg::ObjectRecordBase* ObjectRecordList::add_record_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ObjectRecordList.record_list)
  return record_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase >*
ObjectRecordList::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ObjectRecordList.record_list)
  return &record_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordBase >&
ObjectRecordList::record_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ObjectRecordList.record_list)
  return record_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiObjectRecordList::kMultiPlayerRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiObjectRecordList::MultiObjectRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.MultiObjectRecordList)
}
MultiObjectRecordList::MultiObjectRecordList(const MultiObjectRecordList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      multi_player_record_(from.multi_player_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.MultiObjectRecordList)
}

void MultiObjectRecordList::SharedCtor() {
  _cached_size_ = 0;
}

MultiObjectRecordList::~MultiObjectRecordList() {
  // @@protoc_insertion_point(destructor:NFMsg.MultiObjectRecordList)
  SharedDtor();
}

void MultiObjectRecordList::SharedDtor() {
}

void MultiObjectRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiObjectRecordList::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiObjectRecordList& MultiObjectRecordList::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiObjectRecordList* MultiObjectRecordList::New(::google::protobuf::Arena* arena) const {
  MultiObjectRecordList* n = new MultiObjectRecordList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.MultiObjectRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_player_record_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiObjectRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.MultiObjectRecordList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multi_player_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.MultiObjectRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.MultiObjectRecordList)
  return false;
#undef DO_
}

void MultiObjectRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.MultiObjectRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_player_record_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->multi_player_record(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.MultiObjectRecordList)
}

::google::protobuf::uint8* MultiObjectRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.MultiObjectRecordList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multi_player_record_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->multi_player_record(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.MultiObjectRecordList)
  return target;
}

size_t MultiObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.MultiObjectRecordList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .NFMsg.ObjectRecordList multi_player_record = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->multi_player_record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multi_player_record(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiObjectRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.MultiObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiObjectRecordList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiObjectRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.MultiObjectRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.MultiObjectRecordList)
    MergeFrom(*source);
  }
}

void MultiObjectRecordList::MergeFrom(const MultiObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.MultiObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_player_record_.MergeFrom(from.multi_player_record_);
}

void MultiObjectRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.MultiObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectRecordList::CopyFrom(const MultiObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.MultiObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectRecordList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->multi_player_record())) return false;
  return true;
}

void MultiObjectRecordList::Swap(MultiObjectRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiObjectRecordList::InternalSwap(MultiObjectRecordList* other) {
  using std::swap;
  multi_player_record_.InternalSwap(&other->multi_player_record_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiObjectRecordList::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiObjectRecordList

// repeated .NFMsg.ObjectRecordList multi_player_record = 1;
int MultiObjectRecordList::multi_player_record_size() const {
  return multi_player_record_.size();
}
void MultiObjectRecordList::clear_multi_player_record() {
  multi_player_record_.Clear();
}
const ::NFMsg::ObjectRecordList& MultiObjectRecordList::multi_player_record(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Get(index);
}
::NFMsg::ObjectRecordList* MultiObjectRecordList::mutable_multi_player_record(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Mutable(index);
}
::NFMsg::ObjectRecordList* MultiObjectRecordList::add_multi_player_record() {
  // @@protoc_insertion_point(field_add:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList >*
MultiObjectRecordList::mutable_multi_player_record() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MultiObjectRecordList.multi_player_record)
  return &multi_player_record_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::ObjectRecordList >&
MultiObjectRecordList::multi_player_record() const {
  // @@protoc_insertion_point(field_list:NFMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBase::kPlayerIdFieldNumber;
const int MsgBase::kMsgDataFieldNumber;
const int MsgBase::kPlayerClientListFieldNumber;
const int MsgBase::kHashIdentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBase::MsgBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_client_list_(from.player_client_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_data()) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  if (from.has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  if (from.has_hash_ident()) {
    hash_ident_ = new ::NFMsg::Ident(*from.hash_ident_);
  } else {
    hash_ident_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.MsgBase)
}

void MsgBase::SharedCtor() {
  _cached_size_ = 0;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hash_ident_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(hash_ident_));
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:NFMsg.MsgBase)
  SharedDtor();
}

void MsgBase::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete hash_ident_;
}

void MsgBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBase::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgBase& MsgBase::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgBase* MsgBase::New(::google::protobuf::Arena* arena) const {
  MsgBase* n = new MsgBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.MsgBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_client_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!msg_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->::NFMsg::Ident::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hash_ident_ != NULL);
      hash_ident_->::NFMsg::Ident::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.MsgBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes msg_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .NFMsg.Ident player_Client_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_client_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.Ident hash_ident = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hash_ident()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.MsgBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.MsgBase)
  return false;
#undef DO_
}

void MsgBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.MsgBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required bytes msg_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg_data(), output);
  }

  // repeated .NFMsg.Ident player_Client_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_client_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_client_list(static_cast<int>(i)), output);
  }

  // optional .NFMsg.Ident hash_ident = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hash_ident_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.MsgBase)
}

::google::protobuf::uint8* MsgBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.MsgBase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, deterministic, target);
  }

  // required bytes msg_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // repeated .NFMsg.Ident player_Client_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_client_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->player_client_list(static_cast<int>(i)), deterministic, target);
  }

  // optional .NFMsg.Ident hash_ident = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hash_ident_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.MsgBase)
  return target;
}

size_t MsgBase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.MsgBase)
  size_t total_size = 0;

  if (has_msg_data()) {
    // required bytes msg_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  if (has_player_id()) {
    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  return total_size;
}
size_t MsgBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.MsgBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes msg_data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());

    // required .NFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .NFMsg.Ident player_Client_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_client_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_client_list(static_cast<int>(i)));
    }
  }

  // optional .NFMsg.Ident hash_ident = 4;
  if (has_hash_ident()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hash_ident_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.MsgBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.MsgBase)
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_client_list_.MergeFrom(from.player_client_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_id()->::NFMsg::Ident::MergeFrom(from.player_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_hash_ident()->::NFMsg::Ident::MergeFrom(from.hash_ident());
    }
  }
}

void MsgBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->player_client_list())) return false;
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  if (has_hash_ident()) {
    if (!this->hash_ident_->IsInitialized()) return false;
  }
  return true;
}

void MsgBase::Swap(MsgBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBase::InternalSwap(MsgBase* other) {
  using std::swap;
  player_client_list_.InternalSwap(&other->player_client_list_);
  msg_data_.Swap(&other->msg_data_);
  swap(player_id_, other->player_id_);
  swap(hash_ident_, other->hash_ident_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgBase::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgBase

// required .NFMsg.Ident player_id = 1;
bool MsgBase::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgBase::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgBase::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgBase::clear_player_id() {
  if (player_id_ != NULL) player_id_->::NFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::NFMsg::Ident& MsgBase::player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.player_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* MsgBase::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.player_id)
  return player_id_;
}
::NFMsg::Ident* MsgBase::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.player_id)
  clear_has_player_id();
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void MsgBase::set_allocated_player_id(::NFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.player_id)
}

// required bytes msg_data = 2;
bool MsgBase::has_msg_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgBase::set_has_msg_data() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgBase::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgBase::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_data();
}
const ::std::string& MsgBase::msg_data() const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.msg_data)
  return msg_data_.GetNoArena();
}
void MsgBase::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.MsgBase.msg_data)
}
#if LANG_CXX11
void MsgBase::set_msg_data(::std::string&& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.MsgBase.msg_data)
}
#endif
void MsgBase::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.MsgBase.msg_data)
}
void MsgBase::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.MsgBase.msg_data)
}
::std::string* MsgBase::mutable_msg_data() {
  set_has_msg_data();
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgBase::release_msg_data() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.msg_data)
  clear_has_msg_data();
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgBase::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.msg_data)
}

// repeated .NFMsg.Ident player_Client_list = 3;
int MsgBase::player_client_list_size() const {
  return player_client_list_.size();
}
void MsgBase::clear_player_client_list() {
  player_client_list_.Clear();
}
const ::NFMsg::Ident& MsgBase::player_client_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Get(index);
}
::NFMsg::Ident* MsgBase::mutable_player_client_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Mutable(index);
}
::NFMsg::Ident* MsgBase::add_player_client_list() {
  // @@protoc_insertion_point(field_add:NFMsg.MsgBase.player_Client_list)
  return player_client_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >*
MsgBase::mutable_player_client_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.MsgBase.player_Client_list)
  return &player_client_list_;
}
const ::google::protobuf::RepeatedPtrField< ::NFMsg::Ident >&
MsgBase::player_client_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.MsgBase.player_Client_list)
  return player_client_list_;
}

// optional .NFMsg.Ident hash_ident = 4;
bool MsgBase::has_hash_ident() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgBase::set_has_hash_ident() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgBase::clear_has_hash_ident() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgBase::clear_hash_ident() {
  if (hash_ident_ != NULL) hash_ident_->::NFMsg::Ident::Clear();
  clear_has_hash_ident();
}
const ::NFMsg::Ident& MsgBase::hash_ident() const {
  const ::NFMsg::Ident* p = hash_ident_;
  // @@protoc_insertion_point(field_get:NFMsg.MsgBase.hash_ident)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* MsgBase::mutable_hash_ident() {
  set_has_hash_ident();
  if (hash_ident_ == NULL) {
    hash_ident_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.MsgBase.hash_ident)
  return hash_ident_;
}
::NFMsg::Ident* MsgBase::release_hash_ident() {
  // @@protoc_insertion_point(field_release:NFMsg.MsgBase.hash_ident)
  clear_has_hash_ident();
  ::NFMsg::Ident* temp = hash_ident_;
  hash_ident_ = NULL;
  return temp;
}
void MsgBase::set_allocated_hash_ident(::NFMsg::Ident* hash_ident) {
  delete hash_ident_;
  hash_ident_ = hash_ident;
  if (hash_ident) {
    set_has_hash_ident();
  } else {
    clear_has_hash_ident();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.MsgBase.hash_ident)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCommand::kControlIdFieldNumber;
const int ReqCommand::kCommandIdFieldNumber;
const int ReqCommand::kCommandStrValueFieldNumber;
const int ReqCommand::kCommandValueIntFieldNumber;
const int ReqCommand::kCommandValueFloatFieldNumber;
const int ReqCommand::kCommandValueStrFieldNumber;
const int ReqCommand::kCommandValueObjectFieldNumber;
const int ReqCommand::kRowFieldNumber;
const int ReqCommand::kColFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCommand::ReqCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NFMsgBase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqCommand)
}
ReqCommand::ReqCommand(const ReqCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_str_value()) {
    command_str_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_str_value_);
  }
  command_value_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command_value_str()) {
    command_value_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_value_str_);
  }
  if (from.has_control_id()) {
    control_id_ = new ::NFMsg::Ident(*from.control_id_);
  } else {
    control_id_ = NULL;
  }
  if (from.has_command_value_object()) {
    command_value_object_ = new ::NFMsg::Ident(*from.command_value_object_);
  } else {
    command_value_object_ = NULL;
  }
  ::memcpy(&command_value_int_, &from.command_value_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&command_value_int_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqCommand)
}

void ReqCommand::SharedCtor() {
  _cached_size_ = 0;
  command_str_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_value_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&control_id_)) + sizeof(col_));
}

ReqCommand::~ReqCommand() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqCommand)
  SharedDtor();
}

void ReqCommand::SharedDtor() {
  command_str_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_value_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete control_id_;
  if (this != internal_default_instance()) delete command_value_object_;
}

void ReqCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCommand::descriptor() {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReqCommand& ReqCommand::default_instance() {
  protobuf_NFMsgBase_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqCommand* ReqCommand::New(::google::protobuf::Arena* arena) const {
  ReqCommand* n = new ReqCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!command_str_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*command_str_value_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!command_value_str_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*command_value_str_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(control_id_ != NULL);
      control_id_->::NFMsg::Ident::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(command_value_object_ != NULL);
      command_value_object_->::NFMsg::Ident::Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&command_value_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_) -
        reinterpret_cast<char*>(&command_value_int_)) + sizeof(row_));
  }
  col_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReqCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.ReqCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NFMsg.Ident control_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NFMsg::ReqCommand_EGameCommandType_IsValid(value)) {
            set_command_id(static_cast< ::NFMsg::ReqCommand_EGameCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes command_str_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command_str_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 command_value_int = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_command_value_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &command_value_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double command_value_float = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_command_value_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &command_value_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes command_value_str = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command_value_str()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .NFMsg.Ident command_value_object = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command_value_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 row = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 col = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_col();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.ReqCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.ReqCommand)
  return false;
#undef DO_
}

void ReqCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.ReqCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident control_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->control_id_, output);
  }

  // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->command_id(), output);
  }

  // optional bytes command_str_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->command_str_value(), output);
  }

  // optional int64 command_value_int = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->command_value_int(), output);
  }

  // optional double command_value_float = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->command_value_float(), output);
  }

  // optional bytes command_value_str = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->command_value_str(), output);
  }

  // optional .NFMsg.Ident command_value_object = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->command_value_object_, output);
  }

  // optional int32 row = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->row(), output);
  }

  // optional int32 col = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->col(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.ReqCommand)
}

::google::protobuf::uint8* ReqCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .NFMsg.Ident control_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->control_id_, deterministic, target);
  }

  // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->command_id(), target);
  }

  // optional bytes command_str_value = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->command_str_value(), target);
  }

  // optional int64 command_value_int = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->command_value_int(), target);
  }

  // optional double command_value_float = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->command_value_float(), target);
  }

  // optional bytes command_value_str = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->command_value_str(), target);
  }

  // optional .NFMsg.Ident command_value_object = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->command_value_object_, deterministic, target);
  }

  // optional int32 row = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->row(), target);
  }

  // optional int32 col = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->col(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqCommand)
  return target;
}

size_t ReqCommand::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NFMsg.ReqCommand)
  size_t total_size = 0;

  if (has_control_id()) {
    // required .NFMsg.Ident control_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->control_id_);
  }

  if (has_command_id()) {
    // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_id());
  }

  return total_size;
}
size_t ReqCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000044) ^ 0x00000044) == 0) {  // All required fields are present.
    // required .NFMsg.Ident control_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->control_id_);

    // required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes command_str_value = 3;
    if (has_command_str_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command_str_value());
    }

    // optional bytes command_value_str = 6;
    if (has_command_value_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command_value_str());
    }

  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional .NFMsg.Ident command_value_object = 7;
    if (has_command_value_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_value_object_);
    }

    // optional int64 command_value_int = 4;
    if (has_command_value_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->command_value_int());
    }

    // optional double command_value_float = 5;
    if (has_command_value_float()) {
      total_size += 1 + 8;
    }

  }
  // optional int32 row = 8;
  if (has_row()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  // optional int32 col = 9;
  if (has_col()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqCommand)
    MergeFrom(*source);
  }
}

void ReqCommand::MergeFrom(const ReqCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_command_str_value();
      command_str_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_str_value_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_command_value_str();
      command_value_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_value_str_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_control_id()->::NFMsg::Ident::MergeFrom(from.control_id());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_command_value_object()->::NFMsg::Ident::MergeFrom(from.command_value_object());
    }
    if (cached_has_bits & 0x00000010u) {
      command_value_int_ = from.command_value_int_;
    }
    if (cached_has_bits & 0x00000020u) {
      command_value_float_ = from.command_value_float_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_id_ = from.command_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      row_ = from.row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_col(from.col());
  }
}

void ReqCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCommand::CopyFrom(const ReqCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000044) != 0x00000044) return false;
  if (has_control_id()) {
    if (!this->control_id_->IsInitialized()) return false;
  }
  if (has_command_value_object()) {
    if (!this->command_value_object_->IsInitialized()) return false;
  }
  return true;
}

void ReqCommand::Swap(ReqCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCommand::InternalSwap(ReqCommand* other) {
  using std::swap;
  command_str_value_.Swap(&other->command_str_value_);
  command_value_str_.Swap(&other->command_value_str_);
  swap(control_id_, other->control_id_);
  swap(command_value_object_, other->command_value_object_);
  swap(command_value_int_, other->command_value_int_);
  swap(command_value_float_, other->command_value_float_);
  swap(command_id_, other->command_id_);
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCommand::GetMetadata() const {
  protobuf_NFMsgBase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NFMsgBase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCommand

// required .NFMsg.Ident control_id = 1;
bool ReqCommand::has_control_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqCommand::set_has_control_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqCommand::clear_has_control_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqCommand::clear_control_id() {
  if (control_id_ != NULL) control_id_->::NFMsg::Ident::Clear();
  clear_has_control_id();
}
const ::NFMsg::Ident& ReqCommand::control_id() const {
  const ::NFMsg::Ident* p = control_id_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.control_id)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ReqCommand::mutable_control_id() {
  set_has_control_id();
  if (control_id_ == NULL) {
    control_id_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.control_id)
  return control_id_;
}
::NFMsg::Ident* ReqCommand::release_control_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.control_id)
  clear_has_control_id();
  ::NFMsg::Ident* temp = control_id_;
  control_id_ = NULL;
  return temp;
}
void ReqCommand::set_allocated_control_id(::NFMsg::Ident* control_id) {
  delete control_id_;
  control_id_ = control_id;
  if (control_id) {
    set_has_control_id();
  } else {
    clear_has_control_id();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.control_id)
}

// required .NFMsg.ReqCommand.EGameCommandType command_id = 2;
bool ReqCommand::has_command_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReqCommand::set_has_command_id() {
  _has_bits_[0] |= 0x00000040u;
}
void ReqCommand::clear_has_command_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReqCommand::clear_command_id() {
  command_id_ = 0;
  clear_has_command_id();
}
::NFMsg::ReqCommand_EGameCommandType ReqCommand::command_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_id)
  return static_cast< ::NFMsg::ReqCommand_EGameCommandType >(command_id_);
}
void ReqCommand::set_command_id(::NFMsg::ReqCommand_EGameCommandType value) {
  assert(::NFMsg::ReqCommand_EGameCommandType_IsValid(value));
  set_has_command_id();
  command_id_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_id)
}

// optional bytes command_str_value = 3;
bool ReqCommand::has_command_str_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqCommand::set_has_command_str_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqCommand::clear_has_command_str_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqCommand::clear_command_str_value() {
  command_str_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command_str_value();
}
const ::std::string& ReqCommand::command_str_value() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_str_value)
  return command_str_value_.GetNoArena();
}
void ReqCommand::set_command_str_value(const ::std::string& value) {
  set_has_command_str_value();
  command_str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_str_value)
}
#if LANG_CXX11
void ReqCommand::set_command_str_value(::std::string&& value) {
  set_has_command_str_value();
  command_str_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqCommand.command_str_value)
}
#endif
void ReqCommand::set_command_str_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command_str_value();
  command_str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqCommand.command_str_value)
}
void ReqCommand::set_command_str_value(const void* value, size_t size) {
  set_has_command_str_value();
  command_str_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqCommand.command_str_value)
}
::std::string* ReqCommand::mutable_command_str_value() {
  set_has_command_str_value();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_str_value)
  return command_str_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqCommand::release_command_str_value() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_str_value)
  clear_has_command_str_value();
  return command_str_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCommand::set_allocated_command_str_value(::std::string* command_str_value) {
  if (command_str_value != NULL) {
    set_has_command_str_value();
  } else {
    clear_has_command_str_value();
  }
  command_str_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_str_value);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_str_value)
}

// optional int64 command_value_int = 4;
bool ReqCommand::has_command_value_int() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqCommand::set_has_command_value_int() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqCommand::clear_has_command_value_int() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqCommand::clear_command_value_int() {
  command_value_int_ = GOOGLE_LONGLONG(0);
  clear_has_command_value_int();
}
::google::protobuf::int64 ReqCommand::command_value_int() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_int)
  return command_value_int_;
}
void ReqCommand::set_command_value_int(::google::protobuf::int64 value) {
  set_has_command_value_int();
  command_value_int_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_int)
}

// optional double command_value_float = 5;
bool ReqCommand::has_command_value_float() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReqCommand::set_has_command_value_float() {
  _has_bits_[0] |= 0x00000020u;
}
void ReqCommand::clear_has_command_value_float() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReqCommand::clear_command_value_float() {
  command_value_float_ = 0;
  clear_has_command_value_float();
}
double ReqCommand::command_value_float() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_float)
  return command_value_float_;
}
void ReqCommand::set_command_value_float(double value) {
  set_has_command_value_float();
  command_value_float_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_float)
}

// optional bytes command_value_str = 6;
bool ReqCommand::has_command_value_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqCommand::set_has_command_value_str() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqCommand::clear_has_command_value_str() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqCommand::clear_command_value_str() {
  command_value_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command_value_str();
}
const ::std::string& ReqCommand::command_value_str() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_str)
  return command_value_str_.GetNoArena();
}
void ReqCommand::set_command_value_str(const ::std::string& value) {
  set_has_command_value_str();
  command_value_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.command_value_str)
}
#if LANG_CXX11
void ReqCommand::set_command_value_str(::std::string&& value) {
  set_has_command_value_str();
  command_value_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqCommand.command_value_str)
}
#endif
void ReqCommand::set_command_value_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command_value_str();
  command_value_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqCommand.command_value_str)
}
void ReqCommand::set_command_value_str(const void* value, size_t size) {
  set_has_command_value_str();
  command_value_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqCommand.command_value_str)
}
::std::string* ReqCommand::mutable_command_value_str() {
  set_has_command_value_str();
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_value_str)
  return command_value_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReqCommand::release_command_value_str() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_value_str)
  clear_has_command_value_str();
  return command_value_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReqCommand::set_allocated_command_value_str(::std::string* command_value_str) {
  if (command_value_str != NULL) {
    set_has_command_value_str();
  } else {
    clear_has_command_value_str();
  }
  command_value_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command_value_str);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_value_str)
}

// optional .NFMsg.Ident command_value_object = 7;
bool ReqCommand::has_command_value_object() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqCommand::set_has_command_value_object() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqCommand::clear_has_command_value_object() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqCommand::clear_command_value_object() {
  if (command_value_object_ != NULL) command_value_object_->::NFMsg::Ident::Clear();
  clear_has_command_value_object();
}
const ::NFMsg::Ident& ReqCommand::command_value_object() const {
  const ::NFMsg::Ident* p = command_value_object_;
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.command_value_object)
  return p != NULL ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
::NFMsg::Ident* ReqCommand::mutable_command_value_object() {
  set_has_command_value_object();
  if (command_value_object_ == NULL) {
    command_value_object_ = new ::NFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqCommand.command_value_object)
  return command_value_object_;
}
::NFMsg::Ident* ReqCommand::release_command_value_object() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqCommand.command_value_object)
  clear_has_command_value_object();
  ::NFMsg::Ident* temp = command_value_object_;
  command_value_object_ = NULL;
  return temp;
}
void ReqCommand::set_allocated_command_value_object(::NFMsg::Ident* command_value_object) {
  delete command_value_object_;
  command_value_object_ = command_value_object;
  if (command_value_object) {
    set_has_command_value_object();
  } else {
    clear_has_command_value_object();
  }
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqCommand.command_value_object)
}

// optional int32 row = 8;
bool ReqCommand::has_row() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ReqCommand::set_has_row() {
  _has_bits_[0] |= 0x00000080u;
}
void ReqCommand::clear_has_row() {
  _has_bits_[0] &= ~0x00000080u;
}
void ReqCommand::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 ReqCommand::row() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.row)
  return row_;
}
void ReqCommand::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.row)
}

// optional int32 col = 9;
bool ReqCommand::has_col() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ReqCommand::set_has_col() {
  _has_bits_[0] |= 0x00000100u;
}
void ReqCommand::clear_has_col() {
  _has_bits_[0] &= ~0x00000100u;
}
void ReqCommand::clear_col() {
  col_ = 0;
  clear_has_col();
}
::google::protobuf::int32 ReqCommand::col() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqCommand.col)
  return col_;
}
void ReqCommand::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:NFMsg.ReqCommand.col)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

// @@protoc_insertion_point(global_scope)
